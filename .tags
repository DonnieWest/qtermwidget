!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/db3d9a6c/
AccessibleColorScheme	lib/ColorScheme.cpp	/^AccessibleColorScheme::AccessibleColorScheme()$/;"	f	class:AccessibleColorScheme
AccessibleColorScheme	lib/ColorScheme.h	/^class AccessibleColorScheme : public ColorScheme$/;"	c	namespace:Konsole
AllChannels	lib/kptyprocess.h	/^        AllChannels = 7 \/**< Connect PTY to all channels. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
AllOutputChannels	lib/kptyprocess.h	/^        AllOutputChannels = 6, \/**< Connect PTY to all output channels. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
AlternateScreenState	lib/KeyboardTranslator.h	/^        AlternateScreenState = 8,$/;"	e	enum:Konsole::KeyboardTranslator::State
AnsiState	lib/KeyboardTranslator.h	/^        AnsiState = 2,$/;"	e	enum:Konsole::KeyboardTranslator::State
AnyModifierState	lib/KeyboardTranslator.h	/^        AnyModifierState = 16,$/;"	e	enum:Konsole::KeyboardTranslator::State
ApplicationKeypadState	lib/KeyboardTranslator.h	/^        ApplicationKeypadState = 32$/;"	e	enum:Konsole::KeyboardTranslator::State
AutoScrollHandler	lib/TerminalDisplay.cpp	/^AutoScrollHandler::AutoScrollHandler(QWidget* parent)$/;"	f	class:AutoScrollHandler
AutoScrollHandler	lib/TerminalDisplay.h	/^class AutoScrollHandler : public QObject$/;"	c	namespace:Konsole
BASE_COLORS	lib/CharacterColor.h	/^#define BASE_COLORS /;"	d
BLOCKARRAY_H	lib/BlockArray.h	/^#define BLOCKARRAY_H$/;"	d
BS_CLEARS	lib/Screen.cpp	/^#define BS_CLEARS /;"	d	file:
BULK_TIMEOUT1	lib/Emulation.cpp	/^#define BULK_TIMEOUT1 /;"	d	file:
BULK_TIMEOUT2	lib/Emulation.cpp	/^#define BULK_TIMEOUT2 /;"	d	file:
BellMode	lib/TerminalDisplay.h	/^    enum BellMode$/;"	g	class:Konsole::TerminalDisplay
Block	lib/BlockArray.h	/^    Block() {$/;"	f	struct:Konsole::Block
Block	lib/BlockArray.h	/^struct Block {$/;"	s	namespace:Konsole
BlockArray	lib/BlockArray.cpp	/^BlockArray::BlockArray()$/;"	f	class:BlockArray
BlockArray	lib/BlockArray.h	/^class BlockArray {$/;"	c	namespace:Konsole
BlockCursor	lib/qtermwidget.h	/^        BlockCursor = 0,$/;"	e	enum:QTermWidget::KeyboardCursorShape
BlockSize	lib/BlockArray.h	/^#define BlockSize /;"	d
Bold	lib/CharacterColor.h	/^    Bold,$/;"	e	enum:Konsole::ColorEntry::FontWeight
BotC	lib/TerminalDisplay.cpp	/^    BotC  = (1<<22),$/;"	e	enum:LineEncode	file:
BotL	lib/TerminalDisplay.cpp	/^    BotL  = (1<<21),$/;"	e	enum:LineEncode	file:
BotR	lib/TerminalDisplay.cpp	/^    BotR  = (1<<23)$/;"	e	enum:LineEncode	file:
BuildRequires	qtermwidget.spec	/^BuildRequires:	gcc-c++, %{breq}, cmake$/;"	t
BuildRoot	qtermwidget.spec	/^BuildRoot:	%{_tmppath}\/%{name}-%{version}-build$/;"	t
CHARACTERCOLOR_H	lib/CharacterColor.h	/^#define CHARACTERCOLOR_H$/;"	d
CHARACTER_H	lib/Character.h	/^#define CHARACTER_H$/;"	d
CHARSET	lib/Vt102Emulation.cpp	/^#define CHARSET /;"	d	file:
CHR	lib/Vt102Emulation.cpp	/^#define CHR /;"	d	file:
CHUNKSIZE	lib/kptydevice.h	/^#define CHUNKSIZE /;"	d
CNTL	lib/Vt102Emulation.cpp	/^#define CNTL(/;"	d	file:
COLORSCHEME_H	lib/ColorScheme.h	/^#define COLORSCHEME_H$/;"	d
COLOR_SPACE_256	lib/CharacterColor.h	/^#define COLOR_SPACE_256 /;"	d
COLOR_SPACE_DEFAULT	lib/CharacterColor.h	/^#define COLOR_SPACE_DEFAULT /;"	d
COLOR_SPACE_RGB	lib/CharacterColor.h	/^#define COLOR_SPACE_RGB /;"	d
COLOR_SPACE_SYSTEM	lib/CharacterColor.h	/^#define COLOR_SPACE_SYSTEM /;"	d
COLOR_SPACE_UNDEFINED	lib/CharacterColor.h	/^#define COLOR_SPACE_UNDEFINED /;"	d
CPN	lib/Vt102Emulation.cpp	/^#define CPN /;"	d	file:
CPS	lib/Vt102Emulation.cpp	/^#define CPS /;"	d	file:
CTL	lib/Vt102Emulation.cpp	/^#define CTL /;"	d	file:
CTRL	lib/kpty.cpp	/^# define CTRL(/;"	d	file:
CharCodes	lib/Vt102Emulation.h	/^struct CharCodes$/;"	s	namespace:Konsole
Character	lib/Character.h	/^  inline Character(quint16 _c = ' ',$/;"	f	class:Konsole::Character
Character	lib/Character.h	/^class Character$/;"	c	namespace:Konsole
CharacterColor	lib/CharacterColor.h	/^  CharacterColor()$/;"	f	class:Konsole::CharacterColor
CharacterColor	lib/CharacterColor.h	/^  CharacterColor(quint8 colorSpace, int co)$/;"	f	class:Konsole::CharacterColor
CharacterColor	lib/CharacterColor.h	/^class CharacterColor$/;"	c	namespace:Konsole
CharacterFormat	lib/History.h	/^class CharacterFormat$/;"	c	namespace:Konsole
ColorEntry	lib/CharacterColor.h	/^  ColorEntry() : transparent(false), fontWeight(UseCurrentFormat) {}$/;"	f	class:Konsole::ColorEntry
ColorEntry	lib/CharacterColor.h	/^  ColorEntry(QColor c, bool tr, FontWeight weight = UseCurrentFormat)$/;"	f	class:Konsole::ColorEntry
ColorEntry	lib/CharacterColor.h	/^class ColorEntry$/;"	c	namespace:Konsole
ColorScheme	lib/ColorScheme.cpp	/^ColorScheme::ColorScheme()$/;"	f	class:ColorScheme
ColorScheme	lib/ColorScheme.cpp	/^ColorScheme::ColorScheme(const ColorScheme& other)$/;"	f	class:ColorScheme
ColorScheme	lib/ColorScheme.h	/^class ColorScheme$/;"	c	namespace:Konsole
ColorSchemeManager	lib/ColorScheme.cpp	/^ColorSchemeManager::ColorSchemeManager()$/;"	f	class:ColorSchemeManager
ColorSchemeManager	lib/ColorScheme.h	/^class ColorSchemeManager$/;"	c	namespace:Konsole
Command	lib/KeyboardTranslator.h	/^            Command,$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
Command	lib/KeyboardTranslator.h	/^    enum Command$/;"	g	class:Konsole::KeyboardTranslator
CompactHistoryBlock	lib/History.h	/^  CompactHistoryBlock(){$/;"	f	class:Konsole::CompactHistoryBlock
CompactHistoryBlock	lib/History.h	/^class CompactHistoryBlock$/;"	c	namespace:Konsole
CompactHistoryBlockList	lib/History.h	/^  CompactHistoryBlockList() {};$/;"	f	class:Konsole::CompactHistoryBlockList
CompactHistoryBlockList	lib/History.h	/^class CompactHistoryBlockList {$/;"	c	namespace:Konsole
CompactHistoryLine	lib/History.cpp	/^CompactHistoryLine::CompactHistoryLine ( const TextLine& line, CompactHistoryBlockList& bList )$/;"	f	class:CompactHistoryLine
CompactHistoryLine	lib/History.h	/^class CompactHistoryLine$/;"	c	namespace:Konsole
CompactHistoryScroll	lib/History.cpp	/^CompactHistoryScroll::CompactHistoryScroll ( unsigned int maxLineCount )$/;"	f	class:CompactHistoryScroll
CompactHistoryScroll	lib/History.h	/^class CompactHistoryScroll : public HistoryScroll$/;"	c	namespace:Konsole
CompactHistoryType	lib/History.cpp	/^CompactHistoryType::CompactHistoryType ( unsigned int nbLines )$/;"	f	class:CompactHistoryType
CompactHistoryType	lib/History.h	/^class CompactHistoryType : public HistoryType$/;"	c	namespace:Konsole
CompleteUrlRegExp	lib/Filter.cpp	/^const QRegExp UrlFilter::CompleteUrlRegExp('('+FullUrlRegExp.pattern()+'|'+$/;"	m	class:UrlFilter	typeref:typename:const QRegExp
CompleteUrlRegExp	lib/Filter.h	/^    static const QRegExp CompleteUrlRegExp;$/;"	m	class:Konsole::UrlFilter	typeref:typename:const QRegExp
Configuration	pyqt/config.py	/^class Configuration(sipconfig.Configuration):$/;"	c
CopyInputToAll	lib/Session.h	/^        CopyInputToAll = 1$/;"	e	enum:Konsole::SessionGroup::MasterMode
CursorKeysState	lib/KeyboardTranslator.h	/^        CursorKeysState = 4,$/;"	e	enum:Konsole::KeyboardTranslator::State
DEFAULT_BACK_COLOR	lib/CharacterColor.h	/^#define DEFAULT_BACK_COLOR /;"	d
DEFAULT_FORE_COLOR	lib/CharacterColor.h	/^#define DEFAULT_FORE_COLOR /;"	d
DEFAULT_LEFT_MARGIN	lib/TerminalDisplay.h	/^    static const int DEFAULT_LEFT_MARGIN = 1;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:const int
DEFAULT_RENDITION	lib/Character.h	/^#define DEFAULT_RENDITION /;"	d
DEFAULT_TOP_MARGIN	lib/TerminalDisplay.h	/^    static const int DEFAULT_TOP_MARGIN = 1;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:const int
DEL	lib/Vt102Emulation.cpp	/^#define DEL /;"	d	file:
DIG	lib/Vt102Emulation.cpp	/^#define DIG /;"	d	file:
DUMMYENV	lib/kprocess.cpp	/^#define DUMMYENV /;"	d	file:
DisplayedTitleRole	lib/Session.h	/^        DisplayedTitleRole$/;"	e	enum:Konsole::Session::TitleRole
DragState	lib/TerminalDisplay.h	/^    enum DragState { diNone, diPending, diDragging };$/;"	g	class:Konsole::TerminalDisplay
EMULATION_H	lib/Emulation.h	/^#define EMULATION_H$/;"	d
ENTRIES	lib/BlockArray.h	/^#define ENTRIES /;"	d
ESC	lib/Vt102Emulation.cpp	/^#define ESC /;"	d	file:
Email	lib/Filter.h	/^            Email,$/;"	e	enum:Konsole::UrlFilter::HotSpot::UrlType
EmailAddressRegExp	lib/Filter.cpp	/^const QRegExp UrlFilter::EmailAddressRegExp("\\\\b(\\\\w|\\\\.|-)+@(\\\\w|\\\\.|-)+\\\\.\\\\w+\\/;"	m	class:UrlFilter	typeref:typename:const QRegExp
EmailAddressRegExp	lib/Filter.h	/^    static const QRegExp EmailAddressRegExp;$/;"	m	class:Konsole::UrlFilter	typeref:typename:const QRegExp
Emulation	lib/Emulation.cpp	/^Emulation::Emulation() :$/;"	f	class:Emulation
Emulation	lib/Emulation.h	/^class KONSOLEPRIVATE_EXPORT Emulation : public QObject$/;"	c	namespace:Konsole
EmulationCodec	lib/Emulation.h	/^  enum EmulationCodec$/;"	g	class:Konsole::Emulation
EmulationPtr	lib/HistorySearch.h	/^typedef QPointer<Emulation> EmulationPtr;$/;"	t	typeref:typename:QPointer<Emulation>
Entry	lib/KeyboardTranslator.cpp	/^KeyboardTranslator::Entry::Entry()$/;"	f	class:KeyboardTranslator::Entry
Entry	lib/KeyboardTranslator.h	/^    class Entry$/;"	c	class:Konsole::KeyboardTranslator
EraseCommand	lib/KeyboardTranslator.h	/^        EraseCommand = 256$/;"	e	enum:Konsole::KeyboardTranslator::Command
ExtendedCharTable	lib/Character.h	/^class ExtendedCharTable$/;"	c	namespace:Konsole
ExtendedCharTable	lib/Emulation.cpp	/^ExtendedCharTable::ExtendedCharTable()$/;"	f	class:ExtendedCharTable
FILTER_H	lib/Filter.h	/^#define FILTER_H$/;"	d
Filter	lib/Filter.cpp	/^Filter::Filter() :$/;"	f	class:Filter
Filter	lib/Filter.h	/^class Filter : public QObject$/;"	c	namespace:Konsole
Filter	lib/Filter.h	/^typedef Konsole::Filter Filter;$/;"	t	typeref:typename:Konsole::Filter
FilterChain	lib/Filter.h	/^class FilterChain : protected QList<Filter*>$/;"	c	namespace:Konsole
FilterObject	lib/Filter.h	/^    FilterObject(Filter::HotSpot* filter) : _filter(filter) {}$/;"	f	class:Konsole::FilterObject
FilterObject	lib/Filter.h	/^class FilterObject : public QObject$/;"	c	namespace:Konsole
FontWeight	lib/CharacterColor.h	/^  enum FontWeight$/;"	g	class:Konsole::ColorEntry
ForwardedChannels	lib/kprocess.h	/^        ForwardedChannels = QProcess::ForwardedChannels,$/;"	e	enum:KProcess::OutputChannelMode
FullUrlRegExp	lib/Filter.cpp	/^const QRegExp UrlFilter::FullUrlRegExp("(www\\\\.(?!\\\\.)|[a-z][a-z0-9+.-]*:\/\/)[^\\\\s<>'\\"]/;"	m	class:UrlFilter	typeref:typename:const QRegExp
FullUrlRegExp	lib/Filter.h	/^    static const QRegExp FullUrlRegExp;$/;"	m	class:Konsole::UrlFilter	typeref:typename:const QRegExp
GRP	lib/Vt102Emulation.cpp	/^#define GRP /;"	d	file:
Group	qtermwidget.spec	/^Group:		"Development\/Libraries\/C and C++"$/;"	t
Group	qtermwidget.spec	/^Group:		Utility$/;"	t
HAVE_LIBUTIL_H	lib/kpty.cpp	/^#define HAVE_LIBUTIL_H$/;"	d	file:
HAVE_LOGIN	lib/kpty.cpp	/^#define HAVE_LOGIN$/;"	d	file:
HAVE_TRANSPARENCY	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::HAVE_TRANSPARENCY = true;$/;"	m	class:TerminalDisplay	typeref:typename:bool
HAVE_TRANSPARENCY	lib/TerminalDisplay.h	/^    static bool HAVE_TRANSPARENCY;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
HTMLDecoder	lib/TerminalCharacterDecoder.cpp	/^HTMLDecoder::HTMLDecoder() :$/;"	f	class:HTMLDecoder
HTMLDecoder	lib/TerminalCharacterDecoder.h	/^class HTMLDecoder : public TerminalCharacterDecoder$/;"	c	namespace:Konsole
HistoryArray	lib/History.h	/^  typedef QList<CompactHistoryLine*> HistoryArray;$/;"	t	class:Konsole::CompactHistoryScroll	typeref:typename:QList<CompactHistoryLine * >
HistoryFile	lib/History.cpp	/^HistoryFile::HistoryFile()$/;"	f	class:HistoryFile
HistoryFile	lib/History.h	/^class HistoryFile$/;"	c	namespace:Konsole
HistoryLine	lib/History.h	/^  typedef QVector<Character> HistoryLine;$/;"	t	class:Konsole::HistoryScrollBuffer	typeref:typename:QVector<Character>
HistoryScroll	lib/History.cpp	/^HistoryScroll::HistoryScroll(HistoryType* t)$/;"	f	class:HistoryScroll
HistoryScroll	lib/History.h	/^class HistoryScroll$/;"	c	namespace:Konsole
HistoryScrollBlockArray	lib/History.cpp	/^HistoryScrollBlockArray::HistoryScrollBlockArray(size_t size)$/;"	f	class:HistoryScrollBlockArray
HistoryScrollBlockArray	lib/History.h	/^class HistoryScrollBlockArray : public HistoryScroll$/;"	c	namespace:Konsole
HistoryScrollBuffer	lib/History.cpp	/^HistoryScrollBuffer::HistoryScrollBuffer(unsigned int maxLineCount)$/;"	f	class:HistoryScrollBuffer
HistoryScrollBuffer	lib/History.h	/^class HistoryScrollBuffer : public HistoryScroll$/;"	c	namespace:Konsole
HistoryScrollFile	lib/History.cpp	/^HistoryScrollFile::HistoryScrollFile(const QString &logFileName)$/;"	f	class:HistoryScrollFile
HistoryScrollFile	lib/History.h	/^class HistoryScrollFile : public HistoryScroll$/;"	c	namespace:Konsole
HistoryScrollNone	lib/History.cpp	/^HistoryScrollNone::HistoryScrollNone()$/;"	f	class:HistoryScrollNone
HistoryScrollNone	lib/History.h	/^class HistoryScrollNone : public HistoryScroll$/;"	c	namespace:Konsole
HistorySearch	lib/HistorySearch.cpp	/^HistorySearch::HistorySearch(EmulationPtr emulation, QRegExp regExp,$/;"	f	class:HistorySearch
HistorySearch	lib/HistorySearch.h	/^class HistorySearch : public QObject$/;"	c
HistoryType	lib/History.cpp	/^HistoryType::HistoryType()$/;"	f	class:HistoryType
HistoryType	lib/History.h	/^class HistoryType$/;"	c	namespace:Konsole
HistoryTypeBlockArray	lib/History.cpp	/^HistoryTypeBlockArray::HistoryTypeBlockArray(size_t size)$/;"	f	class:HistoryTypeBlockArray
HistoryTypeBlockArray	lib/History.h	/^class HistoryTypeBlockArray : public HistoryType$/;"	c	namespace:Konsole
HistoryTypeBuffer	lib/History.cpp	/^HistoryTypeBuffer::HistoryTypeBuffer(unsigned int nbLines)$/;"	f	class:HistoryTypeBuffer
HistoryTypeBuffer	lib/History.h	/^class HistoryTypeBuffer : public HistoryType$/;"	c	namespace:Konsole
HistoryTypeFile	lib/History.cpp	/^HistoryTypeFile::HistoryTypeFile(const QString& fileName)$/;"	f	class:HistoryTypeFile
HistoryTypeFile	lib/History.h	/^class HistoryTypeFile : public HistoryType$/;"	c	namespace:Konsole
HistoryTypeNone	lib/History.cpp	/^HistoryTypeNone::HistoryTypeNone()$/;"	f	class:HistoryTypeNone
HistoryTypeNone	lib/History.h	/^class HistoryTypeNone : public HistoryType$/;"	c	namespace:Konsole
HotSpot	lib/Filter.cpp	/^Filter::HotSpot::HotSpot(int startLine , int startColumn , int endLine , int endColumn)$/;"	f	class:Filter::HotSpot
HotSpot	lib/Filter.cpp	/^RegExpFilter::HotSpot::HotSpot(int startLine,int startColumn,int endLine,int endColumn)$/;"	f	class:RegExpFilter::HotSpot
HotSpot	lib/Filter.cpp	/^UrlFilter::HotSpot::HotSpot(int startLine,int startColumn,int endLine,int endColumn)$/;"	f	class:UrlFilter::HotSpot
HotSpot	lib/Filter.h	/^    class HotSpot : public Filter::HotSpot$/;"	c	class:Konsole::RegExpFilter
HotSpot	lib/Filter.h	/^    class HotSpot : public RegExpFilter::HotSpot$/;"	c	class:Konsole::UrlFilter
HotSpot	lib/Filter.h	/^    class HotSpot$/;"	c	class:Konsole::Filter
IBeamCursor	lib/qtermwidget.h	/^        IBeamCursor = 2$/;"	e	enum:QTermWidget::KeyboardCursorShape
INTENSITIES	lib/CharacterColor.h	/^#define INTENSITIES /;"	d
ImageLine	lib/Screen.h	/^    typedef QVector<Character> ImageLine;      \/\/ [0..columns]$/;"	t	class:Konsole::Screen	typeref:typename:QVector<Character>
InputMethodData	lib/TerminalDisplay.h	/^    struct InputMethodData$/;"	s	class:Konsole::TerminalDisplay
Int11	lib/TerminalDisplay.cpp	/^    Int11 = (1<<6),$/;"	e	enum:LineEncode	file:
Int12	lib/TerminalDisplay.cpp	/^    Int12 = (1<<7),$/;"	e	enum:LineEncode	file:
Int13	lib/TerminalDisplay.cpp	/^    Int13 = (1<<8),$/;"	e	enum:LineEncode	file:
Int21	lib/TerminalDisplay.cpp	/^    Int21 = (1<<11),$/;"	e	enum:LineEncode	file:
Int22	lib/TerminalDisplay.cpp	/^    Int22 = (1<<12),$/;"	e	enum:LineEncode	file:
Int23	lib/TerminalDisplay.cpp	/^    Int23 = (1<<13),$/;"	e	enum:LineEncode	file:
Int31	lib/TerminalDisplay.cpp	/^    Int31 = (1<<16),$/;"	e	enum:LineEncode	file:
Int32	lib/TerminalDisplay.cpp	/^    Int32 = (1<<17),$/;"	e	enum:LineEncode	file:
Int33	lib/TerminalDisplay.cpp	/^    Int33 = (1<<18),$/;"	e	enum:LineEncode	file:
KDE3ColorSchemeReader	lib/ColorScheme.cpp	/^KDE3ColorSchemeReader::KDE3ColorSchemeReader( QIODevice* device ) :$/;"	f	class:KDE3ColorSchemeReader
KDE3ColorSchemeReader	lib/ColorScheme.h	/^class KDE3ColorSchemeReader$/;"	c	namespace:Konsole
KDE_NO_EXPORT	lib/CharacterColor.h	/^#define KDE_NO_EXPORT$/;"	d
KDE_lseek	lib/History.cpp	/^#define KDE_lseek /;"	d	file:
KEYBOARDTRANSLATOR_H	lib/KeyboardTranslator.h	/^#define KEYBOARDTRANSLATOR_H$/;"	d
KMAXINT	lib/kptydevice.h	/^#define KMAXINT /;"	d
KONSOLEPRIVATE_EXPORT	lib/Emulation.h	/^#define KONSOLEPRIVATE_EXPORT$/;"	d
KONSOLEPRIVATE_EXPORT	lib/KeyboardTranslator.h	/^#define KONSOLEPRIVATE_EXPORT$/;"	d
KONSOLEPRIVATE_EXPORT	lib/TerminalDisplay.h	/^#define KONSOLEPRIVATE_EXPORT$/;"	d
KPROCESS_H	lib/kprocess.h	/^#define KPROCESS_H$/;"	d
KPTYPROCESS_H	lib/kptyprocess.h	/^#define KPTYPROCESS_H$/;"	d
KProcess	lib/kprocess.cpp	/^KProcess::KProcess(KProcessPrivate *d, QObject *parent) :$/;"	f	class:KProcess
KProcess	lib/kprocess.cpp	/^KProcess::KProcess(QObject *parent) :$/;"	f	class:KProcess
KProcess	lib/kprocess.h	/^class KProcess : public QProcess$/;"	c
KProcessPrivate	lib/kprocess.h	/^    KProcessPrivate() :$/;"	f	class:KProcessPrivate
KProcessPrivate	lib/kprocess.h	/^class KProcessPrivate {$/;"	c
KPty	lib/kpty.cpp	/^KPty::KPty() :$/;"	f	class:KPty
KPty	lib/kpty.cpp	/^KPty::KPty(KPtyPrivate *d) :$/;"	f	class:KPty
KPty	lib/kpty.h	/^class KPty {$/;"	c
KPtyDevice	lib/kptydevice.cpp	/^KPtyDevice::KPtyDevice(QObject *parent) :$/;"	f	class:KPtyDevice
KPtyDevice	lib/kptydevice.h	/^class KPtyDevice : public QIODevice, public KPty {$/;"	c
KPtyDevicePrivate	lib/kptydevice.h	/^    KPtyDevicePrivate(KPty* parent) :$/;"	f	struct:KPtyDevicePrivate	typeref:typename:KPtyDevice
KPtyDevicePrivate	lib/kptydevice.h	/^struct KPtyDevicePrivate : public KPtyPrivate {$/;"	s
KPtyPrivate	lib/kpty.cpp	/^KPtyPrivate::KPtyPrivate(KPty* parent) :$/;"	f	class:KPtyPrivate
KPtyPrivate	lib/kpty_p.h	/^class KPtyPrivate {$/;"	c
KPtyProcess	lib/kptyprocess.cpp	/^KPtyProcess::KPtyProcess(QObject *parent) :$/;"	f	class:KPtyProcess
KPtyProcess	lib/kptyprocess.cpp	/^KPtyProcess::KPtyProcess(int ptyMasterFd, QObject *parent) :$/;"	f	class:KPtyProcess
KPtyProcess	lib/kptyprocess.h	/^class KPtyProcess : public KProcess$/;"	c
KPtyProcessPrivate	lib/kptyprocess.h	/^    KPtyProcessPrivate() :$/;"	f	class:KPtyProcessPrivate
KPtyProcessPrivate	lib/kptyprocess.h	/^class KPtyProcessPrivate : public KProcessPrivate {$/;"	c
KRingBuffer	lib/kptydevice.h	/^    KRingBuffer()$/;"	f	class:KRingBuffer
KRingBuffer	lib/kptydevice.h	/^class KRingBuffer$/;"	c
KeyKeyword	lib/KeyboardTranslator.h	/^            KeyKeyword,$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
KeySequence	lib/KeyboardTranslator.h	/^            KeySequence,$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
KeyboardCursorShape	lib/qtermwidget.h	/^    enum KeyboardCursorShape {$/;"	g	class:QTermWidget
KeyboardTranslator	lib/KeyboardTranslator.cpp	/^KeyboardTranslator::KeyboardTranslator(const QString& name)$/;"	f	class:KeyboardTranslator
KeyboardTranslator	lib/KeyboardTranslator.h	/^class KeyboardTranslator$/;"	c	namespace:Konsole
KeyboardTranslatorManager	lib/KeyboardTranslator.cpp	/^KeyboardTranslatorManager::KeyboardTranslatorManager()$/;"	f	class:KeyboardTranslatorManager
KeyboardTranslatorManager	lib/KeyboardTranslator.h	/^class KONSOLEPRIVATE_EXPORT KeyboardTranslatorManager$/;"	c	namespace:Konsole
KeyboardTranslatorReader	lib/KeyboardTranslator.cpp	/^KeyboardTranslatorReader::KeyboardTranslatorReader( QIODevice* source )$/;"	f	class:KeyboardTranslatorReader
KeyboardTranslatorReader	lib/KeyboardTranslator.h	/^class KeyboardTranslatorReader$/;"	c	namespace:Konsole
KeyboardTranslatorWriter	lib/KeyboardTranslator.cpp	/^KeyboardTranslatorWriter::KeyboardTranslatorWriter(QIODevice* destination)$/;"	f	class:KeyboardTranslatorWriter
KeyboardTranslatorWriter	lib/KeyboardTranslator.h	/^class KeyboardTranslatorWriter$/;"	c	namespace:Konsole
Konsole	lib/BlockArray.h	/^namespace Konsole {$/;"	n
Konsole	lib/Character.h	/^namespace Konsole$/;"	n
Konsole	lib/CharacterColor.h	/^namespace Konsole$/;"	n
Konsole	lib/ColorScheme.h	/^namespace Konsole$/;"	n
Konsole	lib/Emulation.h	/^namespace Konsole$/;"	n
Konsole	lib/Filter.h	/^namespace Konsole$/;"	n
Konsole	lib/History.h	/^namespace Konsole$/;"	n
Konsole	lib/KeyboardTranslator.h	/^namespace Konsole$/;"	n
Konsole	lib/Pty.h	/^namespace Konsole {$/;"	n
Konsole	lib/Screen.h	/^namespace Konsole$/;"	n
Konsole	lib/ScreenWindow.h	/^namespace Konsole$/;"	n
Konsole	lib/Session.h	/^namespace Konsole {$/;"	n
Konsole	lib/ShellCommand.h	/^namespace Konsole {$/;"	n
Konsole	lib/TerminalCharacterDecoder.h	/^namespace Konsole$/;"	n
Konsole	lib/TerminalDisplay.h	/^namespace Konsole$/;"	n
Konsole	lib/Vt102Emulation.h	/^namespace Konsole$/;"	n
LINE_DEFAULT	lib/Character.h	/^static const int LINE_DEFAULT        = 0;$/;"	v	namespace:Konsole	typeref:typename:const int
LINE_DOUBLEHEIGHT	lib/Character.h	/^static const int LINE_DOUBLEHEIGHT    = (1 << 2);$/;"	v	namespace:Konsole	typeref:typename:const int
LINE_DOUBLEWIDTH	lib/Character.h	/^static const int LINE_DOUBLEWIDTH      = (1 << 1);$/;"	v	namespace:Konsole	typeref:typename:const int
LINE_SIZE	lib/History.cpp	/^#define LINE_SIZE /;"	d	file:
LINE_WRAPPED	lib/Character.h	/^static const int LINE_WRAPPED          = (1 << 0);$/;"	v	namespace:Konsole	typeref:typename:const int
LTR_OVERRIDE_CHAR	lib/TerminalDisplay.cpp	/^const QChar LTR_OVERRIDE_CHAR( 0x202D );$/;"	v	typeref:typename:const QChar
LeftB	lib/TerminalDisplay.cpp	/^    LeftB = (1<<15),$/;"	e	enum:LineEncode	file:
LeftC	lib/TerminalDisplay.cpp	/^    LeftC = (1<<10),$/;"	e	enum:LineEncode	file:
LeftT	lib/TerminalDisplay.cpp	/^    LeftT = (1<<5),$/;"	e	enum:LineEncode	file:
License	qtermwidget.spec	/^License:	GPL$/;"	t
LineChars	lib/LineFont.h	/^static const quint32 LineChars[] = {$/;"	v	typeref:typename:const quint32[]
LineEncode	lib/TerminalDisplay.cpp	/^enum LineEncode$/;"	g	file:
LineProperty	lib/Character.h	/^typedef unsigned char LineProperty;$/;"	t	namespace:Konsole	typeref:typename:unsigned char
LineProperty	lib/Filter.h	/^typedef unsigned char LineProperty;$/;"	t	namespace:Konsole	typeref:typename:unsigned char
Link	lib/Filter.h	/^            Link,$/;"	e	enum:Konsole::Filter::HotSpot::Type
LocalTabTitle	lib/Session.h	/^        LocalTabTitle,$/;"	e	enum:Konsole::Session::TabTitleContext
LocaleCodec	lib/Emulation.h	/^      LocaleCodec = 0,$/;"	e	enum:Konsole::Emulation::EmulationCodec
MAP_THRESHOLD	lib/History.h	/^  static const int MAP_THRESHOLD = -1000;$/;"	m	class:Konsole::HistoryFile	typeref:typename:const int
MAXARGS	lib/Vt102Emulation.h	/^#define MAXARGS /;"	d
MAX_ARGUMENT	lib/Vt102Emulation.cpp	/^#define MAX_ARGUMENT /;"	d	file:
MAX_HUE	lib/ColorScheme.h	/^    static const quint16 MAX_HUE = 340;$/;"	m	class:Konsole::ColorScheme	typeref:typename:const quint16
MAX_TOKEN_LENGTH	lib/Vt102Emulation.h	/^  #define MAX_TOKEN_LENGTH /;"	d
MODES_SCREEN	lib/Screen.h	/^#define MODES_SCREEN /;"	d
MODE_132Columns	lib/Vt102Emulation.h	/^#define MODE_132Columns /;"	d
MODE_Allow132Columns	lib/Vt102Emulation.h	/^#define MODE_Allow132Columns /;"	d
MODE_Ansi	lib/Vt102Emulation.h	/^#define MODE_Ansi /;"	d
MODE_AppCuKeys	lib/Vt102Emulation.h	/^#define MODE_AppCuKeys /;"	d
MODE_AppKeyPad	lib/Vt102Emulation.h	/^#define MODE_AppKeyPad /;"	d
MODE_AppScreen	lib/Vt102Emulation.h	/^#define MODE_AppScreen /;"	d
MODE_BracketedPaste	lib/Vt102Emulation.h	/^#define MODE_BracketedPaste /;"	d
MODE_Cursor	lib/Screen.h	/^#define MODE_Cursor /;"	d
MODE_Insert	lib/Screen.h	/^#define MODE_Insert /;"	d
MODE_Mouse1000	lib/Vt102Emulation.h	/^#define MODE_Mouse1000 /;"	d
MODE_Mouse1001	lib/Vt102Emulation.h	/^#define MODE_Mouse1001 /;"	d
MODE_Mouse1002	lib/Vt102Emulation.h	/^#define MODE_Mouse1002 /;"	d
MODE_Mouse1003	lib/Vt102Emulation.h	/^#define MODE_Mouse1003 /;"	d
MODE_Mouse1005	lib/Vt102Emulation.h	/^#define MODE_Mouse1005 /;"	d
MODE_Mouse1006	lib/Vt102Emulation.h	/^#define MODE_Mouse1006 /;"	d
MODE_Mouse1015	lib/Vt102Emulation.h	/^#define MODE_Mouse1015 /;"	d
MODE_NewLine	lib/Screen.h	/^#define MODE_NewLine /;"	d
MODE_Origin	lib/Screen.h	/^#define MODE_Origin /;"	d
MODE_Screen	lib/Screen.h	/^#define MODE_Screen /;"	d
MODE_Wrap	lib/Screen.h	/^#define MODE_Wrap /;"	d
MODE_total	lib/Vt102Emulation.h	/^#define MODE_total /;"	d
Marker	lib/Filter.h	/^            Marker$/;"	e	enum:Konsole::Filter::HotSpot::Type
MasterMode	lib/Session.h	/^    enum MasterMode {$/;"	g	class:Konsole::SessionGroup
MergedChannels	lib/kprocess.h	/^        MergedChannels = QProcess::MergedChannels,$/;"	e	enum:KProcess::OutputChannelMode
MotionAfterPasting	lib/TerminalDisplay.h	/^    enum MotionAfterPasting$/;"	g	namespace:Konsole
MoveEndScreenWindow	lib/TerminalDisplay.h	/^        MoveEndScreenWindow = 2$/;"	e	enum:Konsole::MotionAfterPasting
MoveStartScreenWindow	lib/TerminalDisplay.h	/^        MoveStartScreenWindow = 1,$/;"	e	enum:Konsole::MotionAfterPasting
NOTIFYACTIVITY	lib/Emulation.h	/^    NOTIFYACTIVITY=2,$/;"	e	enum:Konsole::__anonfbe3384f0103
NOTIFYBELL	lib/Emulation.h	/^    NOTIFYBELL=1,$/;"	e	enum:Konsole::__anonfbe3384f0103
NOTIFYNORMAL	lib/Emulation.h	/^    NOTIFYNORMAL=0,$/;"	e	enum:Konsole::__anonfbe3384f0103
NOTIFYSILENCE	lib/Emulation.h	/^    NOTIFYSILENCE=3$/;"	e	enum:Konsole::__anonfbe3384f0103
NO_INTR	lib/kptydevice.cpp	/^#define NO_INTR(/;"	d	file:
Name	qtermwidget.spec	/^Name:		qtermwidget$/;"	t
NameRole	lib/Session.h	/^        NameRole,$/;"	e	enum:Konsole::Session::TitleRole
NewLineState	lib/KeyboardTranslator.h	/^        NewLineState = 1,$/;"	e	enum:Konsole::KeyboardTranslator::State
NoBell	lib/TerminalDisplay.h	/^        NoBell=3$/;"	e	enum:Konsole::TerminalDisplay::BellMode
NoChannels	lib/kptyprocess.h	/^        NoChannels = 0, \/**< The PTY is not connected to any channel. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
NoCommand	lib/KeyboardTranslator.h	/^        NoCommand = 0,$/;"	e	enum:Konsole::KeyboardTranslator::Command
NoMoveScreenWindow	lib/TerminalDisplay.h	/^        NoMoveScreenWindow = 0,$/;"	e	enum:Konsole::MotionAfterPasting
NoScrollBar	lib/qtermwidget.h	/^        NoScrollBar = 0,$/;"	e	enum:QTermWidget::ScrollBarPosition
NoState	lib/KeyboardTranslator.h	/^        NoState = 0,$/;"	e	enum:Konsole::KeyboardTranslator::State
Normal	lib/CharacterColor.h	/^    Normal,$/;"	e	enum:Konsole::ColorEntry::FontWeight
NotSpecified	lib/Filter.h	/^            NotSpecified,$/;"	e	enum:Konsole::Filter::HotSpot::Type
NotifyBell	lib/TerminalDisplay.h	/^        NotifyBell=1,$/;"	e	enum:Konsole::TerminalDisplay::BellMode
OnlyStderrChannel	lib/kprocess.h	/^        OnlyStderrChannel  \/**< Only standard error is handled; standard output is forwarded *\/$/;"	e	enum:KProcess::OutputChannelMode
OnlyStdoutChannel	lib/kprocess.h	/^        OnlyStdoutChannel,$/;"	e	enum:KProcess::OutputChannelMode
OutputChannelMode	lib/kprocess.h	/^    enum OutputChannelMode {$/;"	g	class:KProcess
OutputText	lib/KeyboardTranslator.h	/^            OutputText$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
PTY_BYTES_AVAILABLE	lib/kptydevice.cpp	/^# define PTY_BYTES_AVAILABLE /;"	d	file:
PTY_H	lib/Pty.h	/^#define PTY_H$/;"	d
PlainTextDecoder	lib/TerminalCharacterDecoder.cpp	/^PlainTextDecoder::PlainTextDecoder()$/;"	f	class:PlainTextDecoder
PlainTextDecoder	lib/TerminalCharacterDecoder.h	/^class PlainTextDecoder : public TerminalCharacterDecoder$/;"	c	namespace:Konsole
Prefix	qtermwidget.spec	/^Prefix:		%{_prefix}$/;"	t
Pty	lib/Pty.cpp	/^Pty::Pty(QObject* parent)$/;"	f	class:Pty
Pty	lib/Pty.cpp	/^Pty::Pty(int masterFd, QObject* parent)$/;"	f	class:Pty
Pty	lib/Pty.h	/^class Pty: public KPtyProcess$/;"	c	namespace:Konsole
PtyChannelFlag	lib/kptyprocess.h	/^    enum PtyChannelFlag {$/;"	g	class:KPtyProcess
QTermWidget	lib/qtermwidget.cpp	/^QTermWidget::QTermWidget(QWidget *parent)$/;"	f	class:QTermWidget
QTermWidget	lib/qtermwidget.cpp	/^QTermWidget::QTermWidget(int startnow, QWidget *parent)$/;"	f	class:QTermWidget
QTermWidget	lib/qtermwidget.h	/^class QTermWidget : public QWidget {$/;"	c
Q_DECLARE_PRIVATE_MI	lib/kptydevice.h	/^#define Q_DECLARE_PRIVATE_MI(/;"	d
Q_GLOBAL_STATIC	lib/ColorScheme.cpp	/^Q_GLOBAL_STATIC(ColorSchemeManager, theColorSchemeManager)$/;"	f
Q_GLOBAL_STATIC	lib/KeyboardTranslator.cpp	/^Q_GLOBAL_STATIC( KeyboardTranslatorManager , theKeyboardTranslatorManager )$/;"	f
REPCHAR	lib/TerminalDisplay.cpp	/^#define REPCHAR /;"	d	file:
RE_BLINK	lib/Character.h	/^#define RE_BLINK /;"	d
RE_BOLD	lib/Character.h	/^#define RE_BOLD /;"	d
RE_CONCEAL	lib/Character.h	/^#define RE_CONCEAL /;"	d
RE_CURSOR	lib/Character.h	/^#define RE_CURSOR /;"	d
RE_EXTENDED_CHAR	lib/Character.h	/^#define RE_EXTENDED_CHAR /;"	d
RE_FAINT	lib/Character.h	/^#define RE_FAINT /;"	d
RE_INTENSIVE	lib/Character.h	/^#define RE_INTENSIVE /;"	d
RE_ITALIC	lib/Character.h	/^#define RE_ITALIC /;"	d
RE_OVERLINE	lib/Character.h	/^#define RE_OVERLINE /;"	d
RE_REVERSE	lib/Character.h	/^#define RE_REVERSE /;"	d
RE_STRIKEOUT	lib/Character.h	/^#define RE_STRIKEOUT /;"	d
RE_UNDERLINE	lib/Character.h	/^#define RE_UNDERLINE /;"	d
RandomizationRange	lib/ColorScheme.h	/^        RandomizationRange() : hue(0) , saturation(0) , value(0) {}$/;"	f	class:Konsole::ColorScheme::RandomizationRange
RandomizationRange	lib/ColorScheme.h	/^    class RandomizationRange$/;"	c	class:Konsole::ColorScheme
RegExpFilter	lib/Filter.cpp	/^RegExpFilter::RegExpFilter()$/;"	f	class:RegExpFilter
RegExpFilter	lib/Filter.h	/^class RegExpFilter : public Filter$/;"	c	namespace:Konsole
RelativeScrollMode	lib/ScreenWindow.h	/^    enum RelativeScrollMode$/;"	g	class:Konsole::ScreenWindow
Release	qtermwidget.spec	/^Release:	1$/;"	t
RemoteTabTitle	lib/Session.h	/^        RemoteTabTitle$/;"	e	enum:Konsole::Session::TabTitleContext
Requires	qtermwidget.spec	/^Requires:	%{libname}$/;"	t
RightB	lib/TerminalDisplay.cpp	/^    RightB = (1<<19),$/;"	e	enum:LineEncode	file:
RightC	lib/TerminalDisplay.cpp	/^    RightC = (1<<14),$/;"	e	enum:LineEncode	file:
RightT	lib/TerminalDisplay.cpp	/^    RightT = (1<<9),$/;"	e	enum:LineEncode	file:
SCREENWINDOW_H	lib/ScreenWindow.h	/^#define SCREENWINDOW_H$/;"	d
SCREEN_H	lib/Screen.h	/^#define SCREEN_H$/;"	d
SCS	lib/Vt102Emulation.cpp	/^#define SCS /;"	d	file:
SESSION_H	lib/Session.h	/^#define SESSION_H$/;"	d
SHELLCOMMAND_H	lib/ShellCommand.h	/^#define SHELLCOMMAND_H$/;"	d
STD_ERROR_HANDLE	lib/kprocess.cpp	/^# define STD_ERROR_HANDLE /;"	d	file:
STD_OUTPUT_HANDLE	lib/kprocess.cpp	/^# define STD_OUTPUT_HANDLE /;"	d	file:
STEP_ZOOM	lib/qtermwidget.cpp	/^#define STEP_ZOOM /;"	d	file:
SavedState	lib/Screen.h	/^        SavedState()$/;"	f	class:Konsole::Screen::SavedState
SavedState	lib/Screen.h	/^    class SavedState$/;"	c	class:Konsole::Screen
Screen	lib/Screen.cpp	/^    Screen::Screen(int l, int c)$/;"	f	class:Screen
Screen	lib/Screen.h	/^class Screen$/;"	c	namespace:Konsole
ScreenWindow	lib/ScreenWindow.cpp	/^ScreenWindow::ScreenWindow(QObject* parent)$/;"	f	class:ScreenWindow
ScreenWindow	lib/ScreenWindow.h	/^class ScreenWindow : public QObject$/;"	c	namespace:Konsole
ScrollBarLeft	lib/qtermwidget.h	/^        ScrollBarLeft = 1,$/;"	e	enum:QTermWidget::ScrollBarPosition
ScrollBarPosition	lib/qtermwidget.h	/^    enum ScrollBarPosition {$/;"	g	class:QTermWidget
ScrollBarRight	lib/qtermwidget.h	/^        ScrollBarRight = 2$/;"	e	enum:QTermWidget::ScrollBarPosition
ScrollDownToBottomCommand	lib/KeyboardTranslator.h	/^        ScrollDownToBottomCommand = 128,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollLineDownCommand	lib/KeyboardTranslator.h	/^        ScrollLineDownCommand = 16,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollLineUpCommand	lib/KeyboardTranslator.h	/^        ScrollLineUpCommand = 8,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollLines	lib/ScreenWindow.h	/^        ScrollLines,$/;"	e	enum:Konsole::ScreenWindow::RelativeScrollMode
ScrollLockCommand	lib/KeyboardTranslator.h	/^        ScrollLockCommand = 32,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollPageDownCommand	lib/KeyboardTranslator.h	/^        ScrollPageDownCommand = 4,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollPageUpCommand	lib/KeyboardTranslator.h	/^        ScrollPageUpCommand = 2,$/;"	e	enum:Konsole::KeyboardTranslator::Command
ScrollPages	lib/ScreenWindow.h	/^        ScrollPages$/;"	e	enum:Konsole::ScreenWindow::RelativeScrollMode
ScrollUpToTopCommand	lib/KeyboardTranslator.h	/^        ScrollUpToTopCommand = 64,$/;"	e	enum:Konsole::KeyboardTranslator::Command
SearchBar	lib/SearchBar.cpp	/^SearchBar::SearchBar(QWidget *parent) : QWidget(parent)$/;"	f	class:SearchBar
SearchBar	lib/SearchBar.h	/^class SearchBar : public QWidget {$/;"	c
SelectForwardsFromCursor	lib/TerminalDisplay.h	/^        SelectForwardsFromCursor$/;"	e	enum:Konsole::TerminalDisplay::TripleClickMode
SelectWholeLine	lib/TerminalDisplay.h	/^        SelectWholeLine,$/;"	e	enum:Konsole::TerminalDisplay::TripleClickMode
SendCommand	lib/KeyboardTranslator.h	/^        SendCommand = 1,$/;"	e	enum:Konsole::KeyboardTranslator::Command
SeparateChannels	lib/kprocess.h	/^        SeparateChannels = QProcess::SeparateChannels,$/;"	e	enum:KProcess::OutputChannelMode
Session	lib/Session.cpp	/^Session::Session(QObject* parent) :$/;"	f	class:Session
Session	lib/Session.h	/^class Session : public QObject {$/;"	c	namespace:Konsole
SessionGroup	lib/Session.cpp	/^SessionGroup::SessionGroup()$/;"	f	class:SessionGroup
SessionGroup	lib/Session.h	/^class SessionGroup : public QObject {$/;"	c	namespace:Konsole
ShellCommand	lib/ShellCommand.cpp	/^ShellCommand::ShellCommand(const QString & command , const QStringList & arguments)$/;"	f	class:ShellCommand
ShellCommand	lib/ShellCommand.cpp	/^ShellCommand::ShellCommand(const QString & fullCommand)$/;"	f	class:ShellCommand
ShellCommand	lib/ShellCommand.h	/^class ShellCommand {$/;"	c	namespace:Konsole
Source	qtermwidget.spec	/^Source:		%{name}-%{version}.tar.bz2$/;"	t
StandardUrl	lib/Filter.h	/^            StandardUrl,$/;"	e	enum:Konsole::UrlFilter::HotSpot::UrlType
State	lib/KeyboardTranslator.h	/^    enum State$/;"	g	class:Konsole::KeyboardTranslator
StderrChannel	lib/kptyprocess.h	/^        StderrChannel = 4, \/**< Connect PTY to stderr. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
StdinChannel	lib/kptyprocess.h	/^        StdinChannel = 1, \/**< Connect PTY to stdin. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
StdoutChannel	lib/kptyprocess.h	/^        StdoutChannel = 2, \/**< Connect PTY to stdout. *\/$/;"	e	enum:KPtyProcess::PtyChannelFlag
Summary	qtermwidget.spec	/^Summary:	Qt4 terminal widget - base package$/;"	t
Summary	qtermwidget.spec	/^Summary:	Qt4 terminal widget - development package$/;"	t
Summary	qtermwidget.spec	/^Summary:	Qt4 terminal widget$/;"	t
SystemBeepBell	lib/TerminalDisplay.h	/^        SystemBeepBell=0,$/;"	e	enum:Konsole::TerminalDisplay::BellMode
TABLE_COLORS	lib/CharacterColor.h	/^#define TABLE_COLORS /;"	d
TASK_H	lib/HistorySearch.h	/^#define	TASK_H$/;"	d
TEHISTORY_H	lib/History.h	/^#define TEHISTORY_H$/;"	d
TERMINALDISPLAY_H	lib/TerminalDisplay.h	/^#define TERMINALDISPLAY_H$/;"	d
TERMINAL_CHARACTER_DECODER_H	lib/TerminalCharacterDecoder.h	/^#define TERMINAL_CHARACTER_DECODER_H$/;"	d
TEXT_BLINK_DELAY	lib/TerminalDisplay.h	/^    static const int TEXT_BLINK_DELAY = 500;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:const int
TOOLS_H	lib/tools.h	/^#define TOOLS_H$/;"	d
TTY_GROUP	lib/kpty.cpp	/^#define TTY_GROUP /;"	d	file:
TY_CHR	lib/Vt102Emulation.cpp	/^#define TY_CHR(/;"	d	file:
TY_CONSTRUCT	lib/Vt102Emulation.cpp	/^#define TY_CONSTRUCT(/;"	d	file:
TY_CSI_PE	lib/Vt102Emulation.cpp	/^#define TY_CSI_PE(/;"	d	file:
TY_CSI_PG	lib/Vt102Emulation.cpp	/^#define TY_CSI_PG(/;"	d	file:
TY_CSI_PN	lib/Vt102Emulation.cpp	/^#define TY_CSI_PN(/;"	d	file:
TY_CSI_PR	lib/Vt102Emulation.cpp	/^#define TY_CSI_PR(/;"	d	file:
TY_CSI_PS	lib/Vt102Emulation.cpp	/^#define TY_CSI_PS(/;"	d	file:
TY_CSI_PS_SP	lib/Vt102Emulation.cpp	/^#define TY_CSI_PS_SP(/;"	d	file:
TY_CTL	lib/Vt102Emulation.cpp	/^#define TY_CTL(/;"	d	file:
TY_ESC	lib/Vt102Emulation.cpp	/^#define TY_ESC(/;"	d	file:
TY_ESC_CS	lib/Vt102Emulation.cpp	/^#define TY_ESC_CS(/;"	d	file:
TY_ESC_DE	lib/Vt102Emulation.cpp	/^#define TY_ESC_DE(/;"	d	file:
TY_VT52	lib/Vt102Emulation.cpp	/^#define TY_VT52(/;"	d	file:
TabTitleContext	lib/Session.h	/^    enum TabTitleContext {$/;"	g	class:Konsole::Session
TermWidgetImpl	lib/qtermwidget.cpp	/^TermWidgetImpl::TermWidgetImpl(QWidget* parent)$/;"	f	class:TermWidgetImpl
TermWidgetImpl	lib/qtermwidget.cpp	/^struct TermWidgetImpl {$/;"	s	file:
TerminalCharacterDecoder	lib/TerminalCharacterDecoder.h	/^class TerminalCharacterDecoder$/;"	c	namespace:Konsole
TerminalDisplay	lib/TerminalDisplay.cpp	/^TerminalDisplay::TerminalDisplay(QWidget *parent)$/;"	f	class:TerminalDisplay
TerminalDisplay	lib/TerminalDisplay.h	/^class KONSOLEPRIVATE_EXPORT TerminalDisplay : public QWidget$/;"	c	namespace:Konsole
TerminalImageFilterChain	lib/Filter.cpp	/^TerminalImageFilterChain::TerminalImageFilterChain()$/;"	f	class:TerminalImageFilterChain
TerminalImageFilterChain	lib/Filter.h	/^class TerminalImageFilterChain : public FilterChain$/;"	c	namespace:Konsole
TerminalState	lib/Vt102Emulation.h	/^    TerminalState()$/;"	f	class:Konsole::Vt102Emulation::TerminalState
TerminalState	lib/Vt102Emulation.h	/^  class TerminalState$/;"	c	class:Konsole::Vt102Emulation
TextLine	lib/History.h	/^typedef QVector<Character> TextLine;$/;"	t	namespace:Konsole	typeref:typename:QVector<Character>
TitleKeyword	lib/KeyboardTranslator.h	/^            TitleKeyword,$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
TitleRole	lib/Session.h	/^    enum TitleRole {$/;"	g	class:Konsole::Session
TitleText	lib/KeyboardTranslator.h	/^            TitleText,$/;"	e	enum:Konsole::KeyboardTranslatorReader::Token::Type
Token	lib/KeyboardTranslator.h	/^    struct Token$/;"	s	class:Konsole::KeyboardTranslatorReader
TopC	lib/TerminalDisplay.cpp	/^    TopC  = (1<<2),$/;"	e	enum:LineEncode	file:
TopL	lib/TerminalDisplay.cpp	/^    TopL  = (1<<1),$/;"	e	enum:LineEncode	file:
TopR	lib/TerminalDisplay.cpp	/^    TopR  = (1<<3),$/;"	e	enum:LineEncode	file:
TripleClickMode	lib/TerminalDisplay.h	/^    enum TripleClickMode$/;"	g	class:Konsole::TerminalDisplay
Type	lib/Filter.h	/^       enum Type$/;"	g	class:Konsole::Filter::HotSpot
Type	lib/KeyboardTranslator.h	/^        enum Type$/;"	g	struct:Konsole::KeyboardTranslatorReader::Token
URL	qtermwidget.spec	/^URL:		https:\/\/github.com\/qterminal$/;"	t
UnderlineCursor	lib/qtermwidget.h	/^        UnderlineCursor = 1,$/;"	e	enum:QTermWidget::KeyboardCursorShape
Unknown	lib/Filter.h	/^            Unknown$/;"	e	enum:Konsole::UrlFilter::HotSpot::UrlType
UrlFilter	lib/Filter.cpp	/^UrlFilter::UrlFilter()$/;"	f	class:UrlFilter
UrlFilter	lib/Filter.h	/^class UrlFilter : public RegExpFilter$/;"	c	namespace:Konsole
UrlType	lib/Filter.h	/^        enum UrlType$/;"	g	class:Konsole::UrlFilter::HotSpot
UseCurrentFormat	lib/CharacterColor.h	/^    UseCurrentFormat$/;"	e	enum:Konsole::ColorEntry::FontWeight
Utf8Codec	lib/Emulation.h	/^      Utf8Codec   = 1$/;"	e	enum:Konsole::Emulation::EmulationCodec
VT102EMULATION_H	lib/Vt102Emulation.h	/^#define VT102EMULATION_H$/;"	d
Vendor	qtermwidget.spec	/^Vendor:		petr@yarpen.cz$/;"	t
Version	qtermwidget.spec	/^Version:	0.2.0$/;"	t
VisualBell	lib/TerminalDisplay.h	/^        VisualBell=2,$/;"	e	enum:Konsole::TerminalDisplay::BellMode
Vt102Emulation	lib/Vt102Emulation.cpp	/^Vt102Emulation::Vt102Emulation()$/;"	f	class:Vt102Emulation
Vt102Emulation	lib/Vt102Emulation.h	/^class Vt102Emulation : public Emulation$/;"	c	namespace:Konsole
Xpe	lib/Vt102Emulation.cpp	/^#define Xpe /;"	d	file:
Xte	lib/Vt102Emulation.cpp	/^#define Xte /;"	d	file:
_ALL_SOURCE	lib/kpty.cpp	/^#define _ALL_SOURCE$/;"	d	file:
_COLOR_TABLE_H	lib/ColorTables.h	/^#define _COLOR_TABLE_H$/;"	d
_KONSOLE_WCWIDTH_H_	lib/konsole_wcwidth.h	/^#define _KONSOLE_WCWIDTH_H_$/;"	d
_NEW_TTY_CTRL	lib/kpty.cpp	/^# define _NEW_TTY_CTRL$/;"	d	file:
_OSF_SOURCE	lib/kpty.cpp	/^#define _OSF_SOURCE$/;"	d	file:
_PATH_UTMPX	lib/kpty.cpp	/^#  define _PATH_UTMPX /;"	d	file:
_PATH_WTMPX	lib/kpty.cpp	/^#   define _PATH_WTMPX /;"	d	file:
_Q_TERM_WIDGET	lib/qtermwidget.h	/^#define _Q_TERM_WIDGET$/;"	d
_SEARCHBAR_H	lib/SearchBar.h	/^#define	_SEARCHBAR_H$/;"	d
_TERMIOS_INCLUDED	lib/kpty.cpp	/^# define _TERMIOS_INCLUDED$/;"	d	file:
__USE_XOPEN	lib/kpty.cpp	/^#    define __USE_XOPEN$/;"	d	file:
__anon25e1116e010a	lib/Character.h	/^  {$/;"	u	class:Konsole::Character
__anon65ea994d0110	lib/tools.cpp	/^namespace {$/;"	n	file:
__anonfbe3384f0103	lib/Emulation.h	/^{$/;"	g	namespace:Konsole
__init__	pyqt/config.py	/^	def __init__(self):$/;"	m	class:Configuration
__svr4__	lib/kpty.cpp	/^#define __svr4__$/;"	d	file:
_actSel	lib/TerminalDisplay.h	/^    int     _actSel; \/\/ selection state$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_addToUtmp	lib/Session.h	/^    bool           _addToUtmp;$/;"	m	class:Konsole::Session	typeref:typename:bool
_allowBell	lib/TerminalDisplay.h	/^    bool _allowBell;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_allowBlinkingText	lib/TerminalDisplay.h	/^    bool _allowBlinkingText;  \/\/ allow text to blink$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_antialiasText	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::_antialiasText = true;$/;"	m	class:TerminalDisplay	typeref:typename:bool
_antialiasText	lib/TerminalDisplay.h	/^    static bool _antialiasText;   \/\/ do we antialias or not$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_arguments	lib/Session.h	/^    QStringList    _arguments;$/;"	m	class:Konsole::Session	typeref:typename:QStringList
_arguments	lib/ShellCommand.h	/^    QStringList _arguments;$/;"	m	class:Konsole::ShellCommand	typeref:typename:QStringList
_autoClose	lib/Session.h	/^    bool           _autoClose;$/;"	m	class:Konsole::Session	typeref:typename:bool
_backgroundImage	lib/TerminalDisplay.h	/^    QPixmap _backgroundImage;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QPixmap
_bellMode	lib/TerminalDisplay.h	/^    int         _bellMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_bidiEnabled	lib/TerminalDisplay.h	/^    bool _bidiEnabled;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_blendColor	lib/TerminalDisplay.h	/^    QRgb _blendColor;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QRgb
_blinkCursorTimer	lib/TerminalDisplay.h	/^    QTimer* _blinkCursorTimer;  \/\/ active when hasBlinkingCursor$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QTimer *
_blinkTimer	lib/TerminalDisplay.h	/^    QTimer* _blinkTimer;  \/\/ active when hasBlinker$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QTimer *
_blinking	lib/TerminalDisplay.h	/^    bool _blinking;   \/\/ hide text in paintEvent$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_boldIntense	lib/TerminalDisplay.h	/^    bool _boldIntense;   \/\/ Whether intense colors should be rendered with bold font$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_bottomMargin	lib/Screen.h	/^    int _bottomMargin;$/;"	m	class:Konsole::Screen	typeref:typename:int
_bracketedPasteMode	lib/Emulation.h	/^  bool _bracketedPasteMode;$/;"	m	class:Konsole::Emulation	typeref:typename:bool
_bracketedPasteMode	lib/TerminalDisplay.h	/^    bool _bracketedPasteMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_buffer	lib/Filter.h	/^    QString* _buffer;$/;"	m	class:Konsole::TerminalImageFilterChain	typeref:typename:QString *
_buffer	lib/Filter.h	/^    const QString* _buffer;$/;"	m	class:Konsole::Filter	typeref:typename:const QString *
_bufferNeedsUpdate	lib/ScreenWindow.h	/^    bool _bufferNeedsUpdate;$/;"	m	class:Konsole::ScreenWindow	typeref:typename:bool
_bulkTimer1	lib/Emulation.h	/^  QTimer _bulkTimer1;$/;"	m	class:Konsole::Emulation	typeref:typename:QTimer
_bulkTimer2	lib/Emulation.h	/^  QTimer _bulkTimer2;$/;"	m	class:Konsole::Emulation	typeref:typename:QTimer
_capturedTexts	lib/Filter.h	/^        QStringList _capturedTexts;$/;"	m	class:Konsole::RegExpFilter::HotSpot	typeref:typename:QStringList
_charset	lib/Vt102Emulation.h	/^  CharCodes _charset[2];$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:CharCodes[2]
_clipboard	lib/TerminalDisplay.h	/^    QClipboard*  _clipboard;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QClipboard *
_codec	lib/Emulation.h	/^  const QTextCodec* _codec;$/;"	m	class:Konsole::Emulation	typeref:typename:const QTextCodec *
_colorSchemes	lib/ColorScheme.h	/^    QHash<QString,const ColorScheme*> _colorSchemes;$/;"	m	class:Konsole::ColorSchemeManager	typeref:typename:QHash<QString,const ColorScheme * >
_colorSpace	lib/CharacterColor.h	/^  quint8 _colorSpace;$/;"	m	class:Konsole::CharacterColor	typeref:typename:quint8
_colorTable	lib/TerminalCharacterDecoder.h	/^    const ColorEntry* _colorTable;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:const ColorEntry *
_colorTable	lib/TerminalDisplay.h	/^    ColorEntry _colorTable[TABLE_COLORS];$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:ColorEntry[]
_colorsInverted	lib/TerminalDisplay.h	/^    bool _colorsInverted; \/\/ true during visual bell$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_columnSelectionMode	lib/TerminalDisplay.h	/^    bool    _columnSelectionMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_columns	lib/TerminalDisplay.h	/^    int _columns;    \/\/ the number of columns that can be displayed in the widget$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_command	lib/KeyboardTranslator.h	/^        Command _command;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:Command
_contentHeight	lib/TerminalDisplay.h	/^    int _contentHeight;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_contentWidth	lib/TerminalDisplay.h	/^    int _contentWidth;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_ctrlDrag	lib/TerminalDisplay.h	/^    bool _ctrlDrag;           \/\/ require Ctrl key for drag$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_currentLine	lib/ScreenWindow.h	/^    int  _currentLine; \/\/ see scrollTo() , currentLine()$/;"	m	class:Konsole::ScreenWindow	typeref:typename:int
_currentModes	lib/Vt102Emulation.h	/^  TerminalState _currentModes;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:TerminalState
_currentScreen	lib/Emulation.h	/^  Screen* _currentScreen;  \/\/ pointer to the screen which is currently active,$/;"	m	class:Konsole::Emulation	typeref:typename:Screen *
_cursorBlinking	lib/TerminalDisplay.h	/^    bool _cursorBlinking;     \/\/ hide cursor in paintEvent$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_cursorColor	lib/TerminalDisplay.h	/^    QColor _cursorColor;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QColor
_cursorShape	lib/TerminalDisplay.h	/^    QTermWidget::KeyboardCursorShape _cursorShape;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QTermWidget::KeyboardCursorShape
_decoder	lib/Emulation.h	/^  QTextDecoder* _decoder;$/;"	m	class:Konsole::Emulation	typeref:typename:QTextDecoder *
_defaultColorScheme	lib/ColorScheme.cpp	/^const ColorScheme ColorSchemeManager::_defaultColorScheme;$/;"	m	class:ColorSchemeManager	typeref:typename:const ColorScheme
_defaultColorScheme	lib/ColorScheme.h	/^    static const ColorScheme _defaultColorScheme;$/;"	m	class:Konsole::ColorSchemeManager	typeref:typename:const ColorScheme
_description	lib/ColorScheme.h	/^    QString _description;$/;"	m	class:Konsole::ColorScheme	typeref:typename:QString
_description	lib/KeyboardTranslator.h	/^    QString _description;$/;"	m	class:Konsole::KeyboardTranslator	typeref:typename:QString
_description	lib/KeyboardTranslator.h	/^    QString _description;$/;"	m	class:Konsole::KeyboardTranslatorReader	typeref:typename:QString
_destination	lib/KeyboardTranslator.h	/^    QIODevice* _destination;$/;"	m	class:Konsole::KeyboardTranslatorWriter	typeref:typename:QIODevice *
_device	lib/ColorScheme.h	/^    QIODevice* _device;$/;"	m	class:Konsole::KDE3ColorSchemeReader	typeref:typename:QIODevice *
_displayTitle	lib/Session.h	/^    QString        _displayTitle;$/;"	m	class:Konsole::Session	typeref:typename:QString
_dndFileCount	lib/TerminalDisplay.h	/^    int _dndFileCount;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_dragInfo	lib/TerminalDisplay.h	/^    struct _dragInfo {$/;"	s	class:Konsole::TerminalDisplay
_dropText	lib/TerminalDisplay.h	/^    QString _dropText;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QString
_droppedLines	lib/Screen.h	/^    int _droppedLines;$/;"	m	class:Konsole::Screen	typeref:typename:int
_emulation	lib/Session.h	/^    Emulation  *  _emulation;$/;"	m	class:Konsole::Session	typeref:typename:Emulation *
_endColumn	lib/Filter.h	/^       int    _endColumn;$/;"	m	class:Konsole::Filter::HotSpot	typeref:typename:int
_endLine	lib/Filter.h	/^       int    _endLine;$/;"	m	class:Konsole::Filter::HotSpot	typeref:typename:int
_entries	lib/KeyboardTranslator.h	/^    QMultiHash<int,Entry> _entries; \/\/ entries in this keyboard translation,$/;"	m	class:Konsole::KeyboardTranslator	typeref:typename:QMultiHash<int,Entry>
_environment	lib/Session.h	/^    QStringList    _environment;$/;"	m	class:Konsole::Session	typeref:typename:QStringList
_eraseChar	lib/Pty.h	/^    char _eraseChar;$/;"	m	class:Konsole::Pty	typeref:typename:char
_filter	lib/Filter.h	/^    Filter::HotSpot* _filter;$/;"	m	class:Konsole::FilterObject	typeref:typename:Filter::HotSpot *
_filterChain	lib/TerminalDisplay.h	/^    TerminalImageFilterChain* _filterChain;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:TerminalImageFilterChain *
_fixedFont	lib/TerminalDisplay.h	/^    bool _fixedFont; \/\/ has fixed pitch$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_flowControl	lib/Session.h	/^    bool           _flowControl;$/;"	m	class:Konsole::Session	typeref:typename:bool
_flowControlWarningEnabled	lib/TerminalDisplay.h	/^    bool _flowControlWarningEnabled;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_fontAscent	lib/TerminalDisplay.h	/^    int  _fontAscent;     \/\/ ascend$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_fontHeight	lib/TerminalDisplay.h	/^    int  _fontHeight;     \/\/ height$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_fontWidth	lib/TerminalDisplay.h	/^    int  _fontWidth;     \/\/ width$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_fullScripting	lib/Session.h	/^    bool           _fullScripting;$/;"	m	class:Konsole::Session	typeref:typename:bool
_gridLayout	lib/TerminalDisplay.h	/^    QGridLayout* _gridLayout;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QGridLayout *
_hasBlinker	lib/TerminalDisplay.h	/^    bool _hasBlinker; \/\/ has characters to blink$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_hasBlinkingCursor	lib/TerminalDisplay.h	/^    bool _hasBlinkingCursor;  \/\/ has blinking cursor enabled$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_hasDarkBackground	lib/Session.h	/^    bool _hasDarkBackground;$/;"	m	class:Konsole::Session	typeref:typename:bool
_hasNext	lib/KeyboardTranslator.h	/^    bool _hasNext;$/;"	m	class:Konsole::KeyboardTranslatorReader	typeref:typename:bool
_haveLoadedAll	lib/ColorScheme.h	/^    bool _haveLoadedAll;$/;"	m	class:Konsole::ColorSchemeManager	typeref:typename:bool
_haveLoadedAll	lib/KeyboardTranslator.h	/^    bool _haveLoadedAll;$/;"	m	class:Konsole::KeyboardTranslatorManager	typeref:typename:bool
_head	lib/History.h	/^  int _head;$/;"	m	class:Konsole::HistoryScrollBuffer	typeref:typename:int
_historyBuffer	lib/History.h	/^  HistoryLine* _historyBuffer;$/;"	m	class:Konsole::HistoryScrollBuffer	typeref:typename:HistoryLine *
_hotspotList	lib/Filter.h	/^    QList<HotSpot*> _hotspotList;$/;"	m	class:Konsole::Filter	typeref:typename:QList<HotSpot * >
_hotspots	lib/Filter.h	/^    QMultiHash<int,HotSpot*> _hotspots;$/;"	m	class:Konsole::Filter	typeref:typename:QMultiHash<int,HotSpot * >
_iPntSel	lib/TerminalDisplay.h	/^    QPoint  _iPntSel; \/\/ initial selection point$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QPoint
_iconName	lib/Session.h	/^    QString        _iconName;$/;"	m	class:Konsole::Session	typeref:typename:QString
_iconText	lib/Session.h	/^    QString        _iconText; \/\/ as set by: echo -en '\\033]1;IconText\\007$/;"	m	class:Konsole::Session	typeref:typename:QString
_image	lib/TerminalDisplay.h	/^    Character* _image; \/\/ [lines][columns]$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:Character *
_imageSize	lib/TerminalDisplay.h	/^    int _imageSize;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_includeTrailingWhitespace	lib/TerminalCharacterDecoder.h	/^    bool _includeTrailingWhitespace;$/;"	m	class:Konsole::PlainTextDecoder	typeref:typename:bool
_initialWorkingDir	lib/Session.h	/^    QString        _initialWorkingDir;$/;"	m	class:Konsole::Session	typeref:typename:QString
_innerSpanOpen	lib/TerminalCharacterDecoder.h	/^    bool _innerSpanOpen;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:bool
_inputMethodData	lib/TerminalDisplay.h	/^    InputMethodData _inputMethodData;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:InputMethodData
_isFixedSize	lib/TerminalDisplay.h	/^    bool _isFixedSize; \/\/Columns \/ lines are locked.$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_isTitleChanged	lib/Session.h	/^    bool           _isTitleChanged; \/\/\/< flag if the title\/icon was changed by user$/;"	m	class:Konsole::Session	typeref:typename:bool
_k_canRead	lib/kptydevice.cpp	/^bool KPtyDevicePrivate::_k_canRead()$/;"	f	class:KPtyDevicePrivate	typeref:typename:bool
_k_canWrite	lib/kptydevice.cpp	/^bool KPtyDevicePrivate::_k_canWrite()$/;"	f	class:KPtyDevicePrivate	typeref:typename:bool
_k_forwardStderr	lib/kprocess.cpp	/^void KProcessPrivate::_k_forwardStderr()$/;"	f	class:KProcessPrivate	typeref:typename:void
_k_forwardStdout	lib/kprocess.cpp	/^void KProcessPrivate::_k_forwardStdout()$/;"	f	class:KProcessPrivate	typeref:typename:void
_k_onStateChanged	lib/kptyprocess.h	/^    void _k_onStateChanged(QProcess::ProcessState newState)$/;"	f	class:KPtyProcessPrivate	typeref:typename:void
_keyCode	lib/KeyboardTranslator.h	/^        int _keyCode;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:int
_keyTranslator	lib/Emulation.h	/^  const KeyboardTranslator* _keyTranslator; \/\/ the keyboard layout$/;"	m	class:Konsole::Emulation	typeref:typename:const KeyboardTranslator *
_lastBackColor	lib/TerminalCharacterDecoder.h	/^    CharacterColor _lastBackColor;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:CharacterColor
_lastForeColor	lib/TerminalCharacterDecoder.h	/^    CharacterColor _lastForeColor;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:CharacterColor
_lastRendition	lib/TerminalCharacterDecoder.h	/^    quint8 _lastRendition;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:quint8
_lastScrolledRegion	lib/Screen.h	/^    QRect _lastScrolledRegion;$/;"	m	class:Konsole::Screen	typeref:typename:QRect
_leftMargin	lib/TerminalDisplay.h	/^    int _leftMargin;    \/\/ offset$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_linePositions	lib/Filter.h	/^    QList<int>* _linePositions;$/;"	m	class:Konsole::TerminalImageFilterChain	typeref:typename:QList<int> *
_linePositions	lib/Filter.h	/^    const QList<int>* _linePositions;$/;"	m	class:Konsole::Filter	typeref:typename:const QList<int> *
_linePositions	lib/TerminalCharacterDecoder.h	/^    QList<int> _linePositions;$/;"	m	class:Konsole::PlainTextDecoder	typeref:typename:QList<int>
_lineProperties	lib/TerminalDisplay.h	/^    QVector<LineProperty> _lineProperties;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QVector<LineProperty>
_lineSelectionMode	lib/TerminalDisplay.h	/^    bool    _lineSelectionMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_lineSpacing	lib/TerminalDisplay.h	/^    uint _lineSpacing;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:uint
_lines	lib/TerminalDisplay.h	/^    int _lines;      \/\/ the number of lines that can be displayed in the widget$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_localTabTitleFormat	lib/Session.h	/^    QString        _localTabTitleFormat;$/;"	m	class:Konsole::Session	typeref:typename:QString
_masterMode	lib/Session.h	/^    bool           _masterMode;$/;"	m	class:Konsole::Session	typeref:typename:bool
_masterMode	lib/Session.h	/^    int _masterMode;$/;"	m	class:Konsole::SessionGroup	typeref:typename:int
_maxLineCount	lib/History.h	/^  int _maxLineCount;$/;"	m	class:Konsole::HistoryScrollBuffer	typeref:typename:int
_maxLineCount	lib/History.h	/^  unsigned int _maxLineCount;$/;"	m	class:Konsole::CompactHistoryScroll	typeref:typename:unsigned int
_modifiedBackground	lib/Session.h	/^    QColor         _modifiedBackground; \/\/ as set by: echo -en '\\033]11;Color\\007$/;"	m	class:Konsole::Session	typeref:typename:QColor
_modifiedSchemes	lib/ColorScheme.h	/^    QSet<ColorScheme*> _modifiedSchemes;$/;"	m	class:Konsole::ColorSchemeManager	typeref:typename:QSet<ColorScheme * >
_modifierMask	lib/KeyboardTranslator.h	/^        Qt::KeyboardModifiers _modifierMask;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:Qt::KeyboardModifiers
_modifiers	lib/KeyboardTranslator.h	/^        Qt::KeyboardModifiers _modifiers;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:Qt::KeyboardModifiers
_monitorActivity	lib/Session.h	/^    bool           _monitorActivity;$/;"	m	class:Konsole::Session	typeref:typename:bool
_monitorSilence	lib/Session.h	/^    bool           _monitorSilence;$/;"	m	class:Konsole::Session	typeref:typename:bool
_monitorTimer	lib/Session.h	/^    QTimer    *    _monitorTimer;$/;"	m	class:Konsole::Session	typeref:typename:QTimer *
_mouseMarks	lib/TerminalDisplay.h	/^    bool _mouseMarks;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_mouseOverHotspotArea	lib/TerminalDisplay.h	/^    QRegion _mouseOverHotspotArea;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QRegion
_name	lib/ColorScheme.h	/^    QString _name;$/;"	m	class:Konsole::ColorScheme	typeref:typename:QString
_name	lib/KeyboardTranslator.h	/^    QString _name;$/;"	m	class:Konsole::KeyboardTranslator	typeref:typename:QString
_nameTitle	lib/Session.h	/^    QString        _nameTitle;$/;"	m	class:Konsole::Session	typeref:typename:QString
_nextEntry	lib/KeyboardTranslator.h	/^    KeyboardTranslator::Entry _nextEntry;$/;"	m	class:Konsole::KeyboardTranslatorReader	typeref:typename:KeyboardTranslator::Entry
_notifiedActivity	lib/Session.h	/^    bool           _notifiedActivity;$/;"	m	class:Konsole::Session	typeref:typename:bool
_opacity	lib/ColorScheme.h	/^    qreal _opacity;$/;"	m	class:Konsole::ColorScheme	typeref:typename:qreal
_output	lib/TerminalCharacterDecoder.h	/^    QTextStream* _output;$/;"	m	class:Konsole::HTMLDecoder	typeref:typename:QTextStream *
_output	lib/TerminalCharacterDecoder.h	/^    QTextStream* _output;$/;"	m	class:Konsole::PlainTextDecoder	typeref:typename:QTextStream *
_outputSuspendedLabel	lib/TerminalDisplay.h	/^    QLabel* _outputSuspendedLabel;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QLabel *
_pendingTitleUpdates	lib/Vt102Emulation.h	/^  QHash<int,QString> _pendingTitleUpdates;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:QHash<int,QString>
_pntSel	lib/TerminalDisplay.h	/^    QPoint  _pntSel; \/\/ current selection point$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QPoint
_possibleTripleClick	lib/TerminalDisplay.h	/^    bool _possibleTripleClick;  \/\/ is set in mouseDoubleClickEvent and deleted$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_preserveLineBreaks	lib/TerminalDisplay.h	/^    bool    _preserveLineBreaks;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_profileKey	lib/Session.h	/^    QString        _profileKey;$/;"	m	class:Konsole::Session	typeref:typename:QString
_program	lib/Session.h	/^    QString        _program;$/;"	m	class:Konsole::Session	typeref:typename:QString
_randomSeed	lib/TerminalDisplay.h	/^    uint _randomSeed;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:uint
_randomTable	lib/ColorScheme.h	/^    RandomizationRange* _randomTable;   \/\/ pointer to randomization table or 0$/;"	m	class:Konsole::ColorScheme	typeref:typename:RandomizationRange *
_recordLinePositions	lib/TerminalCharacterDecoder.h	/^    bool _recordLinePositions;$/;"	m	class:Konsole::PlainTextDecoder	typeref:typename:bool
_remoteTabTitleFormat	lib/Session.h	/^    QString        _remoteTabTitleFormat;$/;"	m	class:Konsole::Session	typeref:typename:QString
_reportFocusEvents	lib/Vt102Emulation.h	/^    bool _reportFocusEvents;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:bool
_resizeTimer	lib/TerminalDisplay.h	/^    QTimer* _resizeTimer;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QTimer *
_resizeWidget	lib/TerminalDisplay.h	/^    QLabel* _resizeWidget;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QLabel *
_resizing	lib/TerminalDisplay.h	/^    bool _resizing;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_savedModes	lib/Vt102Emulation.h	/^  TerminalState _savedModes;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:TerminalState
_screen	lib/Emulation.h	/^  Screen* _screen[2];      \/\/ 0 = primary screen ( used by most programs, including the shell$/;"	m	class:Konsole::Emulation	typeref:typename:Screen * [2]
_screen	lib/ScreenWindow.h	/^    Screen* _screen; \/\/ see setScreen() , screen()$/;"	m	class:Konsole::ScreenWindow	typeref:typename:Screen *
_screenWindow	lib/TerminalDisplay.h	/^    QPointer<ScreenWindow> _screenWindow;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QPointer<ScreenWindow>
_scrollBar	lib/TerminalDisplay.h	/^    QScrollBar* _scrollBar;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QScrollBar *
_scrollCount	lib/ScreenWindow.h	/^    int  _scrollCount; \/\/ count of lines which the window has been scrolled by since$/;"	m	class:Konsole::ScreenWindow	typeref:typename:int
_scrollbarLocation	lib/TerminalDisplay.h	/^    QTermWidget::ScrollBarPosition _scrollbarLocation;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QTermWidget::ScrollBarPosition
_scrolledLines	lib/Screen.h	/^    int _scrolledLines;$/;"	m	class:Konsole::Screen	typeref:typename:int
_searchText	lib/Filter.h	/^    QRegExp _searchText;$/;"	m	class:Konsole::RegExpFilter	typeref:typename:QRegExp
_sessionId	lib/Session.h	/^    int            _sessionId;$/;"	m	class:Konsole::Session	typeref:typename:int
_sessions	lib/Session.h	/^    QHash<Session *,bool> _sessions;$/;"	m	class:Konsole::SessionGroup	typeref:typename:QHash<Session *,bool>
_shellProcess	lib/Session.h	/^    Pty     *_shellProcess;$/;"	m	class:Konsole::Session	typeref:typename:Pty *
_silenceSeconds	lib/Session.h	/^    int            _silenceSeconds;$/;"	m	class:Konsole::Session	typeref:typename:int
_size	lib/TerminalDisplay.h	/^    QSize _size;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QSize
_source	lib/KeyboardTranslator.h	/^    QIODevice* _source;$/;"	m	class:Konsole::KeyboardTranslatorReader	typeref:typename:QIODevice *
_startColumn	lib/Filter.h	/^       int    _startColumn;$/;"	m	class:Konsole::Filter::HotSpot	typeref:typename:int
_startLine	lib/Filter.h	/^       int    _startLine;$/;"	m	class:Konsole::Filter::HotSpot	typeref:typename:int
_state	lib/KeyboardTranslator.h	/^        States _state;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:States
_stateMask	lib/KeyboardTranslator.h	/^        States _stateMask;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:States
_table	lib/ColorScheme.h	/^    ColorEntry* _table; \/\/ pointer to custom color table or 0 if the default$/;"	m	class:Konsole::ColorScheme	typeref:typename:ColorEntry *
_tcgetattr	lib/kpty.cpp	/^#  define _tcgetattr(/;"	d	file:
_tcgetattr	lib/kpty.cpp	/^# define _tcgetattr(/;"	d	file:
_tcsetattr	lib/kpty.cpp	/^#  define _tcsetattr(/;"	d	file:
_tcsetattr	lib/kpty.cpp	/^# define _tcsetattr(/;"	d	file:
_terminalSizeHint	lib/TerminalDisplay.h	/^    bool _terminalSizeHint;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_terminalSizeStartup	lib/TerminalDisplay.h	/^    bool _terminalSizeStartup;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_text	lib/KeyboardTranslator.h	/^        QByteArray _text;$/;"	m	class:Konsole::KeyboardTranslator::Entry	typeref:typename:QByteArray
_timerId	lib/TerminalDisplay.h	/^    int _timerId;$/;"	m	class:Konsole::AutoScrollHandler	typeref:typename:int
_titleUpdateTimer	lib/Vt102Emulation.h	/^  QTimer* _titleUpdateTimer;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:QTimer *
_topMargin	lib/Screen.h	/^    int _topMargin;$/;"	m	class:Konsole::Screen	typeref:typename:int
_topMargin	lib/TerminalDisplay.h	/^    int _topMargin;    \/\/ offset$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_trackOutput	lib/ScreenWindow.h	/^    bool _trackOutput; \/\/ see setTrackOutput() , trackOutput()$/;"	m	class:Konsole::ScreenWindow	typeref:typename:bool
_translators	lib/KeyboardTranslator.h	/^    QHash<QString,KeyboardTranslator*> _translators; \/\/ maps translator-name -> KeyboardTransl/;"	m	class:Konsole::KeyboardTranslatorManager	typeref:typename:QHash<QString,KeyboardTranslator * >
_tripleClickMode	lib/TerminalDisplay.h	/^    TripleClickMode _tripleClickMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:TripleClickMode
_tripleSelBegin	lib/TerminalDisplay.h	/^    QPoint  _tripleSelBegin; \/\/ help avoid flicker$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QPoint
_type	lib/Filter.h	/^       Type _type;$/;"	m	class:Konsole::Filter::HotSpot	typeref:typename:Type
_u	lib/CharacterColor.h	/^  quint8 _u;$/;"	m	class:Konsole::CharacterColor	typeref:typename:quint8
_uniqueIdentifier	lib/Session.h	/^    int            _uniqueIdentifier;$/;"	m	class:Konsole::Session	typeref:typename:int
_urlObject	lib/Filter.h	/^        FilterObject* _urlObject;$/;"	m	class:Konsole::UrlFilter::HotSpot	typeref:typename:FilterObject *
_usedColumns	lib/TerminalDisplay.h	/^    int _usedColumns; \/\/ the number of columns that are actually being used, this will be less$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_usedLines	lib/History.h	/^  int _usedLines;$/;"	m	class:Konsole::HistoryScrollBuffer	typeref:typename:int
_usedLines	lib/TerminalDisplay.h	/^    int _usedLines;  \/\/ the number of lines that are actually being used, this will be less$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:int
_userTitle	lib/Session.h	/^    QString        _userTitle;$/;"	m	class:Konsole::Session	typeref:typename:QString
_usesMouse	lib/Emulation.h	/^  bool _usesMouse;$/;"	m	class:Konsole::Emulation	typeref:typename:bool
_utf8	lib/Pty.h	/^    bool _utf8;$/;"	m	class:Konsole::Pty	typeref:typename:bool
_v	lib/CharacterColor.h	/^  quint8 _v;$/;"	m	class:Konsole::CharacterColor	typeref:typename:quint8
_views	lib/Session.h	/^    QList<TerminalDisplay *> _views;$/;"	m	class:Konsole::Session	typeref:typename:QList<TerminalDisplay * >
_w	lib/CharacterColor.h	/^  quint8 _w;$/;"	m	class:Konsole::CharacterColor	typeref:typename:quint8
_wantedClose	lib/Session.h	/^    bool           _wantedClose;$/;"	m	class:Konsole::Session	typeref:typename:bool
_windowBuffer	lib/ScreenWindow.h	/^    Character* _windowBuffer;$/;"	m	class:Konsole::ScreenWindow	typeref:typename:Character *
_windowBufferSize	lib/ScreenWindow.h	/^    int _windowBufferSize;$/;"	m	class:Konsole::ScreenWindow	typeref:typename:int
_windowColumns	lib/Pty.h	/^    int  _windowColumns;$/;"	m	class:Konsole::Pty	typeref:typename:int
_windowLines	lib/Pty.h	/^    int  _windowLines;$/;"	m	class:Konsole::Pty	typeref:typename:int
_windowLines	lib/ScreenWindow.h	/^    int  _windowLines;$/;"	m	class:Konsole::ScreenWindow	typeref:typename:int
_windows	lib/Emulation.h	/^  QList<ScreenWindow*> _windows;$/;"	m	class:Konsole::Emulation	typeref:typename:QList<ScreenWindow * >
_wordCharacters	lib/TerminalDisplay.h	/^    QString     _wordCharacters;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:QString
_wordSelectionMode	lib/TerminalDisplay.h	/^    bool    _wordSelectionMode;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:bool
_wrappedLine	lib/History.h	/^  QBitArray _wrappedLine;$/;"	m	class:Konsole::HistoryScrollBuffer	typeref:typename:QBitArray
_writer	lib/KeyboardTranslator.h	/^    QTextStream* _writer;$/;"	m	class:Konsole::KeyboardTranslatorWriter	typeref:typename:QTextStream *
_xonXoff	lib/Pty.h	/^    bool _xonXoff;$/;"	m	class:Konsole::Pty	typeref:typename:bool
a	pyqt/test.py	/^a = QtWidgets.QApplication(sys.argv)$/;"	v
actions	lib/Filter.cpp	/^QList<QAction*> Filter::HotSpot::actions()$/;"	f	class:Filter::HotSpot	typeref:typename:QList<QAction * >
actions	lib/Filter.cpp	/^QList<QAction*> UrlFilter::HotSpot::actions()$/;"	f	class:UrlFilter::HotSpot	typeref:typename:QList<QAction * >
activate	lib/Filter.cpp	/^void FilterObject::activate()$/;"	f	class:FilterObject	typeref:typename:void
activate	lib/Filter.cpp	/^void RegExpFilter::HotSpot::activate(const QString&)$/;"	f	class:RegExpFilter::HotSpot	typeref:typename:void
activate	lib/Filter.cpp	/^void UrlFilter::HotSpot::activate(const QString& actionName)$/;"	f	class:UrlFilter::HotSpot	typeref:typename:void
activityStateSet	lib/Session.cpp	/^void Session::activityStateSet(int state)$/;"	f	class:Session	typeref:typename:void
add	lib/History.cpp	/^void HistoryFile::add(const unsigned char* bytes, int len)$/;"	f	class:HistoryFile	typeref:typename:void
addArgument	lib/Vt102Emulation.cpp	/^void Vt102Emulation::addArgument()$/;"	f	class:Vt102Emulation	typeref:typename:void
addCells	lib/History.cpp	/^void CompactHistoryScroll::addCells ( const Character a[], int count )$/;"	f	class:CompactHistoryScroll	typeref:typename:void
addCells	lib/History.cpp	/^void HistoryScrollBlockArray::addCells(const Character a[], int count)$/;"	f	class:HistoryScrollBlockArray	typeref:typename:void
addCells	lib/History.cpp	/^void HistoryScrollBuffer::addCells(const Character a[], int count)$/;"	f	class:HistoryScrollBuffer	typeref:typename:void
addCells	lib/History.cpp	/^void HistoryScrollFile::addCells(const Character text[], int count)$/;"	f	class:HistoryScrollFile	typeref:typename:void
addCells	lib/History.cpp	/^void HistoryScrollNone::addCells(const Character [], int)$/;"	f	class:HistoryScrollNone	typeref:typename:void
addCellsVector	lib/History.cpp	/^void CompactHistoryScroll::addCellsVector ( const TextLine& cells )$/;"	f	class:CompactHistoryScroll	typeref:typename:void
addCellsVector	lib/History.cpp	/^void HistoryScrollBuffer::addCellsVector(const QVector<Character>& cells)$/;"	f	class:HistoryScrollBuffer	typeref:typename:void
addCellsVector	lib/History.h	/^  virtual void addCellsVector(const QVector<Character>& cells)$/;"	f	class:Konsole::HistoryScroll	typeref:typename:void
addCustomColorSchemeDir	lib/ColorScheme.cpp	/^void ColorSchemeManager::addCustomColorSchemeDir(const QString& custom_dir)$/;"	f	class:ColorSchemeManager	typeref:typename:void
addCustomColorSchemeDir	lib/qtermwidget.cpp	/^void QTermWidget::addCustomColorSchemeDir(const QString& custom_dir)$/;"	f	class:QTermWidget	typeref:typename:void
addDigit	lib/Vt102Emulation.cpp	/^void Vt102Emulation::addDigit(int digit)$/;"	f	class:Vt102Emulation	typeref:typename:void
addEntry	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::addEntry(const Entry& entry)$/;"	f	class:KeyboardTranslator	typeref:typename:void
addEnvironmentVariables	lib/Pty.cpp	/^void Pty::addEnvironmentVariables(const QStringList& environment)$/;"	f	class:Pty	typeref:typename:void
addFilter	lib/Filter.cpp	/^void FilterChain::addFilter(Filter* filter)$/;"	f	class:FilterChain	typeref:typename:void
addHistLine	lib/Screen.cpp	/^void Screen::addHistLine()$/;"	f	class:Screen	typeref:typename:void
addHotSpot	lib/Filter.cpp	/^void Filter::addHotSpot(HotSpot* spot)$/;"	f	class:Filter	typeref:typename:void
addLine	lib/History.cpp	/^void CompactHistoryScroll::addLine ( bool previousWrapped )$/;"	f	class:CompactHistoryScroll	typeref:typename:void
addLine	lib/History.cpp	/^void HistoryScrollBlockArray::addLine(bool)$/;"	f	class:HistoryScrollBlockArray	typeref:typename:void
addLine	lib/History.cpp	/^void HistoryScrollBuffer::addLine(bool previousWrapped)$/;"	f	class:HistoryScrollBuffer	typeref:typename:void
addLine	lib/History.cpp	/^void HistoryScrollFile::addLine(bool previousWrapped)$/;"	f	class:HistoryScrollFile	typeref:typename:void
addLine	lib/History.cpp	/^void HistoryScrollNone::addLine(bool)$/;"	f	class:HistoryScrollNone	typeref:typename:void
addSession	lib/Session.cpp	/^void SessionGroup::addSession(Session * session)$/;"	f	class:SessionGroup	typeref:typename:void
addToCurrentToken	lib/Vt102Emulation.cpp	/^void Vt102Emulation::addToCurrentToken(int cc)$/;"	f	class:Vt102Emulation	typeref:typename:void
addTranslator	lib/KeyboardTranslator.cpp	/^void KeyboardTranslatorManager::addTranslator(KeyboardTranslator* translator)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:void
addUtmp	lib/kptyprocess.h	/^    bool addUtmp : 1;$/;"	m	class:KPtyProcessPrivate	typeref:typename:bool:1
addView	lib/Session.cpp	/^void Session::addView(TerminalDisplay * widget)$/;"	f	class:Session	typeref:typename:void
add_custom_color_scheme_dir	lib/tools.cpp	/^void add_custom_color_scheme_dir(const QString& custom_dir)$/;"	f	typeref:typename:void
allColorSchemes	lib/ColorScheme.cpp	/^QList<const ColorScheme*> ColorSchemeManager::allColorSchemes()$/;"	f	class:ColorSchemeManager	typeref:typename:QList<const ColorScheme * >
allTranslators	lib/KeyboardTranslator.cpp	/^QList<QString> KeyboardTranslatorManager::allTranslators()$/;"	f	class:KeyboardTranslatorManager	typeref:typename:QList<QString>
allocCount	lib/History.h	/^  int allocCount;$/;"	m	class:Konsole::CompactHistoryBlock	typeref:typename:int
allocate	lib/History.cpp	/^void* CompactHistoryBlock::allocate ( size_t length )$/;"	f	class:CompactHistoryBlock	typeref:typename:void *
allocate	lib/History.cpp	/^void* CompactHistoryBlockList::allocate(size_t size)$/;"	f	class:CompactHistoryBlockList	typeref:typename:void *
antialias	lib/TerminalDisplay.h	/^    static bool antialias()                 { return _antialiasText;   }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
append	lib/BlockArray.cpp	/^size_t BlockArray::append(Block * block)$/;"	f	class:BlockArray	typeref:typename:size_t
applyCharset	lib/Vt102Emulation.cpp	/^unsigned short Vt102Emulation::applyCharset(unsigned short c)$/;"	f	class:Vt102Emulation	typeref:typename:unsigned short
argc	lib/Vt102Emulation.h	/^  int argc;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:int
args	lib/kprocess.h	/^    QStringList args;$/;"	m	class:KProcessPrivate	typeref:typename:QStringList
arguments	lib/Session.cpp	/^QStringList Session::arguments() const$/;"	f	class:Session	typeref:typename:QStringList
arguments	lib/ShellCommand.cpp	/^QStringList ShellCommand::arguments() const$/;"	f	class:ShellCommand	typeref:typename:QStringList
argv	lib/Vt102Emulation.h	/^  int argv[MAXARGS];$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:int[]
at	lib/BlockArray.cpp	/^const Block * BlockArray::at(size_t i)$/;"	f	class:BlockArray	typeref:typename:const Block *
atEnd	lib/kptydevice.cpp	/^bool KPtyDevice::atEnd() const$/;"	f	class:KPtyDevice	typeref:typename:bool
atEndOfOutput	lib/ScreenWindow.cpp	/^bool ScreenWindow::atEndOfOutput() const$/;"	f	class:ScreenWindow	typeref:typename:bool
availableColorSchemes	lib/qtermwidget.cpp	/^QStringList QTermWidget::availableColorSchemes()$/;"	f	class:QTermWidget	typeref:typename:QStringList
availableKeyBindings	lib/qtermwidget.cpp	/^QStringList QTermWidget::availableKeyBindings()$/;"	f	class:QTermWidget	typeref:typename:QStringList
background	lib/Screen.h	/^        CharacterColor background;$/;"	m	class:Konsole::Screen::SavedState	typeref:typename:CharacterColor
backgroundColor	lib/Character.h	/^  CharacterColor  backgroundColor;$/;"	m	class:Konsole::Character	typeref:typename:CharacterColor
backgroundColor	lib/ColorScheme.cpp	/^QColor ColorScheme::backgroundColor() const$/;"	f	class:ColorScheme	typeref:typename:QColor
backspace	lib/Screen.cpp	/^void Screen::backspace()$/;"	f	class:Screen	typeref:typename:void
backtab	lib/Screen.cpp	/^void Screen::backtab(int n)$/;"	f	class:Screen	typeref:typename:void
base_color_table	lib/TerminalDisplay.cpp	/^const ColorEntry Konsole::base_color_table[TABLE_COLORS] =$/;"	m	class:Konsole	typeref:typename:const ColorEntry[]
begin	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::begin(QTextStream* output)$/;"	f	class:HTMLDecoder	typeref:typename:void
begin	lib/TerminalCharacterDecoder.cpp	/^void PlainTextDecoder::begin(QTextStream* output)$/;"	f	class:PlainTextDecoder	typeref:typename:void
bell	lib/TerminalDisplay.cpp	/^void TerminalDisplay::bell(const QString& message)$/;"	f	class:TerminalDisplay	typeref:typename:void
bellMode	lib/TerminalDisplay.h	/^    int bellMode() { return _bellMode; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:int
bgColor	lib/History.h	/^  CharacterColor fgColor, bgColor;$/;"	m	class:Konsole::CharacterFormat	typeref:typename:CharacterColor
blinkCursorEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::blinkCursorEvent()$/;"	f	class:TerminalDisplay	typeref:typename:void
blinkEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::blinkEvent()$/;"	f	class:TerminalDisplay	typeref:typename:void
blinkingCursor	lib/TerminalDisplay.h	/^    bool blinkingCursor() { return _hasBlinkingCursor; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
blockLength	lib/History.h	/^  size_t blockLength;$/;"	m	class:Konsole::CompactHistoryBlock	typeref:typename:size_t
blockList	lib/History.h	/^  CompactHistoryBlockList blockList;$/;"	m	class:Konsole::CompactHistoryScroll	typeref:typename:CompactHistoryBlockList
blockList	lib/History.h	/^  CompactHistoryBlockList& blockList;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:CompactHistoryBlockList &
blockSelectionMode	lib/Screen.h	/^    bool blockSelectionMode;  \/\/ Column selection mode$/;"	m	class:Konsole::Screen	typeref:typename:bool
blockStart	lib/History.h	/^  quint8* blockStart;$/;"	m	class:Konsole::CompactHistoryBlock	typeref:typename:quint8 *
blocksize	lib/BlockArray.cpp	/^static int blocksize = 0;$/;"	v	typeref:typename:int	file:
bottomMargin	lib/Screen.cpp	/^int Screen::bottomMargin() const$/;"	f	class:Screen	typeref:typename:int
bracketedPasteMode	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::bracketedPasteMode() const$/;"	f	class:TerminalDisplay	typeref:typename:bool
bracketedPasteModeChanged	lib/Emulation.cpp	/^void Emulation::bracketedPasteModeChanged(bool bracketedPasteMode)$/;"	f	class:Emulation	typeref:typename:void
buffer	lib/Filter.cpp	/^const QString* Filter::buffer()$/;"	f	class:Filter	typeref:typename:const QString *
bufferIndex	lib/History.cpp	/^int HistoryScrollBuffer::bufferIndex(int lineNumber)$/;"	f	class:HistoryScrollBuffer	typeref:typename:int
bufferedUpdate	lib/Emulation.cpp	/^void Emulation::bufferedUpdate()$/;"	f	class:Emulation	typeref:typename:void
buffers	lib/kptydevice.h	/^    QLinkedList<QByteArray> buffers;$/;"	m	class:KRingBuffer	typeref:typename:QLinkedList<QByteArray>
build_file	pyqt/config-old.py	/^build_file = "qtermwidget.sbf"$/;"	v
build_file	pyqt/config.py	/^build_file = "qtermwidget.sbf"$/;"	v
bytesAvailable	lib/kptydevice.cpp	/^qint64 KPtyDevice::bytesAvailable() const$/;"	f	class:KPtyDevice	typeref:typename:qint64
bytesToWrite	lib/kptydevice.cpp	/^qint64 KPtyDevice::bytesToWrite() const$/;"	f	class:KPtyDevice	typeref:typename:qint64
calcGeometry	lib/TerminalDisplay.cpp	/^void TerminalDisplay::calcGeometry()$/;"	f	class:TerminalDisplay	typeref:typename:void
calculateTextArea	lib/TerminalDisplay.cpp	/^QRect TerminalDisplay::calculateTextArea(int topLeftX, int topLeftY, int startColumn, int line, /;"	f	class:TerminalDisplay	typeref:typename:QRect
canReadLine	lib/kptydevice.cpp	/^bool KPtyDevice::canReadLine() const$/;"	f	class:KPtyDevice	typeref:typename:bool
canReadLine	lib/kptydevice.h	/^    inline bool canReadLine() const$/;"	f	class:KRingBuffer	typeref:typename:bool
capturedTexts	lib/Filter.cpp	/^QStringList RegExpFilter::HotSpot::capturedTexts() const$/;"	f	class:RegExpFilter::HotSpot	typeref:typename:QStringList
cells	lib/History.h	/^  HistoryFile cells; \/\/ text  Row(Character)$/;"	m	class:Konsole::HistoryScrollFile	typeref:typename:HistoryFile
ces	lib/Vt102Emulation.cpp	/^#define ces(/;"	d	file:
changeDir	lib/qtermwidget.cpp	/^void QTermWidget::changeDir(const QString & dir)$/;"	f	class:QTermWidget	typeref:typename:void
changeTabStop	lib/Screen.cpp	/^void Screen::changeTabStop(bool set)$/;"	f	class:Screen	typeref:typename:void
charClass	lib/TerminalDisplay.cpp	/^QChar TerminalDisplay::charClass(QChar qch) const$/;"	f	class:TerminalDisplay	typeref:typename:QChar
charClass	lib/Vt102Emulation.h	/^  int charClass[256];$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:int[256]
charSequence	lib/Character.h	/^    quint16 charSequence;$/;"	m	union:Konsole::Character::__anon25e1116e010a	typeref:typename:quint16
character	lib/Character.h	/^    quint16 character;$/;"	m	union:Konsole::Character::__anon25e1116e010a	typeref:typename:quint16
charset	lib/Vt102Emulation.h	/^  char charset[4]; \/\/$/;"	m	struct:Konsole::CharCodes	typeref:typename:char[4]
checkSelection	lib/Screen.cpp	/^void Screen::checkSelection(int from, int to)$/;"	f	class:Screen	typeref:typename:void
chownpty	lib/kpty.cpp	/^bool KPtyPrivate::chownpty(bool)$/;"	f	class:KPtyPrivate	typeref:typename:bool
clear	lib/Filter.cpp	/^void FilterChain::clear()$/;"	f	class:FilterChain	typeref:typename:void
clear	lib/Screen.cpp	/^void Screen::clear()$/;"	f	class:Screen	typeref:typename:void
clear	lib/kptydevice.h	/^    void clear()$/;"	f	class:KRingBuffer	typeref:typename:void
clear	lib/qtermwidget.cpp	/^void QTermWidget::clear()$/;"	f	class:QTermWidget	typeref:typename:void
clearBackgroundColor	lib/SearchBar.cpp	/^void SearchBar::clearBackgroundColor()$/;"	f	class:SearchBar	typeref:typename:void
clearEntireLine	lib/Screen.cpp	/^void Screen::clearEntireLine()$/;"	f	class:Screen	typeref:typename:void
clearEntireScreen	lib/Screen.cpp	/^void Screen::clearEntireScreen()$/;"	f	class:Screen	typeref:typename:void
clearEntireScreen	lib/Vt102Emulation.cpp	/^void Vt102Emulation::clearEntireScreen()$/;"	f	class:Vt102Emulation	typeref:typename:void
clearEnvironment	lib/kprocess.cpp	/^void KProcess::clearEnvironment()$/;"	f	class:KProcess	typeref:typename:void
clearHistory	lib/Emulation.cpp	/^void Emulation::clearHistory()$/;"	f	class:Emulation	typeref:typename:void
clearHistory	lib/Session.cpp	/^void Session::clearHistory()$/;"	f	class:Session	typeref:typename:void
clearImage	lib/Screen.cpp	/^void Screen::clearImage(int loca, int loce, char c)$/;"	f	class:Screen	typeref:typename:void
clearImage	lib/TerminalDisplay.cpp	/^void TerminalDisplay::clearImage()$/;"	f	class:TerminalDisplay	typeref:typename:void
clearProgram	lib/kprocess.cpp	/^void KProcess::clearProgram()$/;"	f	class:KProcess	typeref:typename:void
clearScreenAndSetColumns	lib/Vt102Emulation.cpp	/^void Vt102Emulation::clearScreenAndSetColumns(int columnCount)$/;"	f	class:Vt102Emulation	typeref:typename:void
clearSelection	lib/Screen.cpp	/^void Screen::clearSelection()$/;"	f	class:Screen	typeref:typename:void
clearSelection	lib/ScreenWindow.cpp	/^void ScreenWindow::clearSelection()$/;"	f	class:ScreenWindow	typeref:typename:void
clearTabStops	lib/Screen.cpp	/^void Screen::clearTabStops()$/;"	f	class:Screen	typeref:typename:void
clearToBeginOfLine	lib/Screen.cpp	/^void Screen::clearToBeginOfLine()$/;"	f	class:Screen	typeref:typename:void
clearToBeginOfScreen	lib/Screen.cpp	/^void Screen::clearToBeginOfScreen()$/;"	f	class:Screen	typeref:typename:void
clearToEndOfLine	lib/Screen.cpp	/^void Screen::clearToEndOfLine()$/;"	f	class:Screen	typeref:typename:void
clearToEndOfScreen	lib/Screen.cpp	/^void Screen::clearToEndOfScreen()$/;"	f	class:Screen	typeref:typename:void
close	lib/Session.cpp	/^void Session::close()$/;"	f	class:Session	typeref:typename:void
close	lib/kpty.cpp	/^void KPty::close()$/;"	f	class:KPty	typeref:typename:void
close	lib/kptydevice.cpp	/^void KPtyDevice::close()$/;"	f	class:KPtyDevice	typeref:typename:void
closeSlave	lib/kpty.cpp	/^void KPty::closeSlave()$/;"	f	class:KPty	typeref:typename:void
closeSpan	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::closeSpan(QString& text)$/;"	f	class:HTMLDecoder	typeref:typename:void
codec	lib/Emulation.h	/^  const QTextCodec* codec() const { return _codec; }$/;"	f	class:Konsole::Emulation	typeref:typename:const QTextCodec *
color	lib/CharacterColor.h	/^  QColor color;$/;"	m	class:Konsole::ColorEntry	typeref:typename:QColor
color	lib/CharacterColor.h	/^inline QColor CharacterColor::color(const ColorEntry* base) const$/;"	f	class:Konsole::CharacterColor	typeref:typename:QColor
color256	lib/CharacterColor.h	/^inline const QColor color256(quint8 u, const ColorEntry* base)$/;"	f	namespace:Konsole	typeref:typename:const QColor
colorEntry	lib/ColorScheme.cpp	/^ColorEntry ColorScheme::colorEntry(int index , uint randomSeed) const$/;"	f	class:ColorScheme	typeref:typename:ColorEntry
colorNameForIndex	lib/ColorScheme.cpp	/^QString ColorScheme::colorNameForIndex(int index)$/;"	f	class:ColorScheme	typeref:typename:QString
colorNames	lib/ColorScheme.cpp	/^const char* const ColorScheme::colorNames[TABLE_COLORS] =$/;"	m	class:ColorScheme	typeref:typename:const char * const[]
colorNames	lib/ColorScheme.h	/^    static const char* const colorNames[TABLE_COLORS];$/;"	m	class:Konsole::ColorScheme	typeref:typename:const char * const[]
colorTable	lib/ColorScheme.cpp	/^const ColorEntry* ColorScheme::colorTable() const$/;"	f	class:ColorScheme	typeref:typename:const ColorEntry *
colorTable	lib/TerminalDisplay.cpp	/^const ColorEntry* TerminalDisplay::colorTable() const$/;"	f	class:TerminalDisplay	typeref:typename:const ColorEntry *
columnCount	lib/ScreenWindow.cpp	/^int ScreenWindow::columnCount() const$/;"	f	class:ScreenWindow	typeref:typename:int
columns	lib/Screen.h	/^    int columns;$/;"	m	class:Konsole::Screen	typeref:typename:int
columns	lib/TerminalDisplay.h	/^    int  columns() { return _columns; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:int
command	lib/KeyboardTranslator.h	/^inline KeyboardTranslator::Command KeyboardTranslator::Entry::command() const { return _command;/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:KeyboardTranslator::Command
command	lib/ShellCommand.cpp	/^QString ShellCommand::command() const$/;"	f	class:ShellCommand	typeref:typename:QString
compose	lib/Screen.cpp	/^void Screen::compose(const QString& \/*compose*\/)$/;"	f	class:Screen	typeref:typename:void
conditionToString	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslator::Entry::conditionToString() const$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:QString
config	pyqt/config-old.py	/^config = pyqtconfig.Configuration()$/;"	v
config	pyqt/config.py	/^config = Configuration()$/;"	v
connectAll	lib/Session.cpp	/^void SessionGroup::connectAll(bool connect)$/;"	f	class:SessionGroup	typeref:typename:void
connectPair	lib/Session.cpp	/^void SessionGroup::connectPair(Session * master , Session * other)$/;"	f	class:SessionGroup	typeref:typename:void
contains	lib/History.h	/^  virtual bool contains(void *addr) {return addr>=blockStart && addr<(blockStart+blockLength);}$/;"	f	class:Konsole::CompactHistoryBlock	typeref:typename:bool
containsFilter	lib/Filter.cpp	/^bool FilterChain::containsFilter(Filter* filter)$/;"	f	class:FilterChain	typeref:typename:bool
content	pyqt/config-old.py	/^content = {$/;"	v
content	pyqt/config.py	/^content = {$/;"	v
copyClipboard	lib/TerminalDisplay.cpp	/^void TerminalDisplay::copyClipboard()$/;"	f	class:TerminalDisplay	typeref:typename:void
copyClipboard	lib/qtermwidget.cpp	/^void QTermWidget::copyClipboard()$/;"	f	class:QTermWidget	typeref:typename:void
copyFromHistory	lib/Screen.cpp	/^void Screen::copyFromHistory(Character* dest, int startLine, int count) const$/;"	f	class:Screen	typeref:typename:void
copyFromScreen	lib/Screen.cpp	/^void Screen::copyFromScreen(Character* dest , int startLine , int count) const$/;"	f	class:Screen	typeref:typename:void
copyLineToStream	lib/Screen.cpp	/^int Screen::copyLineToStream(int line ,$/;"	f	class:Screen	typeref:typename:int
createEntry	lib/KeyboardTranslator.cpp	/^KeyboardTranslator::Entry KeyboardTranslatorReader::createEntry( const QString& condition ,$/;"	f	class:KeyboardTranslatorReader	typeref:typename:KeyboardTranslator::Entry
createExtendedChar	lib/Emulation.cpp	/^ushort ExtendedCharTable::createExtendedChar(ushort* unicodePoints , ushort length)$/;"	f	class:ExtendedCharTable	typeref:typename:ushort
createSession	lib/qtermwidget.cpp	/^Session *TermWidgetImpl::createSession(QWidget* parent)$/;"	f	class:TermWidgetImpl	typeref:typename:Session *
createTermWidget	lib/qtermwidget.cpp	/^void *createTermWidget(int startnow, void *parent)$/;"	f	typeref:typename:void *
createTerminalDisplay	lib/qtermwidget.cpp	/^TerminalDisplay *TermWidgetImpl::createTerminalDisplay(Session *session, QWidget* parent)$/;"	f	class:TermWidgetImpl	typeref:typename:TerminalDisplay *
createWindow	lib/Emulation.cpp	/^ScreenWindow* Emulation::createWindow()$/;"	f	class:Emulation	typeref:typename:ScreenWindow *
ctrlDrag	lib/TerminalDisplay.h	/^    bool ctrlDrag() { return _ctrlDrag; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
cuX	lib/Screen.h	/^    int cuX;$/;"	m	class:Konsole::Screen	typeref:typename:int
cuY	lib/Screen.h	/^    int cuY;$/;"	m	class:Konsole::Screen	typeref:typename:int
cu_cs	lib/Vt102Emulation.h	/^  int  cu_cs;      \/\/ actual charset.$/;"	m	struct:Konsole::CharCodes	typeref:typename:int
current	lib/BlockArray.h	/^    size_t current;$/;"	m	class:Konsole::BlockArray	typeref:typename:size_t
currentBackground	lib/Screen.h	/^    CharacterColor currentBackground;$/;"	m	class:Konsole::Screen	typeref:typename:CharacterColor
currentForeground	lib/Screen.h	/^    CharacterColor currentForeground;$/;"	m	class:Konsole::Screen	typeref:typename:CharacterColor
currentLine	lib/ScreenWindow.cpp	/^int ScreenWindow::currentLine() const$/;"	f	class:ScreenWindow	typeref:typename:int
currentModes	lib/Screen.h	/^    int currentModes[MODES_SCREEN];$/;"	m	class:Konsole::Screen	typeref:typename:int[]
currentRendition	lib/Screen.h	/^    quint8 currentRendition;$/;"	m	class:Konsole::Screen	typeref:typename:quint8
cursorColumn	lib/Screen.h	/^        int cursorColumn;$/;"	m	class:Konsole::Screen::SavedState	typeref:typename:int
cursorDown	lib/Screen.cpp	/^void Screen::cursorDown(int n)$/;"	f	class:Screen	typeref:typename:void
cursorLeft	lib/Screen.cpp	/^void Screen::cursorLeft(int n)$/;"	f	class:Screen	typeref:typename:void
cursorLine	lib/Screen.h	/^        int cursorLine;$/;"	m	class:Konsole::Screen::SavedState	typeref:typename:int
cursorPosition	lib/ScreenWindow.cpp	/^QPoint ScreenWindow::cursorPosition() const$/;"	f	class:ScreenWindow	typeref:typename:QPoint
cursorPosition	lib/TerminalDisplay.cpp	/^QPoint TerminalDisplay::cursorPosition() const$/;"	f	class:TerminalDisplay	typeref:typename:QPoint
cursorRight	lib/Screen.cpp	/^void Screen::cursorRight(int n)$/;"	f	class:Screen	typeref:typename:void
cursorUp	lib/Screen.cpp	/^void Screen::cursorUp(int n)$/;"	f	class:Screen	typeref:typename:void
custom_color_schemes_dirs	lib/tools.cpp	/^    QStringList custom_color_schemes_dirs;$/;"	v	namespace:__anon65ea994d0110	typeref:typename:QStringList
d_ptr	lib/kprocess.h	/^    KProcessPrivate * const d_ptr;$/;"	m	class:KProcess	typeref:typename:KProcessPrivate * const
d_ptr	lib/kpty.h	/^    KPtyPrivate * const d_ptr;$/;"	m	class:KPty	typeref:typename:KPtyPrivate * const
data	lib/BlockArray.h	/^    unsigned char data[ENTRIES];$/;"	m	struct:Konsole::Block	typeref:typename:unsigned char[]
dataReceived	lib/Pty.cpp	/^void Pty::dataReceived()$/;"	f	class:Pty	typeref:typename:void
deallocate	lib/History.cpp	/^void CompactHistoryBlock::deallocate ( )$/;"	f	class:CompactHistoryBlock	typeref:typename:void
deallocate	lib/History.cpp	/^void CompactHistoryBlockList::deallocate(void* ptr)$/;"	f	class:CompactHistoryBlockList	typeref:typename:void
decodeLine	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::decodeLine(const Character* const characters, int count, LineProperty \/*prope/;"	f	class:HTMLDecoder	typeref:typename:void
decodeLine	lib/TerminalCharacterDecoder.cpp	/^void PlainTextDecoder::decodeLine(const Character* const characters, int count, LineProperty \/*/;"	f	class:PlainTextDecoder	typeref:typename:void
decodeSequence	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::decodeSequence(const QString& text,$/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
decreaseBuffer	lib/BlockArray.cpp	/^void BlockArray::decreaseBuffer(size_t newsize)$/;"	f	class:BlockArray	typeref:typename:void
defaultChar	lib/Screen.cpp	/^Character Screen::defaultChar = Character(' ',$/;"	m	class:Screen	typeref:typename:Character
defaultChar	lib/Screen.h	/^    static Character defaultChar;$/;"	m	class:Konsole::Screen	typeref:typename:Character
defaultColorScheme	lib/ColorScheme.cpp	/^const ColorScheme* ColorSchemeManager::defaultColorScheme() const$/;"	f	class:ColorSchemeManager	typeref:typename:const ColorScheme *
defaultTable	lib/ColorScheme.cpp	/^const ColorEntry ColorScheme::defaultTable[TABLE_COLORS] =$/;"	m	class:ColorScheme	typeref:typename:const ColorEntry[]
defaultTable	lib/ColorScheme.h	/^    static const ColorEntry defaultTable[]; \/\/ table of default color entries$/;"	m	class:Konsole::ColorScheme	typeref:typename:const ColorEntry[]
defaultTranslator	lib/KeyboardTranslator.cpp	/^const KeyboardTranslator* KeyboardTranslatorManager::defaultTranslator()$/;"	f	class:KeyboardTranslatorManager	typeref:typename:const KeyboardTranslator *
defaultTranslatorText	lib/KeyboardTranslator.cpp	/^const QByteArray KeyboardTranslatorManager::defaultTranslatorText($/;"	m	class:KeyboardTranslatorManager	typeref:typename:const QByteArray
defaultTranslatorText	lib/KeyboardTranslator.h	/^    static const QByteArray defaultTranslatorText;$/;"	m	class:Konsole::KeyboardTranslatorManager	typeref:typename:const QByteArray
deleteChars	lib/Screen.cpp	/^void Screen::deleteChars(int n)$/;"	f	class:Screen	typeref:typename:void
deleteColorScheme	lib/ColorScheme.cpp	/^bool ColorSchemeManager::deleteColorScheme(const QString& name)$/;"	f	class:ColorSchemeManager	typeref:typename:bool
deleteLines	lib/Screen.cpp	/^void Screen::deleteLines(int n)$/;"	f	class:Screen	typeref:typename:void
deleteTranslator	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorManager::deleteTranslator(const QString& name)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:bool
description	lib/ColorScheme.cpp	/^QString ColorScheme::description() const { return _description; }$/;"	f	class:ColorScheme	typeref:typename:QString
description	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslator::description() const$/;"	f	class:KeyboardTranslator	typeref:typename:QString
description	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslatorReader::description() const$/;"	f	class:KeyboardTranslatorReader	typeref:typename:QString
devel	qtermwidget.spec	/^%package devel$/;"	p	package:qtermwidget
diDragging	lib/TerminalDisplay.h	/^    enum DragState { diNone, diPending, diDragging };$/;"	e	enum:Konsole::TerminalDisplay::DragState
diNone	lib/TerminalDisplay.h	/^    enum DragState { diNone, diPending, diDragging };$/;"	e	enum:Konsole::TerminalDisplay::DragState
diPending	lib/TerminalDisplay.h	/^    enum DragState { diNone, diPending, diDragging };$/;"	e	enum:Konsole::TerminalDisplay::DragState
disconnectPair	lib/Session.cpp	/^void SessionGroup::disconnectPair(Session * master , Session * other)$/;"	f	class:SessionGroup	typeref:typename:void
displayCharacter	lib/Screen.cpp	/^void Screen::displayCharacter(unsigned short c)$/;"	f	class:Screen	typeref:typename:void
doDrag	lib/TerminalDisplay.cpp	/^void TerminalDisplay::doDrag()$/;"	f	class:TerminalDisplay	typeref:typename:void
doWait	lib/kptydevice.cpp	/^bool KPtyDevicePrivate::doWait(int msecs, bool reading)$/;"	f	class:KPtyDevicePrivate	typeref:typename:bool
done	lib/Session.cpp	/^void Session::done(int exitStatus)$/;"	f	class:Session	typeref:typename:void
dragEnterEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::dragEnterEvent(QDragEnterEvent* event)$/;"	f	class:TerminalDisplay	typeref:typename:void
dragInfo	lib/TerminalDisplay.h	/^    } dragInfo;$/;"	m	class:Konsole::TerminalDisplay	typeref:struct:Konsole::TerminalDisplay::_dragInfo
dragObject	lib/TerminalDisplay.h	/^      QDrag           *dragObject;$/;"	m	struct:Konsole::TerminalDisplay::_dragInfo	typeref:typename:QDrag *
drawBackground	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawBackground(QPainter& painter, const QRect& rect, const QColor& backgro/;"	f	class:TerminalDisplay	typeref:typename:void
drawCharacters	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawCharacters(QPainter& painter,$/;"	f	class:TerminalDisplay	typeref:typename:void
drawContents	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawContents(QPainter &paint, const QRect &rect)$/;"	f	class:TerminalDisplay	typeref:typename:void
drawCursor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawCursor(QPainter& painter,$/;"	f	class:TerminalDisplay	typeref:typename:void
drawInputMethodPreeditString	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawInputMethodPreeditString(QPainter& painter , const QRect& rect)$/;"	f	class:TerminalDisplay	typeref:typename:void
drawLineChar	lib/TerminalDisplay.cpp	/^static void drawLineChar(QPainter& paint, int x, int y, int w, int h, uchar code)$/;"	f	typeref:typename:void	file:
drawLineCharString	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawLineCharString(    QPainter& painter, int x, int y, const QString& str/;"	f	class:TerminalDisplay	typeref:typename:void
drawOtherChar	lib/TerminalDisplay.cpp	/^static void drawOtherChar(QPainter& paint, int x, int y, int w, int h, uchar code)$/;"	f	typeref:typename:void	file:
drawTextFragment	lib/TerminalDisplay.cpp	/^void TerminalDisplay::drawTextFragment(QPainter& painter ,$/;"	f	class:TerminalDisplay	typeref:typename:void
dropEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::dropEvent(QDropEvent* event)$/;"	f	class:TerminalDisplay	typeref:typename:void
droppedLines	lib/Screen.cpp	/^int Screen::droppedLines() const$/;"	f	class:Screen	typeref:typename:int
eec	lib/Vt102Emulation.cpp	/^#define eec(/;"	d	file:
ees	lib/Vt102Emulation.cpp	/^#define ees(/;"	d	file:
effectiveBackground	lib/Screen.h	/^    CharacterColor effectiveBackground; \/\/ the cu_* variables above$/;"	m	class:Konsole::Screen	typeref:typename:CharacterColor
effectiveForeground	lib/Screen.h	/^    CharacterColor effectiveForeground; \/\/ These are derived from$/;"	m	class:Konsole::Screen	typeref:typename:CharacterColor
effectiveRendition	lib/Screen.h	/^    quint8 effectiveRendition;          \/\/ to speed up operation$/;"	m	class:Konsole::Screen	typeref:typename:quint8
egt	lib/Vt102Emulation.cpp	/^#define egt(/;"	d	file:
emitActivated	lib/Filter.cpp	/^void FilterObject::emitActivated(const QUrl& url, bool fromContextMenu)$/;"	f	class:FilterObject	typeref:typename:void
emitSelection	lib/TerminalDisplay.cpp	/^void TerminalDisplay::emitSelection(bool useXselection,bool appendReturn)$/;"	f	class:TerminalDisplay	typeref:typename:void
emittedBytesWritten	lib/kptydevice.h	/^    bool emittedBytesWritten;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:bool
emittedReadyRead	lib/kptydevice.h	/^    bool emittedReadyRead;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:bool
emulation	lib/Session.cpp	/^Emulation * Session::emulation() const$/;"	f	class:Session	typeref:typename:Emulation *
enableBell	lib/TerminalDisplay.cpp	/^void TerminalDisplay::enableBell()$/;"	f	class:TerminalDisplay	typeref:typename:void
end	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::end()$/;"	f	class:HTMLDecoder	typeref:typename:void
end	lib/TerminalCharacterDecoder.cpp	/^void PlainTextDecoder::end()$/;"	f	class:PlainTextDecoder	typeref:typename:void
endColumn	lib/Filter.cpp	/^int Filter::HotSpot::endColumn() const$/;"	f	class:Filter::HotSpot	typeref:typename:int
endLine	lib/Filter.cpp	/^int Filter::HotSpot::endLine() const$/;"	f	class:Filter::HotSpot	typeref:typename:int
endWindowLine	lib/ScreenWindow.cpp	/^int ScreenWindow::endWindowLine() const$/;"	f	class:ScreenWindow	typeref:typename:int
entries	lib/KeyboardTranslator.cpp	/^QList<KeyboardTranslator::Entry> KeyboardTranslator::entries() const$/;"	f	class:KeyboardTranslator	typeref:typename:QList<KeyboardTranslator::Entry>
environment	lib/Session.cpp	/^QStringList Session::environment() const$/;"	f	class:Session	typeref:typename:QStringList
epe	lib/Vt102Emulation.cpp	/^#define epe(/;"	d	file:
epp	lib/Vt102Emulation.cpp	/^#define epp(/;"	d	file:
eps	lib/Vt102Emulation.cpp	/^#define eps(/;"	d	file:
equalsFormat	lib/Character.h	/^inline bool Character::equalsFormat(const Character& other) const$/;"	f	class:Konsole::Character	typeref:typename:bool
equalsFormat	lib/History.h	/^  bool equalsFormat(const Character &c) const {$/;"	f	class:Konsole::CharacterFormat	typeref:typename:bool
equalsFormat	lib/History.h	/^  bool equalsFormat(const CharacterFormat &other) const {$/;"	f	class:Konsole::CharacterFormat	typeref:typename:bool
erase	lib/Pty.cpp	/^char Pty::erase() const$/;"	f	class:Pty	typeref:typename:char
eraseChar	lib/Emulation.cpp	/^char Emulation::eraseChar() const$/;"	f	class:Emulation	typeref:typename:char
eraseChar	lib/Vt102Emulation.cpp	/^char Vt102Emulation::eraseChar() const$/;"	f	class:Vt102Emulation	typeref:typename:char
eraseChars	lib/Screen.cpp	/^void Screen::eraseChars(int n)$/;"	f	class:Screen	typeref:typename:void
escapedText	lib/KeyboardTranslator.cpp	/^QByteArray KeyboardTranslator::Entry::escapedText(bool expandWildCards,Qt::KeyboardModifiers mod/;"	f	class:KeyboardTranslator::Entry	typeref:typename:QByteArray
esp	lib/Vt102Emulation.cpp	/^#define esp(/;"	d	file:
event	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::event(QEvent* event)$/;"	f	class:TerminalDisplay	typeref:typename:bool
eventFilter	lib/TerminalDisplay.cpp	/^bool AutoScrollHandler::eventFilter(QObject* watched,QEvent* event)$/;"	f	class:AutoScrollHandler	typeref:typename:bool
execute	lib/kprocess.cpp	/^int KProcess::execute(const QString &exe, const QStringList &args, int msecs)$/;"	f	class:KProcess	typeref:typename:int
execute	lib/kprocess.cpp	/^int KProcess::execute(const QStringList &argv, int msecs)$/;"	f	class:KProcess	typeref:typename:int
execute	lib/kprocess.cpp	/^int KProcess::execute(int msecs)$/;"	f	class:KProcess	typeref:typename:int
expand	lib/ShellCommand.cpp	/^QString ShellCommand::expand(const QString & text)$/;"	f	class:ShellCommand	typeref:typename:QString
expand	lib/ShellCommand.cpp	/^QStringList ShellCommand::expand(const QStringList & items)$/;"	f	class:ShellCommand	typeref:typename:QStringList
expandEnv	lib/ShellCommand.cpp	/^static bool expandEnv( QString & text )$/;"	f	typeref:typename:bool	file:
extendSelection	lib/TerminalDisplay.cpp	/^void TerminalDisplay::extendSelection( const QPoint& position )$/;"	f	class:TerminalDisplay	typeref:typename:void
extendedCharHash	lib/Emulation.cpp	/^ushort ExtendedCharTable::extendedCharHash(ushort* unicodePoints , ushort length) const$/;"	f	class:ExtendedCharTable	typeref:typename:ushort
extendedCharMatch	lib/Emulation.cpp	/^bool ExtendedCharTable::extendedCharMatch(ushort hash , ushort* unicodePoints , ushort length) c/;"	f	class:ExtendedCharTable	typeref:typename:bool
extendedCharTable	lib/Character.h	/^    QHash<ushort,ushort*> extendedCharTable;$/;"	m	class:Konsole::ExtendedCharTable	typeref:typename:QHash<ushort,ushort * >
fgColor	lib/History.h	/^  CharacterColor fgColor, bgColor;$/;"	m	class:Konsole::CharacterFormat	typeref:typename:CharacterColor
fileMap	lib/History.h	/^  char* fileMap;$/;"	m	class:Konsole::HistoryFile	typeref:typename:char *
fillUnusedArea	lib/ScreenWindow.cpp	/^void ScreenWindow::fillUnusedArea()$/;"	f	class:ScreenWindow	typeref:typename:void
fillWithDefaultChar	lib/Screen.cpp	/^void Screen::fillWithDefaultChar(Character* dest, int count)$/;"	f	class:Screen	typeref:typename:void
filterActions	lib/TerminalDisplay.cpp	/^QList<QAction*> TerminalDisplay::filterActions(const QPoint& position)$/;"	f	class:TerminalDisplay	typeref:typename:QList<QAction * >
filterActions	lib/qtermwidget.cpp	/^QList<QAction*> QTermWidget::filterActions(const QPoint& position)$/;"	f	class:QTermWidget	typeref:typename:QList<QAction * >
filterChain	lib/TerminalDisplay.cpp	/^FilterChain* TerminalDisplay::filterChain() const$/;"	f	class:TerminalDisplay	typeref:typename:FilterChain *
find	lib/qtermwidget.cpp	/^void QTermWidget::find()$/;"	f	class:QTermWidget	typeref:typename:void
findColorScheme	lib/ColorScheme.cpp	/^const ColorScheme* ColorSchemeManager::findColorScheme(const QString& name)$/;"	f	class:ColorSchemeManager	typeref:typename:const ColorScheme *
findColorSchemePath	lib/ColorScheme.cpp	/^QString ColorSchemeManager::findColorSchemePath(const QString& name) const$/;"	f	class:ColorSchemeManager	typeref:typename:QString
findEntry	lib/KeyboardTranslator.cpp	/^KeyboardTranslator::Entry KeyboardTranslator::findEntry(int keyCode, Qt::KeyboardModifiers modif/;"	f	class:KeyboardTranslator	typeref:typename:KeyboardTranslator::Entry
findLineNumberInString	lib/HistorySearch.cpp	/^int HistorySearch::findLineNumberInString(QList<int> linePositions, int position) {$/;"	f	class:HistorySearch	typeref:typename:int
findNext	lib/qtermwidget.cpp	/^void QTermWidget::findNext()$/;"	f	class:QTermWidget	typeref:typename:void
findPrevious	lib/qtermwidget.cpp	/^void QTermWidget::findPrevious()$/;"	f	class:QTermWidget	typeref:typename:void
findTranslator	lib/KeyboardTranslator.cpp	/^const KeyboardTranslator* KeyboardTranslatorManager::findTranslator(const QString& name)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:const KeyboardTranslator *
findTranslatorPath	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslatorManager::findTranslatorPath(const QString& name)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:QString
findTranslators	lib/KeyboardTranslator.cpp	/^void KeyboardTranslatorManager::findTranslators()$/;"	f	class:KeyboardTranslatorManager	typeref:typename:void
finishOpen	lib/kptydevice.cpp	/^void KPtyDevicePrivate::finishOpen(QIODevice::OpenMode mode)$/;"	f	class:KPtyDevicePrivate	typeref:typename:void
flowControlEnabled	lib/Pty.cpp	/^bool Pty::flowControlEnabled() const$/;"	f	class:Pty	typeref:typename:bool
flowControlEnabled	lib/Session.cpp	/^bool Session::flowControlEnabled() const$/;"	f	class:Session	typeref:typename:bool
flowControlEnabled	lib/qtermwidget.cpp	/^bool QTermWidget::flowControlEnabled(void)$/;"	f	class:QTermWidget	typeref:typename:bool
flowControlWarningEnabled	lib/TerminalDisplay.h	/^    bool flowControlWarningEnabled() const$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
focusGained	lib/Vt102Emulation.cpp	/^void Vt102Emulation::focusGained(void)$/;"	f	class:Vt102Emulation	typeref:typename:void
focusInEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::focusInEvent(QFocusEvent*)$/;"	f	class:TerminalDisplay	typeref:typename:void
focusLost	lib/Vt102Emulation.cpp	/^void Vt102Emulation::focusLost(void)$/;"	f	class:Vt102Emulation	typeref:typename:void
focusNextPrevChild	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::focusNextPrevChild( bool next )$/;"	f	class:TerminalDisplay	typeref:typename:bool
focusOutEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::focusOutEvent(QFocusEvent*)$/;"	f	class:TerminalDisplay	typeref:typename:void
fontChange	lib/TerminalDisplay.cpp	/^void TerminalDisplay::fontChange(const QFont&)$/;"	f	class:TerminalDisplay	typeref:typename:void
fontHeight	lib/TerminalDisplay.h	/^    int  fontHeight()   { return _fontHeight;   }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:int
fontWeight	lib/Character.h	/^inline ColorEntry::FontWeight Character::fontWeight(const ColorEntry* base) const$/;"	f	class:Konsole::Character	typeref:typename:ColorEntry::FontWeight
fontWeight	lib/CharacterColor.h	/^  FontWeight fontWeight;$/;"	m	class:Konsole::ColorEntry	typeref:typename:FontWeight
fontWidth	lib/TerminalDisplay.h	/^    int  fontWidth()    { return _fontWidth; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:int
foreground	lib/Screen.h	/^        CharacterColor foreground;$/;"	m	class:Konsole::Screen::SavedState	typeref:typename:CharacterColor
foregroundColor	lib/Character.h	/^  CharacterColor  foregroundColor;$/;"	m	class:Konsole::Character	typeref:typename:CharacterColor
foregroundColor	lib/ColorScheme.cpp	/^QColor ColorScheme::foregroundColor() const$/;"	f	class:ColorScheme	typeref:typename:QColor
foregroundProcessGroup	lib/Pty.cpp	/^int Pty::foregroundProcessGroup() const$/;"	f	class:Pty	typeref:typename:int
foregroundProcessId	lib/Session.cpp	/^int Session::foregroundProcessId() const$/;"	f	class:Session	typeref:typename:int
formatArray	lib/History.h	/^  CharacterFormat* formatArray;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:CharacterFormat *
formatLength	lib/History.h	/^  quint16 formatLength;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:quint16
forwardStd	lib/kprocess.cpp	/^void KProcessPrivate::forwardStd(KProcess::ProcessChannel good, int fd)$/;"	f	class:KProcessPrivate	typeref:typename:void
free	lib/kptydevice.h	/^    void free(int bytes)$/;"	f	class:KRingBuffer	typeref:typename:void
fullCommand	lib/ShellCommand.cpp	/^QString ShellCommand::fullCommand() const$/;"	f	class:ShellCommand	typeref:typename:QString
get	lib/History.cpp	/^void HistoryFile::get(unsigned char* bytes, int len, int loc)$/;"	f	class:HistoryFile	typeref:typename:void
getBoldIntense	lib/TerminalDisplay.h	/^    bool getBoldIntense() { return _boldIntense; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
getCell	lib/History.h	/^  Character   getCell(int lineno, int colno) { Character res; getCells(lineno,colno,1,&res); ret/;"	f	class:Konsole::HistoryScroll	typeref:typename:Character
getCells	lib/History.cpp	/^void CompactHistoryScroll::getCells ( int lineNumber, int startColumn, int count, Character buff/;"	f	class:CompactHistoryScroll	typeref:typename:void
getCells	lib/History.cpp	/^void HistoryScrollBlockArray::getCells(int lineno, int colno,$/;"	f	class:HistoryScrollBlockArray	typeref:typename:void
getCells	lib/History.cpp	/^void HistoryScrollBuffer::getCells(int lineNumber, int startColumn, int count, Character buffer[/;"	f	class:HistoryScrollBuffer	typeref:typename:void
getCells	lib/History.cpp	/^void HistoryScrollFile::getCells(int lineno, int colno, int count, Character res[])$/;"	f	class:HistoryScrollFile	typeref:typename:void
getCells	lib/History.cpp	/^void HistoryScrollNone::getCells(int, int, int, Character [])$/;"	f	class:HistoryScrollNone	typeref:typename:void
getCharacter	lib/History.cpp	/^void CompactHistoryLine::getCharacter ( int index, Character &r )$/;"	f	class:CompactHistoryLine	typeref:typename:void
getCharacterPosition	lib/TerminalDisplay.cpp	/^void TerminalDisplay::getCharacterPosition(const QPoint& widgetPoint,int& line,int& column) cons/;"	f	class:TerminalDisplay	typeref:typename:void
getCharacters	lib/History.cpp	/^void CompactHistoryLine::getCharacters ( Character* array, int length, int startColumn )$/;"	f	class:CompactHistoryLine	typeref:typename:void
getColorTable	lib/ColorScheme.cpp	/^void ColorScheme::getColorTable(ColorEntry* table , uint randomSeed) const$/;"	f	class:ColorScheme	typeref:typename:void
getColumns	lib/Screen.h	/^    int getColumns() const$/;"	f	class:Konsole::Screen	typeref:typename:int
getCurrent	lib/BlockArray.h	/^    size_t getCurrent() const {$/;"	f	class:Konsole::BlockArray	typeref:typename:size_t
getCursorX	lib/Screen.cpp	/^int Screen::getCursorX() const$/;"	f	class:Screen	typeref:typename:int
getCursorY	lib/Screen.cpp	/^int Screen::getCursorY() const$/;"	f	class:Screen	typeref:typename:int
getEnv	pyqt/config.py	/^	def getEnv(self,name, default):$/;"	m	class:Configuration
getFileName	lib/History.cpp	/^const QString& HistoryTypeFile::getFileName() const$/;"	f	class:HistoryTypeFile	typeref:typename:const QString &
getHistLines	lib/Screen.cpp	/^int Screen::getHistLines() const$/;"	f	class:Screen	typeref:typename:int
getHotSpotAt	lib/qtermwidget.cpp	/^Filter::HotSpot* QTermWidget::getHotSpotAt(const QPoint &pos) const$/;"	f	class:QTermWidget	typeref:typename:Filter::HotSpot *
getHotSpotAt	lib/qtermwidget.cpp	/^Filter::HotSpot* QTermWidget::getHotSpotAt(int row, int column) const$/;"	f	class:QTermWidget	typeref:typename:Filter::HotSpot *
getImage	lib/Screen.cpp	/^void Screen::getImage( Character* dest, int size, int startLine, int endLine ) const$/;"	f	class:Screen	typeref:typename:void
getImage	lib/ScreenWindow.cpp	/^Character* ScreenWindow::getImage()$/;"	f	class:ScreenWindow	typeref:typename:Character *
getLength	lib/History.h	/^  virtual unsigned int getLength() const {return length;};$/;"	f	class:Konsole::CompactHistoryLine	typeref:typename:unsigned int
getLineColumn	lib/Filter.cpp	/^void Filter::getLineColumn(int position , int& startLine , int& startColumn)$/;"	f	class:Filter	typeref:typename:void
getLineLen	lib/History.cpp	/^int  HistoryScrollBlockArray::getLineLen(int lineno)$/;"	f	class:HistoryScrollBlockArray	typeref:typename:int
getLineLen	lib/History.cpp	/^int  HistoryScrollNone::getLineLen(int)$/;"	f	class:HistoryScrollNone	typeref:typename:int
getLineLen	lib/History.cpp	/^int CompactHistoryScroll::getLineLen ( int lineNumber )$/;"	f	class:CompactHistoryScroll	typeref:typename:int
getLineLen	lib/History.cpp	/^int HistoryScrollBuffer::getLineLen(int lineNumber)$/;"	f	class:HistoryScrollBuffer	typeref:typename:int
getLineLen	lib/History.cpp	/^int HistoryScrollFile::getLineLen(int lineno)$/;"	f	class:HistoryScrollFile	typeref:typename:int
getLineProperties	lib/Screen.cpp	/^QVector<LineProperty> Screen::getLineProperties( int startLine , int endLine ) const$/;"	f	class:Screen	typeref:typename:QVector<LineProperty>
getLineProperties	lib/ScreenWindow.cpp	/^QVector<LineProperty> ScreenWindow::getLineProperties()$/;"	f	class:ScreenWindow	typeref:typename:QVector<LineProperty>
getLines	lib/History.cpp	/^int  HistoryScrollBlockArray::getLines()$/;"	f	class:HistoryScrollBlockArray	typeref:typename:int
getLines	lib/History.cpp	/^int  HistoryScrollNone::getLines()$/;"	f	class:HistoryScrollNone	typeref:typename:int
getLines	lib/History.cpp	/^int CompactHistoryScroll::getLines()$/;"	f	class:CompactHistoryScroll	typeref:typename:int
getLines	lib/History.cpp	/^int HistoryScrollBuffer::getLines()$/;"	f	class:HistoryScrollBuffer	typeref:typename:int
getLines	lib/History.cpp	/^int HistoryScrollFile::getLines()$/;"	f	class:HistoryScrollFile	typeref:typename:int
getLines	lib/Screen.h	/^    int getLines() const$/;"	f	class:Konsole::Screen	typeref:typename:int
getMode	lib/Screen.cpp	/^bool Screen::getMode(int m) const$/;"	f	class:Screen	typeref:typename:bool
getMode	lib/Vt102Emulation.cpp	/^bool Vt102Emulation::getMode(int m)$/;"	f	class:Vt102Emulation	typeref:typename:bool
getPtySlaveFd	lib/Session.cpp	/^int Session::getPtySlaveFd() const$/;"	f	class:Session	typeref:typename:int
getPtySlaveFd	lib/qtermwidget.cpp	/^int QTermWidget::getPtySlaveFd() const$/;"	f	class:QTermWidget	typeref:typename:int
getScroll	lib/Screen.cpp	/^const HistoryType& Screen::getScroll() const$/;"	f	class:Screen	typeref:typename:const HistoryType &
getSelectionEnd	lib/Screen.cpp	/^void Screen::getSelectionEnd(int& column , int& line) const$/;"	f	class:Screen	typeref:typename:void
getSelectionEnd	lib/ScreenWindow.cpp	/^void ScreenWindow::getSelectionEnd( int& column , int& line )$/;"	f	class:ScreenWindow	typeref:typename:void
getSelectionEnd	lib/qtermwidget.cpp	/^void QTermWidget::getSelectionEnd(int& row, int& column)$/;"	f	class:QTermWidget	typeref:typename:void
getSelectionStart	lib/Screen.cpp	/^void Screen::getSelectionStart(int& column , int& line) const$/;"	f	class:Screen	typeref:typename:void
getSelectionStart	lib/ScreenWindow.cpp	/^void ScreenWindow::getSelectionStart( int& column , int& line )$/;"	f	class:ScreenWindow	typeref:typename:void
getSelectionStart	lib/qtermwidget.cpp	/^void QTermWidget::getSelectionStart(int& row, int& column)$/;"	f	class:QTermWidget	typeref:typename:void
getShellPID	lib/qtermwidget.cpp	/^int QTermWidget::getShellPID()$/;"	f	class:QTermWidget	typeref:typename:int
getTerminalFont	lib/qtermwidget.cpp	/^QFont QTermWidget::getTerminalFont()$/;"	f	class:QTermWidget	typeref:typename:QFont
getType	lib/History.h	/^  const HistoryType& getType() { return *m_histType; }$/;"	f	class:Konsole::HistoryScroll	typeref:typename:const HistoryType &
getUrlObject	lib/Filter.cpp	/^FilterObject* UrlFilter::HotSpot::getUrlObject() const$/;"	f	class:UrlFilter::HotSpot	typeref:typename:FilterObject *
getVTFont	lib/TerminalDisplay.h	/^    QFont getVTFont() { return font(); }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:QFont
get_color_schemes_dirs	lib/tools.cpp	/^const QStringList get_color_schemes_dirs()$/;"	f	typeref:typename:const QStringList
get_kb_layout_dir	lib/tools.cpp	/^QString get_kb_layout_dir()$/;"	f	typeref:typename:QString
graphic	lib/Vt102Emulation.h	/^  bool graphic;    \/\/ Some VT100 tricks$/;"	m	struct:Konsole::CharCodes	typeref:typename:bool
handleShortcutOverrideEvent	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::handleShortcutOverrideEvent(QKeyEvent* keyEvent)$/;"	f	class:TerminalDisplay	typeref:typename:bool
has	lib/BlockArray.cpp	/^bool BlockArray::has(size_t i) const$/;"	f	class:BlockArray	typeref:typename:bool
hasDarkBackground	lib/ColorScheme.cpp	/^bool ColorScheme::hasDarkBackground() const$/;"	f	class:ColorScheme	typeref:typename:bool
hasDarkBackground	lib/Session.cpp	/^bool Session::hasDarkBackground() const$/;"	f	class:Session	typeref:typename:bool
hasNextEntry	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::hasNextEntry()$/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
hasScroll	lib/History.cpp	/^bool HistoryScroll::hasScroll()$/;"	f	class:HistoryScroll	typeref:typename:bool
hasScroll	lib/History.cpp	/^bool HistoryScrollNone::hasScroll()$/;"	f	class:HistoryScrollNone	typeref:typename:bool
hasScroll	lib/Screen.cpp	/^bool Screen::hasScroll() const$/;"	f	class:Screen	typeref:typename:bool
head	lib/History.h	/^  quint8* head;$/;"	m	class:Konsole::CompactHistoryBlock	typeref:typename:quint8 *
head	lib/kptydevice.h	/^    int head, tail;$/;"	m	class:KRingBuffer	typeref:typename:int
helpAlign	lib/Screen.cpp	/^void Screen::helpAlign()$/;"	f	class:Screen	typeref:typename:void
hexdump	lib/Vt102Emulation.cpp	/^static void hexdump(int* s, int len)$/;"	f	typeref:typename:void	file:
hideEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::hideEvent(QHideEvent*)$/;"	f	class:TerminalDisplay	typeref:typename:void
highlightAllMatches	lib/SearchBar.cpp	/^bool SearchBar::highlightAllMatches()$/;"	f	class:SearchBar	typeref:typename:bool
history	lib/Emulation.cpp	/^const HistoryType& Emulation::history() const$/;"	f	class:Emulation	typeref:typename:const HistoryType &
history	lib/Screen.h	/^    HistoryScroll* history;$/;"	m	class:Konsole::Screen	typeref:typename:HistoryScroll *
historyLinesCount	lib/qtermwidget.cpp	/^int QTermWidget::historyLinesCount()$/;"	f	class:QTermWidget	typeref:typename:int
historyType	lib/Session.cpp	/^const HistoryType & Session::historyType() const$/;"	f	class:Session	typeref:typename:const HistoryType &
home	lib/Screen.cpp	/^void Screen::home()$/;"	f	class:Screen	typeref:typename:void
hotSpotAt	lib/Filter.cpp	/^Filter::HotSpot* Filter::hotSpotAt(int line , int column) const$/;"	f	class:Filter	typeref:typename:Filter::HotSpot *
hotSpotAt	lib/Filter.cpp	/^Filter::HotSpot* FilterChain::hotSpotAt(int line , int column) const$/;"	f	class:FilterChain	typeref:typename:Filter::HotSpot *
hotSpotRegion	lib/TerminalDisplay.cpp	/^QRegion TerminalDisplay::hotSpotRegion() const$/;"	f	class:TerminalDisplay	typeref:typename:QRegion
hotSpots	lib/Filter.cpp	/^QList<Filter::HotSpot*> Filter::hotSpots() const$/;"	f	class:Filter	typeref:typename:QList<Filter::HotSpot * >
hotSpots	lib/Filter.cpp	/^QList<Filter::HotSpot*> FilterChain::hotSpots() const$/;"	f	class:FilterChain	typeref:typename:QList<Filter::HotSpot * >
hotSpotsAtLine	lib/Filter.cpp	/^QList<Filter::HotSpot*> Filter::hotSpotsAtLine(int line) const$/;"	f	class:Filter	typeref:typename:QList<Filter::HotSpot * >
hue	lib/ColorScheme.h	/^        quint16 hue;$/;"	m	class:Konsole::ColorScheme::RandomizationRange	typeref:typename:quint16
icon	lib/qtermwidget.cpp	/^QString QTermWidget::icon() const$/;"	f	class:QTermWidget	typeref:typename:QString
iconName	lib/Session.cpp	/^QString Session::iconName() const$/;"	f	class:Session	typeref:typename:QString
iconText	lib/Session.cpp	/^QString Session::iconText() const$/;"	f	class:Session	typeref:typename:QString
imageSize	lib/Emulation.cpp	/^QSize Emulation::imageSize() const$/;"	f	class:Emulation	typeref:typename:QSize
imageToWidget	lib/TerminalDisplay.cpp	/^QRect TerminalDisplay::imageToWidget(const QRect& imageArea) const$/;"	f	class:TerminalDisplay	typeref:typename:QRect
increaseBuffer	lib/BlockArray.cpp	/^void BlockArray::increaseBuffer()$/;"	f	class:BlockArray	typeref:typename:void
index	lib/BlockArray.h	/^    size_t index;$/;"	m	class:Konsole::BlockArray	typeref:typename:size_t
index	lib/History.h	/^  HistoryFile index; \/\/ lines Row(int)$/;"	m	class:Konsole::HistoryScrollFile	typeref:typename:HistoryFile
index	lib/Screen.cpp	/^void Screen::index()$/;"	f	class:Screen	typeref:typename:void
indexAfter	lib/kptydevice.h	/^    int indexAfter(char c, int maxLength = KMAXINT) const$/;"	f	class:KRingBuffer	typeref:typename:int
init	lib/Pty.cpp	/^void Pty::init()$/;"	f	class:Pty	typeref:typename:void
init	lib/qtermwidget.cpp	/^void QTermWidget::init(int startnow)$/;"	f	class:QTermWidget	typeref:typename:void
initTabStops	lib/Screen.cpp	/^void Screen::initTabStops()$/;"	f	class:Screen	typeref:typename:void
initTokenizer	lib/Vt102Emulation.cpp	/^void Vt102Emulation::initTokenizer()$/;"	f	class:Vt102Emulation	typeref:typename:void
initialWorkingDirectory	lib/Session.h	/^    QString initialWorkingDirectory() {$/;"	f	class:Konsole::Session	typeref:typename:QString
inputMethodEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::inputMethodEvent( QInputMethodEvent* event )$/;"	f	class:TerminalDisplay	typeref:typename:void
inputMethodQuery	lib/TerminalDisplay.cpp	/^QVariant TerminalDisplay::inputMethodQuery( Qt::InputMethodQuery query ) const$/;"	f	class:TerminalDisplay	typeref:typename:QVariant
insertChars	lib/Screen.cpp	/^void Screen::insertChars(int n)$/;"	f	class:Screen	typeref:typename:void
insertLines	lib/Screen.cpp	/^void Screen::insertLines(int n)$/;"	f	class:Screen	typeref:typename:void
insertModifier	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::Entry::insertModifier( QString& item , int modifier ) const$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:void
insertState	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::Entry::insertState( QString& item , int state ) const$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:void
installs	pyqt/config-old.py	/^installs = []$/;"	v
installs	pyqt/config.py	/^installs = []$/;"	v
instance	lib/Character.h	/^    static ExtendedCharTable instance;$/;"	m	class:Konsole::ExtendedCharTable	typeref:typename:ExtendedCharTable
instance	lib/Emulation.cpp	/^ExtendedCharTable ExtendedCharTable::instance;$/;"	m	class:ExtendedCharTable	typeref:typename:ExtendedCharTable
ion	lib/BlockArray.h	/^    int ion;$/;"	m	class:Konsole::BlockArray	typeref:typename:int
ion	lib/History.h	/^  int  ion;$/;"	m	class:Konsole::HistoryFile	typeref:typename:int
isAvailable	lib/ShellCommand.cpp	/^bool ShellCommand::isAvailable() const$/;"	f	class:ShellCommand	typeref:typename:bool
isBidiEnabled	lib/TerminalDisplay.h	/^    bool isBidiEnabled() { return _bidiEnabled; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
isEmpty	lib/kptydevice.h	/^    inline bool isEmpty() const$/;"	f	class:KRingBuffer	typeref:typename:bool
isEnabled	lib/History.cpp	/^bool CompactHistoryType::isEnabled() const$/;"	f	class:CompactHistoryType	typeref:typename:bool
isEnabled	lib/History.cpp	/^bool HistoryTypeBlockArray::isEnabled() const$/;"	f	class:HistoryTypeBlockArray	typeref:typename:bool
isEnabled	lib/History.cpp	/^bool HistoryTypeBuffer::isEnabled() const$/;"	f	class:HistoryTypeBuffer	typeref:typename:bool
isEnabled	lib/History.cpp	/^bool HistoryTypeFile::isEnabled() const$/;"	f	class:HistoryTypeFile	typeref:typename:bool
isEnabled	lib/History.cpp	/^bool HistoryTypeNone::isEnabled() const$/;"	f	class:HistoryTypeNone	typeref:typename:bool
isInUse	lib/History.h	/^  virtual bool isInUse(){ return allocCount!=0; } ;$/;"	f	class:Konsole::CompactHistoryBlock	typeref:typename:bool
isLineChar	lib/TerminalDisplay.cpp	/^static inline bool isLineChar(quint16 c) { return ((c & 0xFF80) == 0x2500);}$/;"	f	typeref:typename:bool	file:
isLineCharString	lib/TerminalDisplay.cpp	/^static inline bool isLineCharString(const QString& string)$/;"	f	typeref:typename:bool	file:
isMapped	lib/History.cpp	/^bool HistoryFile::isMapped()$/;"	f	class:HistoryFile	typeref:typename:bool
isMonitorActivity	lib/Session.cpp	/^bool Session::isMonitorActivity() const$/;"	f	class:Session	typeref:typename:bool
isMonitorSilence	lib/Session.cpp	/^bool Session::isMonitorSilence()  const$/;"	f	class:Session	typeref:typename:bool
isNull	lib/ColorScheme.h	/^        bool isNull() const$/;"	f	class:Konsole::ColorScheme::RandomizationRange	typeref:typename:bool
isNull	lib/KeyboardTranslator.h	/^inline bool KeyboardTranslator::Entry::isNull() const$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:bool
isRootCommand	lib/ShellCommand.cpp	/^bool ShellCommand::isRootCommand() const$/;"	f	class:ShellCommand	typeref:typename:bool
isRunning	lib/Session.cpp	/^bool Session::isRunning() const$/;"	f	class:Session	typeref:typename:bool
isRunning	lib/kptyprocess.h	/^    bool isRunning() const$/;"	f	class:KPtyProcess	typeref:typename:bool
isSelected	lib/Screen.cpp	/^bool Screen::isSelected( const int x,const int y) const$/;"	f	class:Screen	typeref:typename:bool
isSelected	lib/ScreenWindow.cpp	/^bool ScreenWindow::isSelected( int column , int line )$/;"	f	class:ScreenWindow	typeref:typename:bool
isSelectionValid	lib/Screen.cpp	/^bool Screen::isSelectionValid() const$/;"	f	class:Screen	typeref:typename:bool
isSequential	lib/kptydevice.cpp	/^bool KPtyDevice::isSequential() const$/;"	f	class:KPtyDevice	typeref:typename:bool
isSuspended	lib/kptydevice.cpp	/^bool KPtyDevice::isSuspended() const$/;"	f	class:KPtyDevice	typeref:typename:bool
isTitleChanged	lib/Session.cpp	/^bool Session::isTitleChanged() const$/;"	f	class:Session	typeref:typename:bool
isTitleChanged	lib/qtermwidget.cpp	/^bool QTermWidget::isTitleChanged() const$/;"	f	class:QTermWidget	typeref:typename:bool
isTransparent	lib/Character.h	/^inline bool Character::isTransparent(const ColorEntry* base) const$/;"	f	class:Konsole::Character	typeref:typename:bool
isUnlimited	lib/History.h	/^  bool isUnlimited() const { return maximumLineCount() == 0; }$/;"	f	class:Konsole::HistoryType	typeref:typename:bool
isUseUtmp	lib/kptyprocess.cpp	/^bool KPtyProcess::isUseUtmp() const$/;"	f	class:KPtyProcess	typeref:typename:bool
isValid	lib/CharacterColor.h	/^  bool isValid()$/;"	f	class:Konsole::CharacterColor	typeref:typename:bool
isWrapped	lib/History.h	/^  virtual bool isWrapped() const {return wrapped;};$/;"	f	class:Konsole::CompactHistoryLine	typeref:typename:bool
isWrappedLine	lib/History.cpp	/^bool CompactHistoryScroll::isWrappedLine ( int lineNumber )$/;"	f	class:CompactHistoryScroll	typeref:typename:bool
isWrappedLine	lib/History.cpp	/^bool HistoryScrollBlockArray::isWrappedLine(int \/*lineno*\/)$/;"	f	class:HistoryScrollBlockArray	typeref:typename:bool
isWrappedLine	lib/History.cpp	/^bool HistoryScrollBuffer::isWrappedLine(int lineNumber)$/;"	f	class:HistoryScrollBuffer	typeref:typename:bool
isWrappedLine	lib/History.cpp	/^bool HistoryScrollFile::isWrappedLine(int lineno)$/;"	f	class:HistoryScrollFile	typeref:typename:bool
isWrappedLine	lib/History.cpp	/^bool HistoryScrollNone::isWrappedLine(int \/*lineno*\/)$/;"	f	class:HistoryScrollNone	typeref:typename:bool
keyBindings	lib/Emulation.cpp	/^QString Emulation::keyBindings() const$/;"	f	class:Emulation	typeref:typename:QString
keyBindings	lib/Session.cpp	/^QString Session::keyBindings() const$/;"	f	class:Session	typeref:typename:QString
keyBindings	lib/qtermwidget.cpp	/^QString QTermWidget::keyBindings()$/;"	f	class:QTermWidget	typeref:typename:QString
keyCode	lib/KeyboardTranslator.h	/^inline int KeyboardTranslator::Entry::keyCode() const { return _keyCode; }$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:int
keyPressEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::keyPressEvent( QKeyEvent* event )$/;"	f	class:TerminalDisplay	typeref:typename:void
keyReleaseEvent	lib/SearchBar.cpp	/^void SearchBar::keyReleaseEvent(QKeyEvent* keyEvent)$/;"	f	class:SearchBar	typeref:typename:void
keyboardCursorColor	lib/TerminalDisplay.cpp	/^QColor TerminalDisplay::keyboardCursorColor() const$/;"	f	class:TerminalDisplay	typeref:typename:QColor
keyboardCursorShape	lib/TerminalDisplay.cpp	/^QTermWidget::KeyboardCursorShape TerminalDisplay::keyboardCursorShape() const$/;"	f	class:TerminalDisplay	typeref:typename:QTermWidget::KeyboardCursorShape
konsole_wcwidth	lib/konsole_wcwidth.cpp	/^int konsole_wcwidth(wchar_t ucs)$/;"	f	typeref:typename:int
kpty_h	lib/kpty.h	/^#define kpty_h$/;"	d
kpty_p_h	lib/kpty_p.h	/^#define kpty_p_h$/;"	d
kptydev_h	lib/kptydevice.h	/^#define kptydev_h$/;"	d
lastBlock	lib/BlockArray.cpp	/^Block * BlockArray::lastBlock() const$/;"	f	class:BlockArray	typeref:typename:Block *
lastPos	lib/Screen.h	/^    int lastPos;$/;"	m	class:Konsole::Screen	typeref:typename:int
lastScrolledRegion	lib/Screen.cpp	/^QRect Screen::lastScrolledRegion() const$/;"	f	class:Screen	typeref:typename:QRect
lastSessionId	lib/Session.cpp	/^int Session::lastSessionId = 0;$/;"	m	class:Session	typeref:typename:int
lastSessionId	lib/Session.h	/^    static int lastSessionId;$/;"	m	class:Konsole::Session	typeref:typename:int
lastblock	lib/BlockArray.h	/^    Block * lastblock;$/;"	m	class:Konsole::BlockArray	typeref:typename:Block *
lastmap	lib/BlockArray.h	/^    Block * lastmap;$/;"	m	class:Konsole::BlockArray	typeref:typename:Block *
lastmap_index	lib/BlockArray.h	/^    size_t lastmap_index;$/;"	m	class:Konsole::BlockArray	typeref:typename:size_t
lec	lib/Vt102Emulation.cpp	/^#define lec(/;"	d	file:
len	lib/BlockArray.h	/^    size_t len() const {$/;"	f	class:Konsole::BlockArray	typeref:typename:size_t
len	lib/History.cpp	/^int HistoryFile::len()$/;"	f	class:HistoryFile	typeref:typename:int
length	lib/BlockArray.h	/^    size_t length;$/;"	m	class:Konsole::BlockArray	typeref:typename:size_t
length	lib/History.h	/^  int  length;$/;"	m	class:Konsole::HistoryFile	typeref:typename:int
length	lib/History.h	/^  int length() {return list.size();}$/;"	f	class:Konsole::CompactHistoryBlockList	typeref:typename:int
length	lib/History.h	/^  quint16 length;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:quint16
length	lib/History.h	/^  virtual unsigned  length() { return blockLength; }$/;"	f	class:Konsole::CompactHistoryBlock	typeref:typename:unsigned
les	lib/Vt102Emulation.cpp	/^#define les(/;"	d	file:
libname	qtermwidget.spec	/^%define libname libqtermwidget0$/;"	m
lineCount	lib/Emulation.cpp	/^int Emulation::lineCount() const$/;"	f	class:Emulation	typeref:typename:int
lineCount	lib/ScreenWindow.cpp	/^int ScreenWindow::lineCount() const$/;"	f	class:ScreenWindow	typeref:typename:int
linePositions	lib/TerminalCharacterDecoder.cpp	/^QList<int> PlainTextDecoder::linePositions() const$/;"	f	class:PlainTextDecoder	typeref:typename:QList<int>
lineProperties	lib/Screen.h	/^    QVarLengthArray<LineProperty,64> lineProperties;$/;"	m	class:Konsole::Screen	typeref:typename:QVarLengthArray<LineProperty,64>
lineSize	lib/kptydevice.h	/^    inline int lineSize(int maxLength = KMAXINT) const$/;"	f	class:KRingBuffer	typeref:typename:int
lineSpacing	lib/TerminalDisplay.cpp	/^uint TerminalDisplay::lineSpacing() const$/;"	f	class:TerminalDisplay	typeref:typename:uint
lineflags	lib/History.h	/^  HistoryFile lineflags; \/\/ flags Row(unsigned char)$/;"	m	class:Konsole::HistoryScrollFile	typeref:typename:HistoryFile
lines	lib/History.h	/^  HistoryArray lines;$/;"	m	class:Konsole::CompactHistoryScroll	typeref:typename:HistoryArray
lines	lib/Screen.h	/^    int lines;$/;"	m	class:Konsole::Screen	typeref:typename:int
lines	lib/TerminalDisplay.h	/^    int  lines()   { return _lines;   }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:int
list	lib/History.h	/^  QList<CompactHistoryBlock*> list;$/;"	m	class:Konsole::CompactHistoryBlockList	typeref:typename:QList<CompactHistoryBlock * >
listColorSchemes	lib/ColorScheme.cpp	/^QList<QString> ColorSchemeManager::listColorSchemes()$/;"	f	class:ColorSchemeManager	typeref:typename:QList<QString>
listKDE3ColorSchemes	lib/ColorScheme.cpp	/^QList<QString> ColorSchemeManager::listKDE3ColorSchemes()$/;"	f	class:ColorSchemeManager	typeref:typename:QList<QString>
loadAllColorSchemes	lib/ColorScheme.cpp	/^void ColorSchemeManager::loadAllColorSchemes()$/;"	f	class:ColorSchemeManager	typeref:typename:void
loadColorScheme	lib/ColorScheme.cpp	/^bool ColorSchemeManager::loadColorScheme(const QString& filePath)$/;"	f	class:ColorSchemeManager	typeref:typename:bool
loadCustomColorScheme	lib/ColorScheme.cpp	/^bool ColorSchemeManager::loadCustomColorScheme(const QString& path)$/;"	f	class:ColorSchemeManager	typeref:typename:bool
loadKDE3ColorScheme	lib/ColorScheme.cpp	/^bool ColorSchemeManager::loadKDE3ColorScheme(const QString& filePath)$/;"	f	class:ColorSchemeManager	typeref:typename:bool
loadTranslator	lib/KeyboardTranslator.cpp	/^KeyboardTranslator* KeyboardTranslatorManager::loadTranslator(QIODevice* source,const QString& n/;"	f	class:KeyboardTranslatorManager	typeref:typename:KeyboardTranslator *
loadTranslator	lib/KeyboardTranslator.cpp	/^KeyboardTranslator* KeyboardTranslatorManager::loadTranslator(const QString& name)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:KeyboardTranslator *
loc	lib/Screen.cpp	/^#define loc(/;"	d	file:
loc	lib/TerminalDisplay.cpp	/^#define loc(/;"	d	file:
lockPty	lib/Pty.cpp	/^void Pty::lockPty(bool lock)$/;"	f	class:Pty	typeref:typename:void
login	lib/kpty.cpp	/^void KPty::login(const char * user, const char * remotehost)$/;"	f	class:KPty	typeref:typename:void
logout	lib/kpty.cpp	/^void KPty::logout()$/;"	f	class:KPty	typeref:typename:void
lookupExtendedChar	lib/Emulation.cpp	/^ushort* ExtendedCharTable::lookupExtendedChar(ushort hash , ushort& length) const$/;"	f	class:ExtendedCharTable	typeref:typename:ushort *
lun	lib/Vt102Emulation.cpp	/^#define lun(/;"	d	file:
mMotionAfterPasting	lib/TerminalDisplay.h	/^    MotionAfterPasting mMotionAfterPasting;$/;"	m	class:Konsole::TerminalDisplay	typeref:typename:MotionAfterPasting
m_blockArray	lib/History.h	/^  BlockArray m_blockArray;$/;"	m	class:Konsole::HistoryScrollBlockArray	typeref:typename:BlockArray
m_emulation	lib/HistorySearch.h	/^    EmulationPtr m_emulation;$/;"	m	class:HistorySearch	typeref:typename:EmulationPtr
m_fileName	lib/History.h	/^  QString m_fileName;$/;"	m	class:Konsole::HistoryTypeFile	typeref:typename:QString
m_forwards	lib/HistorySearch.h	/^    bool m_forwards;$/;"	m	class:HistorySearch	typeref:typename:bool
m_foundEndColumn	lib/HistorySearch.h	/^    int m_foundEndColumn;$/;"	m	class:HistorySearch	typeref:typename:int
m_foundEndLine	lib/HistorySearch.h	/^    int m_foundEndLine;$/;"	m	class:HistorySearch	typeref:typename:int
m_foundStartColumn	lib/HistorySearch.h	/^    int m_foundStartColumn;$/;"	m	class:HistorySearch	typeref:typename:int
m_foundStartLine	lib/HistorySearch.h	/^    int m_foundStartLine;$/;"	m	class:HistorySearch	typeref:typename:int
m_highlightMatchesMenuEntry	lib/SearchBar.h	/^    QAction *m_highlightMatchesMenuEntry;$/;"	m	class:SearchBar	typeref:typename:QAction *
m_histType	lib/History.h	/^  HistoryType* m_histType;$/;"	m	class:Konsole::HistoryScroll	typeref:typename:HistoryType *
m_impl	lib/qtermwidget.h	/^    TermWidgetImpl * m_impl;$/;"	m	class:QTermWidget	typeref:typename:TermWidgetImpl *
m_layout	lib/qtermwidget.h	/^    QVBoxLayout *m_layout;$/;"	m	class:QTermWidget	typeref:typename:QVBoxLayout *
m_lineLengths	lib/History.h	/^  QHash<int,size_t> m_lineLengths;$/;"	m	class:Konsole::HistoryScrollBlockArray	typeref:typename:QHash<int,size_t>
m_logFileName	lib/History.h	/^  QString m_logFileName;$/;"	m	class:Konsole::HistoryScrollFile	typeref:typename:QString
m_matchCaseMenuEntry	lib/SearchBar.h	/^    QAction *m_matchCaseMenuEntry;$/;"	m	class:SearchBar	typeref:typename:QAction *
m_nbLines	lib/History.h	/^  unsigned int m_nbLines;$/;"	m	class:Konsole::CompactHistoryType	typeref:typename:unsigned int
m_nbLines	lib/History.h	/^  unsigned int m_nbLines;$/;"	m	class:Konsole::HistoryTypeBuffer	typeref:typename:unsigned int
m_regExp	lib/HistorySearch.h	/^    QRegExp m_regExp;$/;"	m	class:HistorySearch	typeref:typename:QRegExp
m_searchBar	lib/qtermwidget.h	/^    SearchBar* m_searchBar;$/;"	m	class:QTermWidget	typeref:typename:SearchBar *
m_session	lib/qtermwidget.cpp	/^    Session *m_session;$/;"	m	struct:TermWidgetImpl	typeref:typename:Session *	file:
m_size	lib/History.h	/^  size_t m_size;$/;"	m	class:Konsole::HistoryTypeBlockArray	typeref:typename:size_t
m_startColumn	lib/HistorySearch.h	/^    int m_startColumn;$/;"	m	class:HistorySearch	typeref:typename:int
m_startLine	lib/HistorySearch.h	/^    int m_startLine;$/;"	m	class:HistorySearch	typeref:typename:int
m_terminalDisplay	lib/qtermwidget.cpp	/^    TerminalDisplay *m_terminalDisplay;$/;"	m	struct:TermWidgetImpl	typeref:typename:TerminalDisplay *	file:
m_useRegularExpressionMenuEntry	lib/SearchBar.h	/^    QAction *m_useRegularExpressionMenuEntry;$/;"	m	class:SearchBar	typeref:typename:QAction *
main	src/main.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
makeImage	lib/TerminalDisplay.cpp	/^void TerminalDisplay::makeImage()$/;"	f	class:TerminalDisplay	typeref:typename:void
makefile	pyqt/config-old.py	/^makefile = pyqtconfig.QtGuiModuleMakefile($/;"	v
makefile	pyqt/config.py	/^makefile = sipconfig.SIPModuleMakefile( configuration = config, build_file = build_file, install/;"	v
map	lib/History.cpp	/^void HistoryFile::map()$/;"	f	class:HistoryFile	typeref:typename:void
masterFd	lib/kpty.cpp	/^int KPty::masterFd() const$/;"	f	class:KPty	typeref:typename:int
masterFd	lib/kpty_p.h	/^    int masterFd;$/;"	m	class:KPtyPrivate	typeref:typename:int
masterMode	lib/Session.cpp	/^int SessionGroup::masterMode() const$/;"	f	class:SessionGroup	typeref:typename:int
masterStatus	lib/Session.cpp	/^bool SessionGroup::masterStatus(Session * session) const$/;"	f	class:SessionGroup	typeref:typename:bool
masters	lib/Session.cpp	/^QList<Session *> SessionGroup::masters() const$/;"	f	class:SessionGroup	typeref:typename:QList<Session * >
matchCase	lib/SearchBar.cpp	/^bool SearchBar::matchCase()$/;"	f	class:SearchBar	typeref:typename:bool
matchFound	lib/qtermwidget.cpp	/^void QTermWidget::matchFound(int startColumn, int startLine, int endColumn, int endLine)$/;"	f	class:QTermWidget	typeref:typename:void
matches	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslator::Entry::matches(int keyCode ,$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:bool
maxNbLines	lib/History.h	/^  unsigned int maxNbLines() const { return _maxLineCount; }$/;"	f	class:Konsole::CompactHistoryScroll	typeref:typename:unsigned int
maxNbLines	lib/History.h	/^  unsigned int maxNbLines() { return _maxLineCount; }$/;"	f	class:Konsole::HistoryScrollBuffer	typeref:typename:unsigned int
maximumLineCount	lib/History.cpp	/^int CompactHistoryType::maximumLineCount() const$/;"	f	class:CompactHistoryType	typeref:typename:int
maximumLineCount	lib/History.cpp	/^int HistoryTypeBlockArray::maximumLineCount() const$/;"	f	class:HistoryTypeBlockArray	typeref:typename:int
maximumLineCount	lib/History.cpp	/^int HistoryTypeBuffer::maximumLineCount() const$/;"	f	class:HistoryTypeBuffer	typeref:typename:int
maximumLineCount	lib/History.cpp	/^int HistoryTypeFile::maximumLineCount() const$/;"	f	class:HistoryTypeFile	typeref:typename:int
maximumLineCount	lib/History.cpp	/^int HistoryTypeNone::maximumLineCount() const$/;"	f	class:HistoryTypeNone	typeref:typename:int
mode	lib/Vt102Emulation.h	/^    bool mode[MODE_total];$/;"	m	class:Konsole::Vt102Emulation::TerminalState	typeref:typename:bool[]
modifierMask	lib/KeyboardTranslator.h	/^inline Qt::KeyboardModifiers KeyboardTranslator::Entry::modifierMask() const { return _modifierM/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:Qt::KeyboardModifiers
modifiers	lib/KeyboardTranslator.h	/^inline Qt::KeyboardModifiers KeyboardTranslator::Entry::modifiers() const { return _modifiers; }$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:Qt::KeyboardModifiers
monitorTimerDone	lib/Session.cpp	/^void Session::monitorTimerDone()$/;"	f	class:Session	typeref:typename:void
motionAfterPasting	lib/TerminalDisplay.cpp	/^int TerminalDisplay::motionAfterPasting()$/;"	f	class:TerminalDisplay	typeref:typename:int
mouseDoubleClickEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::mouseDoubleClickEvent(QMouseEvent* ev)$/;"	f	class:TerminalDisplay	typeref:typename:void
mouseMoveEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::mouseMoveEvent(QMouseEvent* ev)$/;"	f	class:TerminalDisplay	typeref:typename:void
mousePressEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::mousePressEvent(QMouseEvent* ev)$/;"	f	class:TerminalDisplay	typeref:typename:void
mouseReleaseEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::mouseReleaseEvent(QMouseEvent* ev)$/;"	f	class:TerminalDisplay	typeref:typename:void
mouseTripleClickEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::mouseTripleClickEvent(QMouseEvent* ev)$/;"	f	class:TerminalDisplay	typeref:typename:void
moveBlock	lib/BlockArray.cpp	/^void moveBlock(FILE * fion, int cursor, int newpos, char * buffer2)$/;"	f	typeref:typename:void
moveImage	lib/Screen.cpp	/^void Screen::moveImage(int dest, int sourceBegin, int sourceEnd)$/;"	f	class:Screen	typeref:typename:void
name	lib/ColorScheme.cpp	/^QString ColorScheme::name() const { return _name; }$/;"	f	class:ColorScheme	typeref:typename:QString
name	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslator::name() const$/;"	f	class:KeyboardTranslator	typeref:typename:QString
nameTitle	lib/Session.h	/^    QString nameTitle() const {$/;"	f	class:Konsole::Session	typeref:typename:QString
newBlock	lib/BlockArray.cpp	/^size_t BlockArray::newBlock()$/;"	f	class:BlockArray	typeref:typename:size_t
newHotSpot	lib/Filter.cpp	/^RegExpFilter::HotSpot* RegExpFilter::newHotSpot(int startLine,int startColumn,$/;"	f	class:RegExpFilter	typeref:typename:RegExpFilter::HotSpot *
newHotSpot	lib/Filter.cpp	/^RegExpFilter::HotSpot* UrlFilter::newHotSpot(int startLine,int startColumn,int endLine,$/;"	f	class:UrlFilter	typeref:typename:RegExpFilter::HotSpot *
newLine	lib/Screen.cpp	/^void Screen::newLine()$/;"	f	class:Screen	typeref:typename:void
nextEntry	lib/KeyboardTranslator.cpp	/^KeyboardTranslator::Entry KeyboardTranslatorReader::nextEntry()$/;"	f	class:KeyboardTranslatorReader	typeref:typename:KeyboardTranslator::Entry
nextLine	lib/Screen.cpp	/^void Screen::nextLine()$/;"	f	class:Screen	typeref:typename:void
noMatchFound	lib/SearchBar.cpp	/^void SearchBar::noMatchFound()$/;"	f	class:SearchBar	typeref:typename:void
noMatchFound	lib/qtermwidget.cpp	/^void QTermWidget::noMatchFound()$/;"	f	class:QTermWidget	typeref:typename:void
notifyOutputChanged	lib/ScreenWindow.cpp	/^void ScreenWindow::notifyOutputChanged()$/;"	f	class:ScreenWindow	typeref:typename:void
onEmulationSizeChange	lib/Session.cpp	/^void Session::onEmulationSizeChange(QSize size)$/;"	f	class:Session	typeref:typename:void
onReceiveBlock	lib/Session.cpp	/^void Session::onReceiveBlock( const char * buf, int len )$/;"	f	class:Session	typeref:typename:void
onViewSizeChange	lib/Session.cpp	/^void Session::onViewSizeChange(int \/*height*\/, int \/*width*\/)$/;"	f	class:Session	typeref:typename:void
oneOrZero	lib/KeyboardTranslator.h	/^inline int oneOrZero(int value)$/;"	f	namespace:Konsole	typeref:typename:int
opacity	lib/ColorScheme.cpp	/^qreal ColorScheme::opacity() const { return _opacity; }$/;"	f	class:ColorScheme	typeref:typename:qreal
open	lib/kpty.cpp	/^bool KPty::open()$/;"	f	class:KPty	typeref:typename:bool
open	lib/kpty.cpp	/^bool KPty::open(int fd)$/;"	f	class:KPty	typeref:typename:bool
open	lib/kptydevice.cpp	/^bool KPtyDevice::open(OpenMode mode)$/;"	f	class:KPtyDevice	typeref:typename:bool
open	lib/kptydevice.cpp	/^bool KPtyDevice::open(int fd, OpenMode mode)$/;"	f	class:KPtyDevice	typeref:typename:bool
openMode	lib/kprocess.h	/^    QIODevice::OpenMode openMode;$/;"	m	class:KProcessPrivate	typeref:typename:QIODevice::OpenMode
openSlave	lib/kpty.cpp	/^bool KPty::openSlave()$/;"	f	class:KPty	typeref:typename:bool
openSpan	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::openSpan(QString& text , const QString& style)$/;"	f	class:HTMLDecoder	typeref:typename:void
operator !=	lib/Character.h	/^inline bool operator != (const Character& a, const Character& b)$/;"	f	namespace:Konsole	typeref:typename:bool
operator !=	lib/CharacterColor.h	/^inline bool operator != (const CharacterColor& a, const CharacterColor& b)$/;"	f	namespace:Konsole	typeref:typename:bool
operator <<	lib/kprocess.cpp	/^KProcess &KProcess::operator<<(const QString &arg)$/;"	f	class:KProcess	typeref:typename:KProcess &
operator <<	lib/kprocess.cpp	/^KProcess &KProcess::operator<<(const QStringList &args)$/;"	f	class:KProcess	typeref:typename:KProcess &
operator =	lib/CharacterColor.h	/^  void operator=(const ColorEntry& rhs)$/;"	f	class:Konsole::ColorEntry	typeref:typename:void
operator ==	lib/Character.h	/^inline bool operator == (const Character& a, const Character& b)$/;"	f	namespace:Konsole	typeref:typename:bool
operator ==	lib/CharacterColor.h	/^inline bool operator == (const CharacterColor& a, const CharacterColor& b)$/;"	f	namespace:Konsole	typeref:typename:bool
operator ==	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslator::Entry::operator==(const Entry& rhs) const$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:bool
operator delete	lib/History.h	/^  static void operator delete( void *) { \/* do nothing, deallocation from pool is done in destr/;"	f	class:Konsole::CompactHistoryLine	typeref:typename:void
operator new	lib/History.cpp	/^void* CompactHistoryLine::operator new (size_t size, CompactHistoryBlockList& blockList)$/;"	f	class:CompactHistoryLine	typeref:typename:void *
outputChannelMode	lib/kprocess.cpp	/^KProcess::OutputChannelMode KProcess::outputChannelMode() const$/;"	f	class:KProcess	typeref:typename:KProcess::OutputChannelMode
outputChannelMode	lib/kprocess.h	/^    KProcess::OutputChannelMode outputChannelMode;$/;"	m	class:KProcessPrivate	typeref:typename:KProcess::OutputChannelMode
outputSuspended	lib/TerminalDisplay.cpp	/^void TerminalDisplay::outputSuspended(bool suspended)$/;"	f	class:TerminalDisplay	typeref:typename:void
ownMaster	lib/kpty_p.h	/^    bool ownMaster:1;$/;"	m	class:KPtyPrivate	typeref:typename:bool:1
paintEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::paintEvent( QPaintEvent* pe )$/;"	f	class:TerminalDisplay	typeref:typename:void
paintFilters	lib/TerminalDisplay.cpp	/^void TerminalDisplay::paintFilters(QPainter& painter)$/;"	f	class:TerminalDisplay	typeref:typename:void
parseAsCommand	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::parseAsCommand(const QString& text,KeyboardTranslator::Command& c/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
parseAsKeyCode	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::parseAsKeyCode(const QString& item , int& keyCode)$/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
parseAsModifier	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::parseAsModifier(const QString& item , Qt::KeyboardModifier& modif/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
parseAsStateFlag	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::parseAsStateFlag(const QString& item , KeyboardTranslator::State&/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
parseError	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorReader::parseError()$/;"	f	class:KeyboardTranslatorReader	typeref:typename:bool
pasteClipboard	lib/TerminalDisplay.cpp	/^void TerminalDisplay::pasteClipboard()$/;"	f	class:TerminalDisplay	typeref:typename:void
pasteClipboard	lib/qtermwidget.cpp	/^void QTermWidget::pasteClipboard()$/;"	f	class:QTermWidget	typeref:typename:void
pasteSelection	lib/TerminalDisplay.cpp	/^void TerminalDisplay::pasteSelection()$/;"	f	class:TerminalDisplay	typeref:typename:void
pasteSelection	lib/qtermwidget.cpp	/^void QTermWidget::pasteSelection()$/;"	f	class:QTermWidget	typeref:typename:void
pid	lib/kprocess.cpp	/^int KProcess::pid() const$/;"	f	class:KProcess	typeref:typename:int
pound	lib/Vt102Emulation.h	/^  bool pound  ;    \/\/ Some VT100 tricks$/;"	m	struct:Konsole::CharCodes	typeref:typename:bool
preeditRect	lib/TerminalDisplay.cpp	/^QRect TerminalDisplay::preeditRect() const$/;"	f	class:TerminalDisplay	typeref:typename:QRect
preeditString	lib/TerminalDisplay.h	/^        QString preeditString;$/;"	m	struct:Konsole::TerminalDisplay::InputMethodData	typeref:typename:QString
previousPreeditRect	lib/TerminalDisplay.h	/^        QRect previousPreeditRect;$/;"	m	struct:Konsole::TerminalDisplay::InputMethodData	typeref:typename:QRect
process	lib/Filter.cpp	/^void FilterChain::process()$/;"	f	class:FilterChain	typeref:typename:void
process	lib/Filter.cpp	/^void RegExpFilter::process()$/;"	f	class:RegExpFilter	typeref:typename:void
processFilters	lib/TerminalDisplay.cpp	/^void TerminalDisplay::processFilters()$/;"	f	class:TerminalDisplay	typeref:typename:void
processId	lib/Session.cpp	/^int Session::processId() const$/;"	f	class:Session	typeref:typename:int
processToken	lib/Vt102Emulation.cpp	/^void Vt102Emulation::processToken(int token, int p, int q)$/;"	f	class:Vt102Emulation	typeref:typename:void
processWindowAttributeChange	lib/Vt102Emulation.cpp	/^void Vt102Emulation::processWindowAttributeChange()$/;"	f	class:Vt102Emulation	typeref:typename:void
profileKey	lib/Session.cpp	/^QString Session::profileKey() const$/;"	f	class:Session	typeref:typename:QString
prog	lib/kprocess.h	/^    QString prog;$/;"	m	class:KProcessPrivate	typeref:typename:QString
program	lib/Session.cpp	/^QString Session::program() const$/;"	f	class:Session	typeref:typename:QString
program	lib/kprocess.cpp	/^QStringList KProcess::program() const$/;"	f	class:KProcess	typeref:typename:QStringList
programBracketedPasteMode	lib/Emulation.cpp	/^bool Emulation::programBracketedPasteMode() const$/;"	f	class:Emulation	typeref:typename:bool
programUsesMouse	lib/Emulation.cpp	/^bool Emulation::programUsesMouse() const$/;"	f	class:Emulation	typeref:typename:bool
propagateSize	lib/TerminalDisplay.cpp	/^void TerminalDisplay::propagateSize()$/;"	f	class:TerminalDisplay	typeref:typename:void
pty	lib/kptyprocess.cpp	/^KPtyDevice *KPtyProcess::pty() const$/;"	f	class:KPtyProcess	typeref:typename:KPtyDevice *
pty	lib/kptyprocess.h	/^    KPtyDevice *pty;$/;"	m	class:KPtyProcessPrivate	typeref:typename:KPtyDevice *
ptyChannels	lib/kptyprocess.cpp	/^KPtyProcess::PtyChannels KPtyProcess::ptyChannels() const$/;"	f	class:KPtyProcess	typeref:typename:KPtyProcess::PtyChannels
ptyChannels	lib/kptyprocess.h	/^    KPtyProcess::PtyChannels ptyChannels;$/;"	m	class:KPtyProcessPrivate	typeref:typename:KPtyProcess::PtyChannels
ptySlaveFd	lib/Session.h	/^    int ptySlaveFd;$/;"	m	class:Konsole::Session	typeref:typename:int
q_ptr	lib/kprocess.h	/^    KProcess *q_ptr;$/;"	m	class:KProcessPrivate	typeref:typename:KProcess *
q_ptr	lib/kpty_p.h	/^    KPty *q_ptr;$/;"	m	class:KPtyPrivate	typeref:typename:KPty *
qt_ignore_sigpipe	lib/kptydevice.cpp	/^static void qt_ignore_sigpipe()$/;"	f	typeref:typename:void	file:
qt_sip_flags	pyqt/config-old.py	/^qt_sip_flags = config.pyqt_sip_flags$/;"	v
qtermwidget	qtermwidget.spec	/^Name:		qtermwidget$/;"	p
randomSeed	lib/TerminalDisplay.cpp	/^uint TerminalDisplay::randomSeed() const { return _randomSeed; }$/;"	f	class:TerminalDisplay	typeref:typename:uint
randomizedBackgroundColor	lib/ColorScheme.cpp	/^bool ColorScheme::randomizedBackgroundColor() const$/;"	f	class:ColorScheme	typeref:typename:bool
read	lib/ColorScheme.cpp	/^ColorScheme* KDE3ColorSchemeReader::read()$/;"	f	class:KDE3ColorSchemeReader	typeref:typename:ColorScheme *
read	lib/ColorScheme.cpp	/^void ColorScheme::read(const QString & fileName)$/;"	f	class:ColorScheme	typeref:typename:void
read	lib/kptydevice.h	/^    int read(char *data, int maxLength)$/;"	f	class:KRingBuffer	typeref:typename:int
readBuffer	lib/kptydevice.h	/^    KRingBuffer readBuffer;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:KRingBuffer
readColorEntry	lib/ColorScheme.cpp	/^void ColorScheme::readColorEntry(QSettings * s , int index)$/;"	f	class:ColorScheme	typeref:typename:void
readColorLine	lib/ColorScheme.cpp	/^bool KDE3ColorSchemeReader::readColorLine(const QString& line,ColorScheme* scheme)$/;"	f	class:KDE3ColorSchemeReader	typeref:typename:bool
readData	lib/kptydevice.cpp	/^qint64 KPtyDevice::readData(char *data, qint64 maxlen)$/;"	f	class:KPtyDevice	typeref:typename:qint64
readLine	lib/kptydevice.h	/^    int readLine(char *data, int maxLength)$/;"	f	class:KRingBuffer	typeref:typename:int
readLineData	lib/kptydevice.cpp	/^qint64 KPtyDevice::readLineData(char *data, qint64 maxlen)$/;"	f	class:KPtyDevice	typeref:typename:qint64
readNext	lib/KeyboardTranslator.cpp	/^void KeyboardTranslatorReader::readNext()$/;"	f	class:KeyboardTranslatorReader	typeref:typename:void
readNotifier	lib/kptydevice.h	/^    QSocketNotifier *readNotifier;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:QSocketNotifier *
readPointer	lib/kptydevice.h	/^    inline const char *readPointer() const$/;"	f	class:KRingBuffer	typeref:typename:const char *
readSize	lib/kptydevice.h	/^    inline int readSize() const$/;"	f	class:KRingBuffer	typeref:typename:int
readTitleLine	lib/ColorScheme.cpp	/^bool KDE3ColorSchemeReader::readTitleLine(const QString& line,ColorScheme* scheme)$/;"	f	class:KDE3ColorSchemeReader	typeref:typename:bool
readWriteBalance	lib/History.h	/^  int readWriteBalance;$/;"	m	class:Konsole::HistoryFile	typeref:typename:int
receiveChar	lib/Emulation.cpp	/^void Emulation::receiveChar(int c)$/;"	f	class:Emulation	typeref:typename:void
receiveChar	lib/Vt102Emulation.cpp	/^void Vt102Emulation::receiveChar(int cc)$/;"	f	class:Vt102Emulation	typeref:typename:void
receiveData	lib/Emulation.cpp	/^void Emulation::receiveData(const char* text, int length)$/;"	f	class:Emulation	typeref:typename:void
refresh	lib/Session.cpp	/^void Session::refresh()$/;"	f	class:Session	typeref:typename:void
regExp	lib/Filter.cpp	/^QRegExp RegExpFilter::regExp() const$/;"	f	class:RegExpFilter	typeref:typename:QRegExp
remaining	lib/History.h	/^  virtual unsigned int remaining(){ return blockStart+blockLength-tail;}$/;"	f	class:Konsole::CompactHistoryBlock	typeref:typename:unsigned int
removeEntry	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::removeEntry(const Entry& entry)$/;"	f	class:KeyboardTranslator	typeref:typename:void
removeFilter	lib/Filter.cpp	/^void FilterChain::removeFilter(Filter* filter)$/;"	f	class:FilterChain	typeref:typename:void
removeSession	lib/Session.cpp	/^void SessionGroup::removeSession(Session * session)$/;"	f	class:SessionGroup	typeref:typename:void
removeView	lib/Session.cpp	/^void Session::removeView(TerminalDisplay * widget)$/;"	f	class:Session	typeref:typename:void
rendition	lib/Character.h	/^  quint8  rendition;$/;"	m	class:Konsole::Character	typeref:typename:quint8
rendition	lib/History.h	/^  quint8 rendition;$/;"	m	class:Konsole::CharacterFormat	typeref:typename:quint8
rendition	lib/Screen.h	/^        quint8 rendition;$/;"	m	class:Konsole::Screen::SavedState	typeref:typename:quint8
replaceEntry	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::replaceEntry(const Entry& existing , const Entry& replacement)$/;"	f	class:KeyboardTranslator	typeref:typename:void
reportAnswerBack	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportAnswerBack()$/;"	f	class:Vt102Emulation	typeref:typename:void
reportCursorPosition	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportCursorPosition()$/;"	f	class:Vt102Emulation	typeref:typename:void
reportDecodingError	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportDecodingError()$/;"	f	class:Vt102Emulation	typeref:typename:void
reportSecondaryAttributes	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportSecondaryAttributes()$/;"	f	class:Vt102Emulation	typeref:typename:void
reportStatus	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportStatus()$/;"	f	class:Vt102Emulation	typeref:typename:void
reportTerminalParms	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportTerminalParms(int p)$/;"	f	class:Vt102Emulation	typeref:typename:void
reportTerminalType	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reportTerminalType()$/;"	f	class:Vt102Emulation	typeref:typename:void
reserve	lib/kptydevice.h	/^    char *reserve(int bytes)$/;"	f	class:KRingBuffer	typeref:typename:char *
reset	lib/Filter.cpp	/^void Filter::reset()$/;"	f	class:Filter	typeref:typename:void
reset	lib/Filter.cpp	/^void FilterChain::reset()$/;"	f	class:FilterChain	typeref:typename:void
reset	lib/Screen.cpp	/^void Screen::reset(bool clearScreen)$/;"	f	class:Screen	typeref:typename:void
reset	lib/Vt102Emulation.cpp	/^void Vt102Emulation::reset()$/;"	f	class:Vt102Emulation	typeref:typename:void
resetCharset	lib/Vt102Emulation.cpp	/^void Vt102Emulation::resetCharset(int scrno)$/;"	f	class:Vt102Emulation	typeref:typename:void
resetDroppedLines	lib/Screen.cpp	/^void Screen::resetDroppedLines()$/;"	f	class:Screen	typeref:typename:void
resetMode	lib/Screen.cpp	/^void Screen::resetMode(int m)$/;"	f	class:Screen	typeref:typename:void
resetMode	lib/Vt102Emulation.cpp	/^void Vt102Emulation::resetMode(int m)$/;"	f	class:Vt102Emulation	typeref:typename:void
resetModes	lib/Vt102Emulation.cpp	/^void Vt102Emulation::resetModes()$/;"	f	class:Vt102Emulation	typeref:typename:void
resetRendition	lib/Screen.cpp	/^void Screen::resetRendition(int re)$/;"	f	class:Screen	typeref:typename:void
resetScrollCount	lib/ScreenWindow.cpp	/^void ScreenWindow::resetScrollCount()$/;"	f	class:ScreenWindow	typeref:typename:void
resetScrolledLines	lib/Screen.cpp	/^void Screen::resetScrolledLines()$/;"	f	class:Screen	typeref:typename:void
resetTokenizer	lib/Vt102Emulation.cpp	/^void Vt102Emulation::resetTokenizer()$/;"	f	class:Vt102Emulation	typeref:typename:void
resizeEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::resizeEvent(QResizeEvent*)$/;"	f	class:TerminalDisplay	typeref:typename:void
resizeEvent	lib/qtermwidget.cpp	/^void QTermWidget::resizeEvent(QResizeEvent*)$/;"	f	class:QTermWidget	typeref:typename:void
resizeImage	lib/Screen.cpp	/^void Screen::resizeImage(int new_lines, int new_columns)$/;"	f	class:Screen	typeref:typename:void
restoreCursor	lib/Screen.cpp	/^void Screen::restoreCursor()$/;"	f	class:Screen	typeref:typename:void
restoreCursor	lib/Vt102Emulation.cpp	/^void Vt102Emulation::restoreCursor()$/;"	f	class:Vt102Emulation	typeref:typename:void
restoreMode	lib/Screen.cpp	/^void Screen::restoreMode(int m)$/;"	f	class:Screen	typeref:typename:void
restoreMode	lib/Vt102Emulation.cpp	/^void Vt102Emulation::restoreMode(int m)$/;"	f	class:Vt102Emulation	typeref:typename:void
resultToString	lib/KeyboardTranslator.cpp	/^QString KeyboardTranslator::Entry::resultToString(bool expandWildCards,Qt::KeyboardModifiers mod/;"	f	class:KeyboardTranslator::Entry	typeref:typename:QString
reverseIndex	lib/Screen.cpp	/^void Screen::reverseIndex()$/;"	f	class:Screen	typeref:typename:void
reverseRendition	lib/Screen.cpp	/^void Screen::reverseRendition(Character& p) const$/;"	f	class:Screen	typeref:typename:void
run	lib/Session.cpp	/^void Session::run()$/;"	f	class:Session	typeref:typename:void
runEmptyPTY	lib/Session.cpp	/^void Session::runEmptyPTY()$/;"	f	class:Session	typeref:typename:void
sa_graphic	lib/Vt102Emulation.h	/^  bool sa_graphic; \/\/ saved graphic$/;"	m	struct:Konsole::CharCodes	typeref:typename:bool
sa_pound	lib/Vt102Emulation.h	/^  bool sa_pound;   \/\/ saved pound$/;"	m	struct:Konsole::CharCodes	typeref:typename:bool
saturation	lib/ColorScheme.h	/^        quint8  saturation;$/;"	m	class:Konsole::ColorScheme::RandomizationRange	typeref:typename:quint8
saveCursor	lib/Screen.cpp	/^void Screen::saveCursor()$/;"	f	class:Screen	typeref:typename:void
saveCursor	lib/Vt102Emulation.cpp	/^void Vt102Emulation::saveCursor()$/;"	f	class:Vt102Emulation	typeref:typename:void
saveMode	lib/Screen.cpp	/^void Screen::saveMode(int m)$/;"	f	class:Screen	typeref:typename:void
saveMode	lib/Vt102Emulation.cpp	/^void Vt102Emulation::saveMode(int m)$/;"	f	class:Vt102Emulation	typeref:typename:void
saveTranslator	lib/KeyboardTranslator.cpp	/^bool KeyboardTranslatorManager::saveTranslator(const KeyboardTranslator* translator)$/;"	f	class:KeyboardTranslatorManager	typeref:typename:bool
savedModes	lib/Screen.h	/^    int savedModes[MODES_SCREEN];$/;"	m	class:Konsole::Screen	typeref:typename:int[]
savedState	lib/Screen.h	/^    SavedState savedState;$/;"	m	class:Konsole::Screen	typeref:typename:SavedState
screen	lib/ScreenWindow.cpp	/^Screen* ScreenWindow::screen() const$/;"	f	class:ScreenWindow	typeref:typename:Screen *
screenColumnsCount	lib/qtermwidget.cpp	/^int QTermWidget::screenColumnsCount()$/;"	f	class:QTermWidget	typeref:typename:int
screenLines	lib/Screen.h	/^    ImageLine*          screenLines;    \/\/ [lines]$/;"	m	class:Konsole::Screen	typeref:typename:ImageLine *
screenLinesCount	lib/qtermwidget.cpp	/^int QTermWidget::screenLinesCount()$/;"	f	class:QTermWidget	typeref:typename:int
screenWindow	lib/TerminalDisplay.cpp	/^ScreenWindow* TerminalDisplay::screenWindow() const$/;"	f	class:TerminalDisplay	typeref:typename:ScreenWindow *
scroll	lib/History.cpp	/^HistoryScroll* CompactHistoryType::scroll ( HistoryScroll *old ) const$/;"	f	class:CompactHistoryType	typeref:typename:HistoryScroll *
scroll	lib/History.cpp	/^HistoryScroll* HistoryTypeBlockArray::scroll(HistoryScroll *old) const$/;"	f	class:HistoryTypeBlockArray	typeref:typename:HistoryScroll *
scroll	lib/History.cpp	/^HistoryScroll* HistoryTypeBuffer::scroll(HistoryScroll *old) const$/;"	f	class:HistoryTypeBuffer	typeref:typename:HistoryScroll *
scroll	lib/History.cpp	/^HistoryScroll* HistoryTypeFile::scroll(HistoryScroll *old) const$/;"	f	class:HistoryTypeFile	typeref:typename:HistoryScroll *
scroll	lib/History.cpp	/^HistoryScroll* HistoryTypeNone::scroll(HistoryScroll *old) const$/;"	f	class:HistoryTypeNone	typeref:typename:HistoryScroll *
scrollBarPositionChanged	lib/TerminalDisplay.cpp	/^void TerminalDisplay::scrollBarPositionChanged(int)$/;"	f	class:TerminalDisplay	typeref:typename:void
scrollBy	lib/ScreenWindow.cpp	/^void ScreenWindow::scrollBy( RelativeScrollMode mode , int amount )$/;"	f	class:ScreenWindow	typeref:typename:void
scrollCount	lib/ScreenWindow.cpp	/^int ScreenWindow::scrollCount() const$/;"	f	class:ScreenWindow	typeref:typename:int
scrollDown	lib/Screen.cpp	/^void Screen::scrollDown(int from, int n)$/;"	f	class:Screen	typeref:typename:void
scrollDown	lib/Screen.cpp	/^void Screen::scrollDown(int n)$/;"	f	class:Screen	typeref:typename:void
scrollImage	lib/TerminalDisplay.cpp	/^void TerminalDisplay::scrollImage(int lines , const QRect& screenWindowRegion)$/;"	f	class:TerminalDisplay	typeref:typename:void
scrollRegion	lib/ScreenWindow.cpp	/^QRect ScreenWindow::scrollRegion() const$/;"	f	class:ScreenWindow	typeref:typename:QRect
scrollTo	lib/ScreenWindow.cpp	/^void ScreenWindow::scrollTo( int line )$/;"	f	class:ScreenWindow	typeref:typename:void
scrollToEnd	lib/TerminalDisplay.cpp	/^void TerminalDisplay::scrollToEnd()$/;"	f	class:TerminalDisplay	typeref:typename:void
scrollToEnd	lib/qtermwidget.cpp	/^void QTermWidget::scrollToEnd()$/;"	f	class:QTermWidget	typeref:typename:void
scrollUp	lib/Screen.cpp	/^void Screen::scrollUp(int from, int n)$/;"	f	class:Screen	typeref:typename:void
scrollUp	lib/Screen.cpp	/^void Screen::scrollUp(int n)$/;"	f	class:Screen	typeref:typename:void
scrolledLines	lib/Screen.cpp	/^int Screen::scrolledLines() const$/;"	f	class:Screen	typeref:typename:int
search	lib/HistorySearch.cpp	/^bool HistorySearch::search(int startColumn, int startLine, int endColumn, int endLine) {$/;"	f	class:HistorySearch	typeref:typename:bool
search	lib/HistorySearch.cpp	/^void HistorySearch::search() {$/;"	f	class:HistorySearch	typeref:typename:void
search	lib/qtermwidget.cpp	/^void QTermWidget::search(bool forwards, bool next)$/;"	f	class:QTermWidget	typeref:typename:void
searchText	lib/SearchBar.cpp	/^QString SearchBar::searchText()$/;"	f	class:SearchBar	typeref:typename:QString
selBegin	lib/Screen.h	/^    int selBegin; \/\/ The first location selected.$/;"	m	class:Konsole::Screen	typeref:typename:int
selBottomRight	lib/Screen.h	/^    int selBottomRight;    \/\/ Bottom Right Location.$/;"	m	class:Konsole::Screen	typeref:typename:int
selTopLeft	lib/Screen.h	/^    int selTopLeft;    \/\/ TopLeft Location.$/;"	m	class:Konsole::Screen	typeref:typename:int
selectedText	lib/Screen.cpp	/^QString Screen::selectedText(bool preserveLineBreaks) const$/;"	f	class:Screen	typeref:typename:QString
selectedText	lib/ScreenWindow.cpp	/^QString ScreenWindow::selectedText( bool preserveLineBreaks ) const$/;"	f	class:ScreenWindow	typeref:typename:QString
selectedText	lib/qtermwidget.cpp	/^QString QTermWidget::selectedText(bool preserveLineBreaks)$/;"	f	class:QTermWidget	typeref:typename:QString
selectionChanged	lib/TerminalDisplay.cpp	/^void TerminalDisplay::selectionChanged()$/;"	f	class:TerminalDisplay	typeref:typename:void
selectionChanged	lib/qtermwidget.cpp	/^void QTermWidget::selectionChanged(bool textSelected)$/;"	f	class:QTermWidget	typeref:typename:void
sendData	lib/Pty.cpp	/^void Pty::sendData(const char* data, int length)$/;"	f	class:Pty	typeref:typename:void
sendKeyEvent	lib/Emulation.cpp	/^void Emulation::sendKeyEvent( QKeyEvent* ev )$/;"	f	class:Emulation	typeref:typename:void
sendKeyEvent	lib/Vt102Emulation.cpp	/^void Vt102Emulation::sendKeyEvent( QKeyEvent* event )$/;"	f	class:Vt102Emulation	typeref:typename:void
sendMouseEvent	lib/Emulation.cpp	/^void Emulation::sendMouseEvent(int \/*buttons*\/, int \/*column*\/, int \/*row*\/, int \/*eventT/;"	f	class:Emulation	typeref:typename:void
sendMouseEvent	lib/Vt102Emulation.cpp	/^void Vt102Emulation::sendMouseEvent( int cb, int cx, int cy , int eventType )$/;"	f	class:Vt102Emulation	typeref:typename:void
sendSignal	lib/Session.cpp	/^bool Session::sendSignal(int signal)$/;"	f	class:Session	typeref:typename:bool
sendString	lib/Emulation.cpp	/^void Emulation::sendString(const char*,int)$/;"	f	class:Emulation	typeref:typename:void
sendString	lib/Vt102Emulation.cpp	/^void Vt102Emulation::sendString(const char* s , int length)$/;"	f	class:Vt102Emulation	typeref:typename:void
sendText	lib/Session.cpp	/^void Session::sendText(const QString & text) const$/;"	f	class:Session	typeref:typename:void
sendText	lib/Vt102Emulation.cpp	/^void Vt102Emulation::sendText( const QString& text )$/;"	f	class:Vt102Emulation	typeref:typename:void
sendText	lib/qtermwidget.cpp	/^void QTermWidget::sendText(const QString &text)$/;"	f	class:QTermWidget	typeref:typename:void
sessionFinished	lib/qtermwidget.cpp	/^void QTermWidget::sessionFinished()$/;"	f	class:QTermWidget	typeref:typename:void
sessionId	lib/Session.cpp	/^int Session::sessionId() const$/;"	f	class:Session	typeref:typename:int
sessions	lib/Session.cpp	/^QList<Session *> SessionGroup::sessions() const$/;"	f	class:SessionGroup	typeref:typename:QList<Session * >
setAddToUtmp	lib/Session.cpp	/^void Session::setAddToUtmp(bool set)$/;"	f	class:Session	typeref:typename:void
setAndUseCharset	lib/Vt102Emulation.cpp	/^void Vt102Emulation::setAndUseCharset(int n, int cs)$/;"	f	class:Vt102Emulation	typeref:typename:void
setAntialias	lib/TerminalDisplay.h	/^    static void setAntialias( bool antialias ) { _antialiasText = antialias; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setArgs	lib/qtermwidget.cpp	/^void QTermWidget::setArgs(const QStringList &args)$/;"	f	class:QTermWidget	typeref:typename:void
setArguments	lib/Session.cpp	/^void Session::setArguments(const QStringList & arguments)$/;"	f	class:Session	typeref:typename:void
setAutoClose	lib/Session.h	/^    void setAutoClose(bool b) {$/;"	f	class:Konsole::Session	typeref:typename:void
setBackColor	lib/Screen.cpp	/^void Screen::setBackColor(int space, int color)$/;"	f	class:Screen	typeref:typename:void
setBackgroundColor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBackgroundColor(const QColor& color)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBackgroundImage	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBackgroundImage(QString backgroundImage)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBellMode	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBellMode(int mode)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBidiEnabled	lib/TerminalDisplay.h	/^    void setBidiEnabled(bool set) { _bidiEnabled=set; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setBlinkingCursor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBlinkingCursor(bool blink)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBlinkingTextEnabled	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBlinkingTextEnabled(bool blink)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBoldIntense	lib/TerminalDisplay.h	/^    void setBoldIntense(bool value) { _boldIntense = value; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setBracketedPasteMode	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setBracketedPasteMode(bool on)$/;"	f	class:TerminalDisplay	typeref:typename:void
setBuffer	lib/Filter.cpp	/^void Filter::setBuffer(const QString* buffer , const QList<int>* linePositions)$/;"	f	class:Filter	typeref:typename:void
setBuffer	lib/Filter.cpp	/^void FilterChain::setBuffer(const QString* buffer , const QList<int>* linePositions)$/;"	f	class:FilterChain	typeref:typename:void
setCTty	lib/kpty.cpp	/^void KPty::setCTty()$/;"	f	class:KPty	typeref:typename:void
setCapturedTexts	lib/Filter.cpp	/^void RegExpFilter::HotSpot::setCapturedTexts(const QStringList& texts)$/;"	f	class:RegExpFilter::HotSpot	typeref:typename:void
setCharset	lib/Vt102Emulation.cpp	/^void Vt102Emulation::setCharset(int n, int cs) \/\/ on both screens.$/;"	f	class:Vt102Emulation	typeref:typename:void
setCodec	lib/Emulation.cpp	/^void Emulation::setCodec(EmulationCodec codec)$/;"	f	class:Emulation	typeref:typename:void
setCodec	lib/Emulation.cpp	/^void Emulation::setCodec(const QTextCodec * qtc)$/;"	f	class:Emulation	typeref:typename:void
setCodec	lib/Session.cpp	/^void Session::setCodec(QTextCodec * codec)$/;"	f	class:Session	typeref:typename:void
setColorScheme	lib/qtermwidget.cpp	/^void QTermWidget::setColorScheme(const QString& origName)$/;"	f	class:QTermWidget	typeref:typename:void
setColorTable	lib/TerminalCharacterDecoder.cpp	/^void HTMLDecoder::setColorTable(const ColorEntry* table)$/;"	f	class:HTMLDecoder	typeref:typename:void
setColorTable	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setColorTable(const ColorEntry table[])$/;"	f	class:TerminalDisplay	typeref:typename:void
setColorTableEntry	lib/ColorScheme.cpp	/^void ColorScheme::setColorTableEntry(int index , const ColorEntry& entry)$/;"	f	class:ColorScheme	typeref:typename:void
setCommand	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setCommand( Command command )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setCtrlDrag	lib/TerminalDisplay.h	/^    void setCtrlDrag(bool enable) { _ctrlDrag=enable; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setCursorX	lib/Screen.cpp	/^void Screen::setCursorX(int x)$/;"	f	class:Screen	typeref:typename:void
setCursorY	lib/Screen.cpp	/^void Screen::setCursorY(int y)$/;"	f	class:Screen	typeref:typename:void
setCursorYX	lib/Screen.cpp	/^void Screen::setCursorYX(int y, int x)$/;"	f	class:Screen	typeref:typename:void
setDarkBackground	lib/Session.cpp	/^void Session::setDarkBackground(bool darkBackground)$/;"	f	class:Session	typeref:typename:void
setDefaultMargins	lib/Screen.cpp	/^void Screen::setDefaultMargins()$/;"	f	class:Screen	typeref:typename:void
setDefaultMargins	lib/Vt102Emulation.cpp	/^void Vt102Emulation::setDefaultMargins()$/;"	f	class:Vt102Emulation	typeref:typename:void
setDefaultRendition	lib/Screen.cpp	/^void Screen::setDefaultRendition()$/;"	f	class:Screen	typeref:typename:void
setDescription	lib/ColorScheme.cpp	/^void ColorScheme::setDescription(const QString& description) { _description = description; }$/;"	f	class:ColorScheme	typeref:typename:void
setDescription	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::setDescription(const QString& description)$/;"	f	class:KeyboardTranslator	typeref:typename:void
setEcho	lib/kpty.cpp	/^bool KPty::setEcho(bool echo)$/;"	f	class:KPty	typeref:typename:bool
setEmptyPTYProperties	lib/Pty.cpp	/^void Pty::setEmptyPTYProperties()$/;"	f	class:Pty	typeref:typename:void
setEnv	lib/kprocess.cpp	/^void KProcess::setEnv(const QString &name, const QString &value, bool overwrite)$/;"	f	class:KProcess	typeref:typename:void
setEnvironment	lib/Session.cpp	/^void Session::setEnvironment(const QStringList & environment)$/;"	f	class:Session	typeref:typename:void
setEnvironment	lib/qtermwidget.cpp	/^void QTermWidget::setEnvironment(const QStringList& environment)$/;"	f	class:QTermWidget	typeref:typename:void
setErase	lib/Pty.cpp	/^void Pty::setErase(char erase)$/;"	f	class:Pty	typeref:typename:void
setFixedSize	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setFixedSize(int cols, int lins)$/;"	f	class:TerminalDisplay	typeref:typename:void
setFlowControlEnabled	lib/Pty.cpp	/^void Pty::setFlowControlEnabled(bool enable)$/;"	f	class:Pty	typeref:typename:void
setFlowControlEnabled	lib/Session.cpp	/^void Session::setFlowControlEnabled(bool enabled)$/;"	f	class:Session	typeref:typename:void
setFlowControlEnabled	lib/qtermwidget.cpp	/^void QTermWidget::setFlowControlEnabled(bool enabled)$/;"	f	class:QTermWidget	typeref:typename:void
setFlowControlWarningEnabled	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setFlowControlWarningEnabled( bool enable )$/;"	f	class:TerminalDisplay	typeref:typename:void
setFlowControlWarningEnabled	lib/qtermwidget.cpp	/^void QTermWidget::setFlowControlWarningEnabled(bool enabled)$/;"	f	class:QTermWidget	typeref:typename:void
setFont	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setFont(const QFont &)$/;"	f	class:TerminalDisplay	typeref:typename:void
setForeColor	lib/Screen.cpp	/^void Screen::setForeColor(int space, int color)$/;"	f	class:Screen	typeref:typename:void
setForegroundColor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setForegroundColor(const QColor& color)$/;"	f	class:TerminalDisplay	typeref:typename:void
setFormat	lib/History.h	/^  void setFormat(const Character& c) {$/;"	f	class:Konsole::CharacterFormat	typeref:typename:void
setHistory	lib/Emulation.cpp	/^void Emulation::setHistory(const HistoryType& t)$/;"	f	class:Emulation	typeref:typename:void
setHistorySize	lib/BlockArray.cpp	/^bool BlockArray::setHistorySize(size_t newsize)$/;"	f	class:BlockArray	typeref:typename:bool
setHistorySize	lib/qtermwidget.cpp	/^void QTermWidget::setHistorySize(int lines)$/;"	f	class:QTermWidget	typeref:typename:void
setHistoryType	lib/Session.cpp	/^void Session::setHistoryType(const HistoryType & hType)$/;"	f	class:Session	typeref:typename:void
setIconName	lib/Session.cpp	/^void Session::setIconName(const QString & iconName)$/;"	f	class:Session	typeref:typename:void
setIconText	lib/Session.cpp	/^void Session::setIconText(const QString & iconText)$/;"	f	class:Session	typeref:typename:void
setImage	lib/Filter.cpp	/^void TerminalImageFilterChain::setImage(const Character* const image , int lines , int columns, /;"	f	class:TerminalImageFilterChain	typeref:typename:void
setImageSize	lib/Emulation.cpp	/^void Emulation::setImageSize(int lines, int columns)$/;"	f	class:Emulation	typeref:typename:void
setInitialWorkingDirectory	lib/Session.cpp	/^void Session::setInitialWorkingDirectory(const QString & dir)$/;"	f	class:Session	typeref:typename:void
setKeyBindings	lib/Emulation.cpp	/^void Emulation::setKeyBindings(const QString& name)$/;"	f	class:Emulation	typeref:typename:void
setKeyBindings	lib/Session.cpp	/^void Session::setKeyBindings(const QString & id)$/;"	f	class:Session	typeref:typename:void
setKeyBindings	lib/qtermwidget.cpp	/^void QTermWidget::setKeyBindings(const QString & kb)$/;"	f	class:QTermWidget	typeref:typename:void
setKeyCode	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setKeyCode(int keyCode) { _keyCode = keyCode; }$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setKeyboardCursorColor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setKeyboardCursorColor(bool useForegroundColor, const QColor& color)$/;"	f	class:TerminalDisplay	typeref:typename:void
setKeyboardCursorShape	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setKeyboardCursorShape(QTermWidget::KeyboardCursorShape shape)$/;"	f	class:TerminalDisplay	typeref:typename:void
setKeyboardCursorShape	lib/qtermwidget.cpp	/^void QTermWidget::setKeyboardCursorShape(KeyboardCursorShape shape)$/;"	f	class:QTermWidget	typeref:typename:void
setLineProperty	lib/Screen.cpp	/^void Screen::setLineProperty(LineProperty property , bool enable)$/;"	f	class:Screen	typeref:typename:void
setLineSpacing	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setLineSpacing(uint i)$/;"	f	class:TerminalDisplay	typeref:typename:void
setMargins	lib/Screen.cpp	/^void Screen::setMargins(int top, int bot)$/;"	f	class:Screen	typeref:typename:void
setMargins	lib/Vt102Emulation.cpp	/^void Vt102Emulation::setMargins(int t, int b)$/;"	f	class:Vt102Emulation	typeref:typename:void
setMasterMode	lib/Session.cpp	/^void SessionGroup::setMasterMode(int mode)$/;"	f	class:SessionGroup	typeref:typename:void
setMasterStatus	lib/Session.cpp	/^void SessionGroup::setMasterStatus(Session * session, bool master)$/;"	f	class:SessionGroup	typeref:typename:void
setMaxNbLines	lib/History.cpp	/^void CompactHistoryScroll::setMaxNbLines ( unsigned int lineCount )$/;"	f	class:CompactHistoryScroll	typeref:typename:void
setMaxNbLines	lib/History.cpp	/^void HistoryScrollBuffer::setMaxNbLines(unsigned int lineCount)$/;"	f	class:HistoryScrollBuffer	typeref:typename:void
setMode	lib/Screen.cpp	/^void Screen::setMode(int m)$/;"	f	class:Screen	typeref:typename:void
setMode	lib/Vt102Emulation.cpp	/^void Vt102Emulation::setMode(int m)$/;"	f	class:Vt102Emulation	typeref:typename:void
setModifierMask	lib/KeyboardTranslator.h	/^inline void  KeyboardTranslator::Entry::setModifierMask( Qt::KeyboardModifiers mask )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setModifiers	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setModifiers( Qt::KeyboardModifiers modifier )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setMonitorActivity	lib/Session.cpp	/^void Session::setMonitorActivity(bool _monitor)$/;"	f	class:Session	typeref:typename:void
setMonitorActivity	lib/qtermwidget.cpp	/^void QTermWidget::setMonitorActivity(bool monitor)$/;"	f	class:QTermWidget	typeref:typename:void
setMonitorSilence	lib/Session.cpp	/^void Session::setMonitorSilence(bool _monitor)$/;"	f	class:Session	typeref:typename:void
setMonitorSilence	lib/qtermwidget.cpp	/^void QTermWidget::setMonitorSilence(bool monitor)$/;"	f	class:QTermWidget	typeref:typename:void
setMonitorSilenceSeconds	lib/Session.cpp	/^void Session::setMonitorSilenceSeconds(int seconds)$/;"	f	class:Session	typeref:typename:void
setMotionAfterPasting	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setMotionAfterPasting(MotionAfterPasting action)$/;"	f	class:TerminalDisplay	typeref:typename:void
setMotionAfterPasting	lib/qtermwidget.cpp	/^void QTermWidget::setMotionAfterPasting(int action)$/;"	f	class:QTermWidget	typeref:typename:void
setName	lib/ColorScheme.cpp	/^void ColorScheme::setName(const QString& name) { _name = name; }$/;"	f	class:ColorScheme	typeref:typename:void
setName	lib/KeyboardTranslator.cpp	/^void KeyboardTranslator::setName(const QString& name)$/;"	f	class:KeyboardTranslator	typeref:typename:void
setNextOpenMode	lib/kprocess.cpp	/^void KProcess::setNextOpenMode(QIODevice::OpenMode mode)$/;"	f	class:KProcess	typeref:typename:void
setOpacity	lib/ColorScheme.cpp	/^void ColorScheme::setOpacity(qreal opacity) { _opacity = opacity; }$/;"	f	class:ColorScheme	typeref:typename:void
setOpacity	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setOpacity(qreal opacity)$/;"	f	class:TerminalDisplay	typeref:typename:void
setOutputChannelMode	lib/kprocess.cpp	/^void KProcess::setOutputChannelMode(OutputChannelMode mode)$/;"	f	class:KProcess	typeref:typename:void
setProfileKey	lib/Session.cpp	/^void Session::setProfileKey(const QString & key)$/;"	f	class:Session	typeref:typename:void
setProgram	lib/Session.cpp	/^void Session::setProgram(const QString & program)$/;"	f	class:Session	typeref:typename:void
setProgram	lib/kprocess.cpp	/^void KProcess::setProgram(const QString &exe, const QStringList &args)$/;"	f	class:KProcess	typeref:typename:void
setProgram	lib/kprocess.cpp	/^void KProcess::setProgram(const QStringList &argv)$/;"	f	class:KProcess	typeref:typename:void
setPtyChannels	lib/kptyprocess.cpp	/^void KPtyProcess::setPtyChannels(PtyChannels channels)$/;"	f	class:KPtyProcess	typeref:typename:void
setRandomSeed	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setRandomSeed(uint randomSeed) { _randomSeed = randomSeed; }$/;"	f	class:TerminalDisplay	typeref:typename:void
setRandomizationRange	lib/ColorScheme.cpp	/^void ColorScheme::setRandomizationRange( int index , quint16 hue , quint8 saturation ,$/;"	f	class:ColorScheme	typeref:typename:void
setRandomizedBackgroundColor	lib/ColorScheme.cpp	/^void ColorScheme::setRandomizedBackgroundColor(bool randomize)$/;"	f	class:ColorScheme	typeref:typename:void
setRecordLinePositions	lib/TerminalCharacterDecoder.cpp	/^void PlainTextDecoder::setRecordLinePositions(bool record)$/;"	f	class:PlainTextDecoder	typeref:typename:void
setRegExp	lib/Filter.cpp	/^void RegExpFilter::setRegExp(const QRegExp& regExp)$/;"	f	class:RegExpFilter	typeref:typename:void
setRendition	lib/Screen.cpp	/^void Screen::setRendition(int re)$/;"	f	class:Screen	typeref:typename:void
setScreen	lib/Emulation.cpp	/^void Emulation::setScreen(int n)$/;"	f	class:Emulation	typeref:typename:void
setScreen	lib/ScreenWindow.cpp	/^void ScreenWindow::setScreen(Screen* screen)$/;"	f	class:ScreenWindow	typeref:typename:void
setScreenWindow	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setScreenWindow(ScreenWindow* window)$/;"	f	class:TerminalDisplay	typeref:typename:void
setScroll	lib/Screen.cpp	/^void Screen::setScroll(const HistoryType& t , bool copyPreviousScroll)$/;"	f	class:Screen	typeref:typename:void
setScroll	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setScroll(int cursor, int slines)$/;"	f	class:TerminalDisplay	typeref:typename:void
setScrollBarPosition	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setScrollBarPosition(QTermWidget::ScrollBarPosition position)$/;"	f	class:TerminalDisplay	typeref:typename:void
setScrollBarPosition	lib/qtermwidget.cpp	/^void QTermWidget::setScrollBarPosition(ScrollBarPosition pos)$/;"	f	class:QTermWidget	typeref:typename:void
setSelection	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setSelection(const QString& t)$/;"	f	class:TerminalDisplay	typeref:typename:void
setSelectionEnd	lib/Screen.cpp	/^void Screen::setSelectionEnd( const int x, const int y)$/;"	f	class:Screen	typeref:typename:void
setSelectionEnd	lib/ScreenWindow.cpp	/^void ScreenWindow::setSelectionEnd( int column , int line )$/;"	f	class:ScreenWindow	typeref:typename:void
setSelectionEnd	lib/qtermwidget.cpp	/^void QTermWidget::setSelectionEnd(int row, int column)$/;"	f	class:QTermWidget	typeref:typename:void
setSelectionStart	lib/Screen.cpp	/^void Screen::setSelectionStart(const int x, const int y, const bool mode)$/;"	f	class:Screen	typeref:typename:void
setSelectionStart	lib/ScreenWindow.cpp	/^void ScreenWindow::setSelectionStart( int column , int line , bool columnMode )$/;"	f	class:ScreenWindow	typeref:typename:void
setSelectionStart	lib/qtermwidget.cpp	/^void QTermWidget::setSelectionStart(int row, int column)$/;"	f	class:QTermWidget	typeref:typename:void
setShellProgram	lib/qtermwidget.cpp	/^void QTermWidget::setShellProgram(const QString &progname)$/;"	f	class:QTermWidget	typeref:typename:void
setSilenceTimeout	lib/qtermwidget.cpp	/^void QTermWidget::setSilenceTimeout(int seconds)$/;"	f	class:QTermWidget	typeref:typename:void
setSize	lib/BlockArray.cpp	/^bool BlockArray::setSize(size_t newsize)$/;"	f	class:BlockArray	typeref:typename:bool
setSize	lib/Session.cpp	/^void Session::setSize(const QSize & size)$/;"	f	class:Session	typeref:typename:void
setSize	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setSize(int columns, int lines)$/;"	f	class:TerminalDisplay	typeref:typename:void
setSize	lib/qtermwidget.cpp	/^void QTermWidget::setSize(const QSize &size)$/;"	f	class:QTermWidget	typeref:typename:void
setState	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setState( States state )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setStateMask	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setStateMask( States stateMask )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setSuspended	lib/kptydevice.cpp	/^void KPtyDevice::setSuspended(bool suspended)$/;"	f	class:KPtyDevice	typeref:typename:void
setTabTitleFormat	lib/Session.cpp	/^void Session::setTabTitleFormat(TabTitleContext context , const QString & format)$/;"	f	class:Session	typeref:typename:void
setTerminalBackgroundImage	lib/qtermwidget.cpp	/^void QTermWidget::setTerminalBackgroundImage(QString backgroundImage)$/;"	f	class:QTermWidget	typeref:typename:void
setTerminalFont	lib/qtermwidget.cpp	/^void QTermWidget::setTerminalFont(const QFont &font)$/;"	f	class:QTermWidget	typeref:typename:void
setTerminalOpacity	lib/qtermwidget.cpp	/^void QTermWidget::setTerminalOpacity(qreal level)$/;"	f	class:QTermWidget	typeref:typename:void
setTerminalSizeHint	lib/TerminalDisplay.h	/^    void setTerminalSizeHint(bool on) { _terminalSizeHint=on; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setTerminalSizeStartup	lib/TerminalDisplay.h	/^    void setTerminalSizeStartup(bool on) { _terminalSizeStartup=on; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setText	lib/KeyboardTranslator.h	/^inline void KeyboardTranslator::Entry::setText( const QByteArray& text )$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:void
setTextCodec	lib/qtermwidget.cpp	/^void QTermWidget::setTextCodec(QTextCodec *codec)$/;"	f	class:QTermWidget	typeref:typename:void
setTitle	lib/Session.cpp	/^void Session::setTitle(TitleRole role , const QString & newTitle)$/;"	f	class:Session	typeref:typename:void
setTrackOutput	lib/ScreenWindow.cpp	/^void ScreenWindow::setTrackOutput(bool trackOutput)$/;"	f	class:ScreenWindow	typeref:typename:void
setTrailingWhitespace	lib/TerminalCharacterDecoder.cpp	/^void PlainTextDecoder::setTrailingWhitespace(bool enable)$/;"	f	class:PlainTextDecoder	typeref:typename:void
setTransparencyEnabled	lib/TerminalDisplay.h	/^    static void setTransparencyEnabled(bool enable)$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setTripleClickMode	lib/TerminalDisplay.h	/^    void setTripleClickMode(TripleClickMode mode) { _tripleClickMode = mode; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:void
setType	lib/Filter.cpp	/^void Filter::HotSpot::setType(Type type)$/;"	f	class:Filter::HotSpot	typeref:typename:void
setUseUtmp	lib/kptyprocess.cpp	/^void KPtyProcess::setUseUtmp(bool value)$/;"	f	class:KPtyProcess	typeref:typename:void
setUserTitle	lib/Session.cpp	/^void Session::setUserTitle( int what, const QString & caption )$/;"	f	class:Session	typeref:typename:void
setUsesMouse	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setUsesMouse(bool on)$/;"	f	class:TerminalDisplay	typeref:typename:void
setUtf8Mode	lib/Pty.cpp	/^void Pty::setUtf8Mode(bool enable)$/;"	f	class:Pty	typeref:typename:void
setVTFont	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setVTFont(const QFont& f)$/;"	f	class:TerminalDisplay	typeref:typename:void
setWinSize	lib/kpty.cpp	/^bool KPty::setWinSize(int lines, int columns)$/;"	f	class:KPty	typeref:typename:bool
setWindowLines	lib/ScreenWindow.cpp	/^void ScreenWindow::setWindowLines(int lines)$/;"	f	class:ScreenWindow	typeref:typename:void
setWindowSize	lib/Pty.cpp	/^void Pty::setWindowSize(int lines, int cols)$/;"	f	class:Pty	typeref:typename:void
setWordCharacters	lib/TerminalDisplay.cpp	/^void TerminalDisplay::setWordCharacters(const QString& wc)$/;"	f	class:TerminalDisplay	typeref:typename:void
setWorkingDirectory	lib/qtermwidget.cpp	/^void QTermWidget::setWorkingDirectory(const QString& dir)$/;"	f	class:QTermWidget	typeref:typename:void
setWrapped	lib/History.h	/^  virtual void setWrapped(bool isWrapped) { wrapped=isWrapped;};$/;"	f	class:Konsole::CompactHistoryLine	typeref:typename:void
setWriteable	lib/Pty.cpp	/^void Pty::setWriteable(bool writeable)$/;"	f	class:Pty	typeref:typename:void
setZoom	lib/qtermwidget.cpp	/^void QTermWidget::setZoom(int step)$/;"	f	class:QTermWidget	typeref:typename:void
setupChildProcess	lib/Pty.cpp	/^void Pty::setupChildProcess()$/;"	f	class:Pty	typeref:typename:void
setupChildProcess	lib/kptyprocess.cpp	/^void KPtyProcess::setupChildProcess()$/;"	f	class:KPtyProcess	typeref:typename:void
show	lib/SearchBar.cpp	/^void SearchBar::show()$/;"	f	class:SearchBar	typeref:typename:void
showBulk	lib/Emulation.cpp	/^void Emulation::showBulk()$/;"	f	class:Emulation	typeref:typename:void
showEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::showEvent(QShowEvent*)$/;"	f	class:TerminalDisplay	typeref:typename:void
showResizeNotification	lib/TerminalDisplay.cpp	/^void TerminalDisplay::showResizeNotification()$/;"	f	class:TerminalDisplay	typeref:typename:void
size	lib/BlockArray.h	/^    size_t size;$/;"	m	class:Konsole::BlockArray	typeref:typename:size_t
size	lib/BlockArray.h	/^    size_t size;$/;"	m	struct:Konsole::Block	typeref:typename:size_t
size	lib/Session.cpp	/^QSize Session::size()$/;"	f	class:Session	typeref:typename:QSize
size	lib/kptydevice.h	/^    inline int size() const$/;"	f	class:KRingBuffer	typeref:typename:int
sizeHint	lib/TerminalDisplay.cpp	/^QSize TerminalDisplay::sizeHint() const$/;"	f	class:TerminalDisplay	typeref:typename:QSize
sizeHint	lib/qtermwidget.cpp	/^QSize QTermWidget::sizeHint() const$/;"	f	class:QTermWidget	typeref:typename:QSize
slaveFd	lib/kpty.cpp	/^int KPty::slaveFd() const$/;"	f	class:KPty	typeref:typename:int
slaveFd	lib/kpty_p.h	/^    int slaveFd;$/;"	m	class:KPtyPrivate	typeref:typename:int
start	lib/Pty.cpp	/^int Pty::start(const QString& program,$/;"	f	class:Pty	typeref:typename:int
start	lib/TerminalDisplay.h	/^      QPoint          start;$/;"	m	struct:Konsole::TerminalDisplay::_dragInfo	typeref:typename:QPoint
start	lib/kprocess.cpp	/^void KProcess::start()$/;"	f	class:KProcess	typeref:typename:void
startColumn	lib/Filter.cpp	/^int Filter::HotSpot::startColumn() const$/;"	f	class:Filter::HotSpot	typeref:typename:int
startDetached	lib/kprocess.cpp	/^int KProcess::startDetached()$/;"	f	class:KProcess	typeref:typename:int
startDetached	lib/kprocess.cpp	/^int KProcess::startDetached(const QString &exe, const QStringList &args)$/;"	f	class:KProcess	typeref:typename:int
startDetached	lib/kprocess.cpp	/^int KProcess::startDetached(const QStringList &argv)$/;"	f	class:KProcess	typeref:typename:int
startLine	lib/Filter.cpp	/^int Filter::HotSpot::startLine() const$/;"	f	class:Filter::HotSpot	typeref:typename:int
startOfLine	lib/History.cpp	/^int HistoryScrollFile::startOfLine(int lineno)$/;"	f	class:HistoryScrollFile	typeref:typename:int
startPos	lib/History.h	/^  quint16 startPos;$/;"	m	class:Konsole::CharacterFormat	typeref:typename:quint16
startShellProgram	lib/qtermwidget.cpp	/^void QTermWidget::startShellProgram()$/;"	f	class:QTermWidget	typeref:typename:void
startTerminalTeletype	lib/qtermwidget.cpp	/^void QTermWidget::startTerminalTeletype()$/;"	f	class:QTermWidget	typeref:typename:void
state	lib/KeyboardTranslator.h	/^inline KeyboardTranslator::States KeyboardTranslator::Entry::state() const { return _state; }$/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:KeyboardTranslator::States
state	lib/TerminalDisplay.h	/^      DragState       state;$/;"	m	struct:Konsole::TerminalDisplay::_dragInfo	typeref:typename:DragState
stateMask	lib/KeyboardTranslator.h	/^inline KeyboardTranslator::States KeyboardTranslator::Entry::stateMask() const { return _stateMa/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:KeyboardTranslator::States
string_width	lib/konsole_wcwidth.cpp	/^int string_width( const QString & txt )$/;"	f	typeref:typename:int
swapColorTable	lib/TerminalDisplay.cpp	/^void TerminalDisplay::swapColorTable()$/;"	f	class:TerminalDisplay	typeref:typename:void
tab	lib/Screen.cpp	/^void Screen::tab(int n)$/;"	f	class:Screen	typeref:typename:void
tabStops	lib/Screen.h	/^    QBitArray tabStops;$/;"	m	class:Konsole::Screen	typeref:typename:QBitArray
tabTitleFormat	lib/Session.cpp	/^QString Session::tabTitleFormat(TabTitleContext context) const$/;"	f	class:Session	typeref:typename:QString
tail	lib/History.h	/^  quint8* tail;$/;"	m	class:Konsole::CompactHistoryBlock	typeref:typename:quint8 *
tail	lib/kptydevice.h	/^    int head, tail;$/;"	m	class:KRingBuffer	typeref:typename:int
tcGetAttr	lib/kpty.cpp	/^bool KPty::tcGetAttr(struct ::termios * ttmode) const$/;"	f	class:KPty	typeref:typename:bool
tcSetAttr	lib/kpty.cpp	/^bool KPty::tcSetAttr(struct ::termios * ttmode)$/;"	f	class:KPty	typeref:typename:bool
terminalSizeHint	lib/TerminalDisplay.h	/^    bool terminalSizeHint() { return _terminalSizeHint; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:bool
text	lib/History.h	/^  quint16* text;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:quint16 *
text	lib/KeyboardTranslator.h	/^        QString text;$/;"	m	struct:Konsole::KeyboardTranslatorReader::Token	typeref:typename:QString
text	lib/KeyboardTranslator.h	/^inline QByteArray KeyboardTranslator::Entry::text(bool expandWildCards,Qt::KeyboardModifiers mod/;"	f	class:Konsole::KeyboardTranslator::Entry	typeref:typename:QByteArray
textWidth	lib/TerminalDisplay.cpp	/^int TerminalDisplay::textWidth(const int startColumn, const int length, const int line) const$/;"	f	class:TerminalDisplay	typeref:typename:int
timerEvent	lib/TerminalDisplay.cpp	/^void AutoScrollHandler::timerEvent(QTimerEvent* event)$/;"	f	class:AutoScrollHandler	typeref:typename:void
timeradd	lib/kptydevice.cpp	/^# define timeradd(/;"	d	file:
timersub	lib/kptydevice.cpp	/^# define timersub(/;"	d	file:
title	lib/Session.cpp	/^QString Session::title(TitleRole role) const$/;"	f	class:Session	typeref:typename:QString
title	lib/qtermwidget.cpp	/^QString QTermWidget::title() const$/;"	f	class:QTermWidget	typeref:typename:QString
tmpFile	lib/History.h	/^  QTemporaryFile tmpFile;$/;"	m	class:Konsole::HistoryFile	typeref:typename:QTemporaryFile
toStartOfLine	lib/Screen.cpp	/^void Screen::toStartOfLine()$/;"	f	class:Screen	typeref:typename:void
toggleIntensive	lib/CharacterColor.h	/^inline void CharacterColor::toggleIntensive()$/;"	f	class:Konsole::CharacterColor	typeref:typename:void
toggleShowSearchBar	lib/qtermwidget.cpp	/^void QTermWidget::toggleShowSearchBar()$/;"	f	class:QTermWidget	typeref:typename:void
tokenBuffer	lib/Vt102Emulation.h	/^  int tokenBuffer[MAX_TOKEN_LENGTH]; \/\/FIXME: overflow?$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:int[]
tokenBufferPos	lib/Vt102Emulation.h	/^  int tokenBufferPos;$/;"	m	class:Konsole::Vt102Emulation	typeref:typename:int
tokenize	lib/KeyboardTranslator.cpp	/^QList<KeyboardTranslatorReader::Token> KeyboardTranslatorReader::tokenize(const QString& line)$/;"	f	class:KeyboardTranslatorReader	typeref:typename:QList<KeyboardTranslatorReader::Token>
topMargin	lib/Screen.cpp	/^int Screen::topMargin() const$/;"	f	class:Screen	typeref:typename:int
totalSize	lib/kptydevice.h	/^    int totalSize;$/;"	m	class:KRingBuffer	typeref:typename:int
tr_NOOP	lib/ColorScheme.cpp	/^#define tr_NOOP$/;"	d	file:
trackOutput	lib/ScreenWindow.cpp	/^bool ScreenWindow::trackOutput() const$/;"	f	class:ScreenWindow	typeref:typename:bool
trailingWhitespace	lib/TerminalCharacterDecoder.cpp	/^bool PlainTextDecoder::trailingWhitespace() const$/;"	f	class:PlainTextDecoder	typeref:typename:bool
translatedColorNameForIndex	lib/ColorScheme.cpp	/^QString ColorScheme::translatedColorNameForIndex(int index)$/;"	f	class:ColorScheme	typeref:typename:QString
translatedColorNames	lib/ColorScheme.cpp	/^const char* const ColorScheme::translatedColorNames[TABLE_COLORS] =$/;"	m	class:ColorScheme	typeref:typename:const char * const[]
translatedColorNames	lib/ColorScheme.h	/^    static const char* const translatedColorNames[TABLE_COLORS];$/;"	m	class:Konsole::ColorScheme	typeref:typename:const char * const[]
transparent	lib/CharacterColor.h	/^  bool   transparent;$/;"	m	class:Konsole::ColorEntry	typeref:typename:bool
tripleClickMode	lib/TerminalDisplay.h	/^    TripleClickMode tripleClickMode() { return _tripleClickMode; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:TripleClickMode
tripleClickTimeout	lib/TerminalDisplay.cpp	/^void TerminalDisplay::tripleClickTimeout()$/;"	f	class:TerminalDisplay	typeref:typename:void
ttyName	lib/kpty.cpp	/^const char * KPty::ttyName() const$/;"	f	class:KPty	typeref:typename:const char *
ttyName	lib/kpty_p.h	/^    QByteArray ttyName;$/;"	m	class:KPtyPrivate	typeref:typename:QByteArray
type	lib/Filter.cpp	/^Filter::HotSpot::Type Filter::HotSpot::type() const$/;"	f	class:Filter::HotSpot	typeref:typename:Filter::HotSpot::Type
type	lib/KeyboardTranslator.h	/^        Type type;$/;"	m	struct:Konsole::KeyboardTranslatorReader::Token	typeref:typename:Type
unescape	lib/KeyboardTranslator.cpp	/^QByteArray KeyboardTranslator::Entry::unescape(const QByteArray& input) const$/;"	f	class:KeyboardTranslator::Entry	typeref:typename:QByteArray
unmap	lib/BlockArray.cpp	/^void BlockArray::unmap()$/;"	f	class:BlockArray	typeref:typename:void
unmap	lib/History.cpp	/^void HistoryFile::unmap()$/;"	f	class:HistoryFile	typeref:typename:void
unreserve	lib/kptydevice.h	/^    inline void unreserve(int bytes)$/;"	f	class:KRingBuffer	typeref:typename:void
unsetEnv	lib/kprocess.cpp	/^void KProcess::unsetEnv(const QString &name)$/;"	f	class:KProcess	typeref:typename:void
updateCursor	lib/TerminalDisplay.cpp	/^void TerminalDisplay::updateCursor()$/;"	f	class:TerminalDisplay	typeref:typename:void
updateEffectiveRendition	lib/Screen.cpp	/^void Screen::updateEffectiveRendition()$/;"	f	class:Screen	typeref:typename:void
updateFilters	lib/TerminalDisplay.cpp	/^void TerminalDisplay::updateFilters()$/;"	f	class:TerminalDisplay	typeref:typename:void
updateImage	lib/TerminalDisplay.cpp	/^void TerminalDisplay::updateImage()$/;"	f	class:TerminalDisplay	typeref:typename:void
updateImageSize	lib/TerminalDisplay.cpp	/^void TerminalDisplay::updateImageSize()$/;"	f	class:TerminalDisplay	typeref:typename:void
updateLineProperties	lib/TerminalDisplay.cpp	/^void TerminalDisplay::updateLineProperties()$/;"	f	class:TerminalDisplay	typeref:typename:void
updateTerminalSize	lib/Session.cpp	/^void Session::updateTerminalSize()$/;"	f	class:Session	typeref:typename:void
updateTitle	lib/Vt102Emulation.cpp	/^void Vt102Emulation::updateTitle()$/;"	f	class:Vt102Emulation	typeref:typename:void
urlType	lib/Filter.cpp	/^UrlFilter::HotSpot::UrlType UrlFilter::HotSpot::urlType() const$/;"	f	class:UrlFilter::HotSpot	typeref:typename:UrlFilter::HotSpot::UrlType
useCharset	lib/Vt102Emulation.cpp	/^void Vt102Emulation::useCharset(int n)$/;"	f	class:Vt102Emulation	typeref:typename:void
useRegularExpression	lib/SearchBar.cpp	/^bool SearchBar::useRegularExpression()$/;"	f	class:SearchBar	typeref:typename:bool
userTitle	lib/Session.cpp	/^QString Session::userTitle() const$/;"	f	class:Session	typeref:typename:QString
usesMouse	lib/TerminalDisplay.cpp	/^bool TerminalDisplay::usesMouse() const$/;"	f	class:TerminalDisplay	typeref:typename:bool
usesMouseChanged	lib/Emulation.cpp	/^void Emulation::usesMouseChanged(bool usesMouse)$/;"	f	class:Emulation	typeref:typename:void
utf8	lib/Emulation.h	/^  bool utf8() const$/;"	f	class:Konsole::Emulation	typeref:typename:bool
value	lib/ColorScheme.h	/^        quint8  value;$/;"	m	class:Konsole::ColorScheme::RandomizationRange	typeref:typename:quint8
viewDestroyed	lib/Session.cpp	/^void Session::viewDestroyed(QObject * view)$/;"	f	class:Session	typeref:typename:void
views	lib/Session.cpp	/^QList<TerminalDisplay *> Session::views() const$/;"	f	class:Session	typeref:typename:QList<TerminalDisplay * >
vt100_graphics	lib/TerminalDisplay.cpp	/^unsigned short Konsole::vt100_graphics[32] =$/;"	m	class:Konsole	typeref:typename:unsigned short[32]
w	pyqt/test.py	/^w = QTermWidget.QTermWidget()$/;"	v
waitForBytesWritten	lib/kptydevice.cpp	/^bool KPtyDevice::waitForBytesWritten(int msecs)$/;"	f	class:KPtyDevice	typeref:typename:bool
waitForReadyRead	lib/kptydevice.cpp	/^bool KPtyDevice::waitForReadyRead(int msecs)$/;"	f	class:KPtyDevice	typeref:typename:bool
wheelEvent	lib/TerminalDisplay.cpp	/^void TerminalDisplay::wheelEvent( QWheelEvent* ev )$/;"	f	class:TerminalDisplay	typeref:typename:void
widget	lib/SearchBar.h	/^    Ui::SearchBar widget;$/;"	m	class:SearchBar	typeref:typename:Ui::SearchBar
widget	lib/TerminalDisplay.h	/^    QWidget* widget() const { return static_cast<QWidget*>(parent()); }$/;"	f	class:Konsole::AutoScrollHandler	typeref:typename:QWidget *
windowColumns	lib/ScreenWindow.cpp	/^int ScreenWindow::windowColumns() const$/;"	f	class:ScreenWindow	typeref:typename:int
windowId	lib/Session.cpp	/^WId Session::windowId() const$/;"	f	class:Session	typeref:typename:WId
windowLines	lib/ScreenWindow.cpp	/^int ScreenWindow::windowLines() const$/;"	f	class:ScreenWindow	typeref:typename:int
windowSize	lib/Pty.cpp	/^QSize Pty::windowSize() const$/;"	f	class:Pty	typeref:typename:QSize
wordCharacters	lib/TerminalDisplay.h	/^    QString wordCharacters() { return _wordCharacters; }$/;"	f	class:Konsole::TerminalDisplay	typeref:typename:QString
workingDirectory	lib/qtermwidget.cpp	/^QString QTermWidget::workingDirectory()$/;"	f	class:QTermWidget	typeref:typename:QString
wrapped	lib/History.h	/^  bool wrapped;$/;"	m	class:Konsole::CompactHistoryLine	typeref:typename:bool
write	lib/kptydevice.h	/^    inline void write(const char *data, int len)$/;"	f	class:KRingBuffer	typeref:typename:void
writeAll	lib/kprocess.cpp	/^void KProcessPrivate::writeAll(const QByteArray &buf, int fd)$/;"	f	class:KProcessPrivate	typeref:typename:void
writeBuffer	lib/kptydevice.h	/^    KRingBuffer writeBuffer;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:KRingBuffer
writeData	lib/kptydevice.cpp	/^qint64 KPtyDevice::writeData(const char *data, qint64 len)$/;"	f	class:KPtyDevice	typeref:typename:qint64
writeEntry	lib/KeyboardTranslator.cpp	/^void KeyboardTranslatorWriter::writeEntry( const KeyboardTranslator::Entry& entry )$/;"	f	class:KeyboardTranslatorWriter	typeref:typename:void
writeHeader	lib/KeyboardTranslator.cpp	/^void KeyboardTranslatorWriter::writeHeader( const QString& description )$/;"	f	class:KeyboardTranslatorWriter	typeref:typename:void
writeLinesToStream	lib/Screen.cpp	/^void Screen::writeLinesToStream(TerminalCharacterDecoder* decoder, int fromLine, int toLine) con/;"	f	class:Screen	typeref:typename:void
writeNotifier	lib/kptydevice.h	/^    QSocketNotifier *writeNotifier;$/;"	m	struct:KPtyDevicePrivate	typeref:typename:QSocketNotifier *
writeSelectionToStream	lib/Screen.cpp	/^void Screen::writeSelectionToStream(TerminalCharacterDecoder* decoder ,$/;"	f	class:Screen	typeref:typename:void
writeToStream	lib/Emulation.cpp	/^void Emulation::writeToStream( TerminalCharacterDecoder* _decoder ,$/;"	f	class:Emulation	typeref:typename:void
writeToStream	lib/Screen.cpp	/^void Screen::writeToStream(TerminalCharacterDecoder* decoder,$/;"	f	class:Screen	typeref:typename:void
yMouseScroll	lib/TerminalDisplay.cpp	/^#define yMouseScroll /;"	d	file:
zoomIn	lib/qtermwidget.cpp	/^void QTermWidget::zoomIn()$/;"	f	class:QTermWidget	typeref:typename:void
zoomOut	lib/qtermwidget.cpp	/^void QTermWidget::zoomOut()$/;"	f	class:QTermWidget	typeref:typename:void
~BlockArray	lib/BlockArray.cpp	/^BlockArray::~BlockArray()$/;"	f	class:BlockArray
~ColorScheme	lib/ColorScheme.cpp	/^ColorScheme::~ColorScheme()$/;"	f	class:ColorScheme
~ColorSchemeManager	lib/ColorScheme.cpp	/^ColorSchemeManager::~ColorSchemeManager()$/;"	f	class:ColorSchemeManager
~CompactHistoryBlock	lib/History.h	/^  virtual ~CompactHistoryBlock(){$/;"	f	class:Konsole::CompactHistoryBlock
~CompactHistoryBlockList	lib/History.cpp	/^CompactHistoryBlockList::~CompactHistoryBlockList()$/;"	f	class:CompactHistoryBlockList
~CompactHistoryLine	lib/History.cpp	/^CompactHistoryLine::~CompactHistoryLine()$/;"	f	class:CompactHistoryLine
~CompactHistoryScroll	lib/History.cpp	/^CompactHistoryScroll::~CompactHistoryScroll()$/;"	f	class:CompactHistoryScroll
~Emulation	lib/Emulation.cpp	/^Emulation::~Emulation()$/;"	f	class:Emulation
~ExtendedCharTable	lib/Emulation.cpp	/^ExtendedCharTable::~ExtendedCharTable()$/;"	f	class:ExtendedCharTable
~Filter	lib/Filter.cpp	/^Filter::~Filter()$/;"	f	class:Filter
~FilterChain	lib/Filter.cpp	/^FilterChain::~FilterChain()$/;"	f	class:FilterChain
~HistoryFile	lib/History.cpp	/^HistoryFile::~HistoryFile()$/;"	f	class:HistoryFile
~HistoryScroll	lib/History.cpp	/^HistoryScroll::~HistoryScroll()$/;"	f	class:HistoryScroll
~HistoryScrollBlockArray	lib/History.cpp	/^HistoryScrollBlockArray::~HistoryScrollBlockArray()$/;"	f	class:HistoryScrollBlockArray
~HistoryScrollBuffer	lib/History.cpp	/^HistoryScrollBuffer::~HistoryScrollBuffer()$/;"	f	class:HistoryScrollBuffer
~HistoryScrollFile	lib/History.cpp	/^HistoryScrollFile::~HistoryScrollFile()$/;"	f	class:HistoryScrollFile
~HistoryScrollNone	lib/History.cpp	/^HistoryScrollNone::~HistoryScrollNone()$/;"	f	class:HistoryScrollNone
~HistorySearch	lib/HistorySearch.cpp	/^HistorySearch::~HistorySearch() {$/;"	f	class:HistorySearch
~HistoryType	lib/History.cpp	/^HistoryType::~HistoryType()$/;"	f	class:HistoryType
~HotSpot	lib/Filter.cpp	/^Filter::HotSpot::~HotSpot()$/;"	f	class:Filter::HotSpot
~HotSpot	lib/Filter.cpp	/^UrlFilter::HotSpot::~HotSpot()$/;"	f	class:UrlFilter::HotSpot
~KProcess	lib/kprocess.cpp	/^KProcess::~KProcess()$/;"	f	class:KProcess
~KProcessPrivate	lib/kprocess.h	/^    virtual ~KProcessPrivate()$/;"	f	class:KProcessPrivate
~KPty	lib/kpty.cpp	/^KPty::~KPty()$/;"	f	class:KPty
~KPtyDevice	lib/kptydevice.cpp	/^KPtyDevice::~KPtyDevice()$/;"	f	class:KPtyDevice
~KPtyPrivate	lib/kpty.cpp	/^KPtyPrivate::~KPtyPrivate()$/;"	f	class:KPtyPrivate
~KPtyProcess	lib/kptyprocess.cpp	/^KPtyProcess::~KPtyProcess()$/;"	f	class:KPtyProcess
~KeyboardTranslatorManager	lib/KeyboardTranslator.cpp	/^KeyboardTranslatorManager::~KeyboardTranslatorManager()$/;"	f	class:KeyboardTranslatorManager
~KeyboardTranslatorWriter	lib/KeyboardTranslator.cpp	/^KeyboardTranslatorWriter::~KeyboardTranslatorWriter()$/;"	f	class:KeyboardTranslatorWriter
~Pty	lib/Pty.cpp	/^Pty::~Pty()$/;"	f	class:Pty
~QTermWidget	lib/qtermwidget.cpp	/^QTermWidget::~QTermWidget()$/;"	f	class:QTermWidget
~Screen	lib/Screen.cpp	/^Screen::~Screen()$/;"	f	class:Screen
~ScreenWindow	lib/ScreenWindow.cpp	/^ScreenWindow::~ScreenWindow()$/;"	f	class:ScreenWindow
~SearchBar	lib/SearchBar.cpp	/^SearchBar::~SearchBar() {$/;"	f	class:SearchBar
~Session	lib/Session.cpp	/^Session::~Session()$/;"	f	class:Session
~SessionGroup	lib/Session.cpp	/^SessionGroup::~SessionGroup()$/;"	f	class:SessionGroup
~TerminalCharacterDecoder	lib/TerminalCharacterDecoder.h	/^    virtual ~TerminalCharacterDecoder() {}$/;"	f	class:Konsole::TerminalCharacterDecoder
~TerminalDisplay	lib/TerminalDisplay.cpp	/^TerminalDisplay::~TerminalDisplay()$/;"	f	class:TerminalDisplay
~TerminalImageFilterChain	lib/Filter.cpp	/^TerminalImageFilterChain::~TerminalImageFilterChain()$/;"	f	class:TerminalImageFilterChain
~Vt102Emulation	lib/Vt102Emulation.cpp	/^Vt102Emulation::~Vt102Emulation()$/;"	f	class:Vt102Emulation
